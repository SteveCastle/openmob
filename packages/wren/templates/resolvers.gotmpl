module.exports = client => ({
{{range .Schema.Tables}}
  {{.Name}} : {
{{range .Columns}}{{if eq .Name "ID"}}{{range .FKColumnRefs}}    {{.Column.Table.Name}}s: ({ ID }) =>
    client
      .List{{.Column.Table.Name}}()
      .sendMessage({ api: 'v1', filters: [{ {{.RefColumn.Table.Name}}: ID }], limit: 10 })
      .then(res => res.items),
{{end}}{{end}}{{if .IsFK}}    {{.Name}}: ({ {{.Name}} }) =>
    client
      .Get{{.Name}}()
      .sendMessage({ api: 'v1',  ID: {{.Name}} })
      .then(res => res.item),{{end}}{{end}}},{{end}}
  Query: {
    {{range .Schema.Tables}}
    list{{.Name}}: (_, { limit, ordering, filters }) =>
      client
        .List{{.Name}}()
        .sendMessage({ api: 'v1', limit, ordering, filters })
        .then(res => res.items),
    get{{.Name}}: (_, { ID }) =>
      client
        .Get{{.Name}}()
        .sendMessage({ api: 'v1', ID })
        .then(res => res.item),{{end}}
  },
  Mutation: {
    {{range .Schema.Tables}}
    create{{.Name}}: (_, { {{camel .Name}} }) =>
      client
        .Create{{.Name}}()
        .sendMessage({ api: 'v1', item: { ...{{camel .Name}} } })
        .then(res => ({ ID: res.ID, ...{{camel .Name}} })),
    update{{.Name}}: (_, { ID, {{camel .Name}} }) =>
      client
        .Update{{.Name}}()
        .sendMessage({ api: 'v1', item: { ID, ...{{camel .Name}} } })
        .then(res => res.updated),
    delete{{.Name}}: (_, { ID }) =>
      client
        .Delete{{.Name}}()
        .sendMessage({ api: 'v1', ID })
        .then(res => res.deleted),{{end}}
  }
});
