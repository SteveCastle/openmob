import React from "react"
import { useQuery } from "react-apollo-hooks"
import gql from "graphql-tag"
import PropTypes from "prop-types"
import Content from "@openmob/bluebird/src/components/layout/Content"
import Card from "@openmob/bluebird/src/components/cards/Card"
import Form from "@openmob/bluebird/src/components/forms/Form"
import Widget from "@openmob/bluebird/src/components/forms/Widget"
import Label from "@openmob/bluebird/src/components/forms/Label"
import Input from "@openmob/bluebird/src/components/forms/Input"
import Button from '@openmob/bluebird/src/components/buttons/Button'

const isObject = a => !!a && a.constructor === Object
const getValue = obj =>
  Object.entries(obj).reduce(entry =>
    entry[0] === "seconds" || entry[0] === "ID" ? entry[1] : null
  )
const parseObject = obj => (isObject(obj) ? getValue(obj) : obj)

const GET_{{toUpper .Table.Name}} = gql`
  query get{{.Table.Name}}ById($id: ID!){
    get{{.Table.Name}}(ID: $id) {
      {{range $i, $value := .Table.Columns}}{{.Name}}{{if eq .Type "Time!"}}{seconds}{{end}}{{if eq .Type "Time"}}{seconds}{{end}}{{if eq .Type "ID"}}{ID}{{end}}{{if eq .Type "ID!"}}{{if ne $i 0}}{ID}{{end}}{{end}}
      {{end}}
    }
  }
`

function Edit{{.Table.Name}}({ id }) {
  const {
    data: { get{{.Table.Name}}: item = {} },
    error,
    loading,
  } = useQuery(GET_{{toUpper .Table.Name}}, {
    variables: { id },
  })

  if (loading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error! {error.message}</div>
  }

  return (
    <Content>
    <Card>
    <Form>
      <h1>Edit {item.ID}</h1>
{{range $i, $value := .Table.Columns}}  <Widget>
      <Label>{{.Name}}</Label>
      <Input placeholder={parseObject(item.{{.Name}})}/>
  </Widget>
{{end}}
      <Button label="Edit" />
      </Form>
    </Card>
    </Content>
  )
}

Edit{{.Table.Name}}.propTypes = {
  id: PropTypes.string,
}

export default Edit{{.Table.Name}}
