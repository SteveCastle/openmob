/* eslint-disable */

import React from "react"
import { useQuery, useMutation } from "react-apollo-hooks"
import gql from "graphql-tag"
import { Formik } from "formik"
import PropTypes from "prop-types"
import Content from "@openmob/bluebird/src/components/layout/Content"
import Card from "@openmob/bluebird/src/components/cards/Card"
import Form from "@openmob/bluebird/src/components/forms/Form"
import Widget from "@openmob/bluebird/src/components/forms/Widget"
import Label from "@openmob/bluebird/src/components/forms/Label"
import Input from "@openmob/bluebird/src/components/forms/Input"
import TextArea from "@openmob/bluebird/src/components/forms/TextArea"
import Button from '@openmob/bluebird/src/components/buttons/Button'
import parseObject from "../../../common/helpers"

const GET_{{toUpper .Table.Name}} = gql`
  query get{{.Table.Name}}ById($id: ID!){
    get{{.Table.Name}}(ID: $id) {
      {{range $i, $value := .Table.Columns}}{{.Name}}{{if eq .Type "Time!"}}{seconds, nanos}{{end}}{{if eq .Type "Time"}}{seconds, nanos}{{end}}{{if eq .Type "ID"}}{ID}{{end}}{{if eq .Type "ID!"}}{{if ne $i 0}}{ID}{{end}}{{end}}
      {{end}}
    }
  }
`
const UPDATE_{{toUpper .Table.Name}} = gql`
  mutation update{{.Table.Name}}($id: ID!, ${{camel .Table.Name}}: {{.Table.Name}}Input) {
    update{{.Table.Name}}(ID: $id, {{camel .Table.Name}}: ${{camel .Table.Name}}, buildStatic: true)
  }
`

function Edit{{.Table.Name}}({ id }) {
  const {
    data: { get{{.Table.Name}}: item = {} },
    error,
    loading,
  } = useQuery(GET_{{toUpper .Table.Name}}, {
    variables: { id },
  })

  const update{{.Table.Name}} = useMutation(UPDATE_{{toUpper .Table.Name}})

  if (loading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error! {error.message}</div>
  }

  return (
    <Formik
      initialValues={{"{{"}}{{range $i, $value := .Table.Columns}}{{.Name}}: parseObject(item.{{.Name}}),
{{end}}{{"}}"}}
      onSubmit={(values, { setSubmitting }) =>
        update{{.Table.Name}}({
          variables: {
            id: item.ID,
            {{camel .Table.Name}}: {
              ...values,
              ID: undefined,
              CreatedAt: undefined,
              UpdatedAt: undefined,
            },
          },
        })
      }
    >
      {props => {
        const { values, handleChange, handleBlur, handleSubmit } = props
        return (
    <Content>
    <Card>
    <Form>
      <h1>Edit {item.ID}</h1>
{{range $i, $value := .Table.Columns}}  <Widget>
      <Label>{{.Name}}</Label>{{if ne .DBType "text"}}
      <Input
       value={values.{{.Name}}}
        {{if le $i 2}}disabled{{end}}
        name="{{.Name}}"
        type={{if hasPrefix .Type "Time"}}"text"{{end}}{{if hasPrefix .Type "String"}}"text"{{end}}{{if hasPrefix .Type "ID"}}"text"{{end}}{{if hasPrefix .Type "Int"}}"number"{{end}}{{if hasPrefix .Type "Float"}}"number"{{end}}{{if hasPrefix .Type "Bool"}}"checkbox"{{end}}

        onChange={handleChange}
        onBlur={handleBlur}/>{{end}}{{if eq .DBType "text"}}
        <TextArea
          value={values.{{.Name}}}
          name="{{.Name}}"
          onChange={handleChange}
          onBlur={handleBlur}/>{{end}}
  </Widget>
{{end}}
      <Button label="Save" block variant="primary" onClick={handleSubmit} />
      </Form>
    </Card>
    </Content>
        )
      }}
    </Formik>
  )
}

Edit{{.Table.Name}}.propTypes = {
  id: PropTypes.string,
}

export default Edit{{.Table.Name}}
