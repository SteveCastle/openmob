// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAcls(t *testing.T) {
	t.Parallel()

	query := Acls()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAclsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAclsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Acls().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAclsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ACLSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAclsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ACLExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ACL exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ACLExists to return true, but got false.")
	}
}

func testAclsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	aclFound, err := FindACL(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if aclFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAclsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Acls().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAclsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Acls().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAclsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	aclOne := &ACL{}
	aclTwo := &ACL{}
	if err = randomize.Struct(seed, aclOne, aclDBTypes, false, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}
	if err = randomize.Struct(seed, aclTwo, aclDBTypes, false, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = aclOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = aclTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Acls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAclsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	aclOne := &ACL{}
	aclTwo := &ACL{}
	if err = randomize.Struct(seed, aclOne, aclDBTypes, false, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}
	if err = randomize.Struct(seed, aclTwo, aclDBTypes, false, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = aclOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = aclTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func aclBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func aclAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ACL) error {
	*o = ACL{}
	return nil
}

func testAclsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ACL{}
	o := &ACL{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, aclDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ACL object: %s", err)
	}

	AddACLHook(boil.BeforeInsertHook, aclBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	aclBeforeInsertHooks = []ACLHook{}

	AddACLHook(boil.AfterInsertHook, aclAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	aclAfterInsertHooks = []ACLHook{}

	AddACLHook(boil.AfterSelectHook, aclAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	aclAfterSelectHooks = []ACLHook{}

	AddACLHook(boil.BeforeUpdateHook, aclBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	aclBeforeUpdateHooks = []ACLHook{}

	AddACLHook(boil.AfterUpdateHook, aclAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	aclAfterUpdateHooks = []ACLHook{}

	AddACLHook(boil.BeforeDeleteHook, aclBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	aclBeforeDeleteHooks = []ACLHook{}

	AddACLHook(boil.AfterDeleteHook, aclAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	aclAfterDeleteHooks = []ACLHook{}

	AddACLHook(boil.BeforeUpsertHook, aclBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	aclBeforeUpsertHooks = []ACLHook{}

	AddACLHook(boil.AfterUpsertHook, aclAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	aclAfterUpsertHooks = []ACLHook{}
}

func testAclsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAclsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(aclColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAclsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAclsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ACLSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAclsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Acls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	aclDBTypes = map[string]string{`ID`: `integer`}
	_          = bytes.MinRead
)

func testAclsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(aclPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(aclColumns) == len(aclPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, aclDBTypes, true, aclPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAclsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(aclColumns) == len(aclPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ACL{}
	if err = randomize.Struct(seed, o, aclDBTypes, true, aclColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, aclDBTypes, true, aclPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(aclColumns, aclPrimaryKeyColumns) {
		fields = aclColumns
	} else {
		fields = strmangle.SetComplement(
			aclColumns,
			aclPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ACLSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAclsUpsert(t *testing.T) {
	t.Parallel()

	if len(aclColumns) == len(aclPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ACL{}
	if err = randomize.Struct(seed, &o, aclDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ACL: %s", err)
	}

	count, err := Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, aclDBTypes, false, aclPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ACL struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ACL: %s", err)
	}

	count, err = Acls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
