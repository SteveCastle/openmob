// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testActivityTypes(t *testing.T) {
	t.Parallel()

	query := ActivityTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testActivityTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivityTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ActivityTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivityTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ActivityTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivityTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ActivityTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ActivityType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ActivityTypeExists to return true, but got false.")
	}
}

func testActivityTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	activityTypeFound, err := FindActivityType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if activityTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testActivityTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ActivityTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testActivityTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ActivityTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testActivityTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	activityTypeOne := &ActivityType{}
	activityTypeTwo := &ActivityType{}
	if err = randomize.Struct(seed, activityTypeOne, activityTypeDBTypes, false, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}
	if err = randomize.Struct(seed, activityTypeTwo, activityTypeDBTypes, false, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = activityTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = activityTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ActivityTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testActivityTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	activityTypeOne := &ActivityType{}
	activityTypeTwo := &ActivityType{}
	if err = randomize.Struct(seed, activityTypeOne, activityTypeDBTypes, false, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}
	if err = randomize.Struct(seed, activityTypeTwo, activityTypeDBTypes, false, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = activityTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = activityTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func activityTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func activityTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ActivityType) error {
	*o = ActivityType{}
	return nil
}

func testActivityTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ActivityType{}
	o := &ActivityType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, activityTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ActivityType object: %s", err)
	}

	AddActivityTypeHook(boil.BeforeInsertHook, activityTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	activityTypeBeforeInsertHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.AfterInsertHook, activityTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	activityTypeAfterInsertHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.AfterSelectHook, activityTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	activityTypeAfterSelectHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.BeforeUpdateHook, activityTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	activityTypeBeforeUpdateHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.AfterUpdateHook, activityTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	activityTypeAfterUpdateHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.BeforeDeleteHook, activityTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	activityTypeBeforeDeleteHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.AfterDeleteHook, activityTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	activityTypeAfterDeleteHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.BeforeUpsertHook, activityTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	activityTypeBeforeUpsertHooks = []ActivityTypeHook{}

	AddActivityTypeHook(boil.AfterUpsertHook, activityTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	activityTypeAfterUpsertHooks = []ActivityTypeHook{}
}

func testActivityTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testActivityTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(activityTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testActivityTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testActivityTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ActivityTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testActivityTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ActivityTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	activityTypeDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testActivityTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(activityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(activityTypeColumns) == len(activityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testActivityTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(activityTypeColumns) == len(activityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ActivityType{}
	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, activityTypeDBTypes, true, activityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(activityTypeColumns, activityTypePrimaryKeyColumns) {
		fields = activityTypeColumns
	} else {
		fields = strmangle.SetComplement(
			activityTypeColumns,
			activityTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ActivityTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testActivityTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(activityTypeColumns) == len(activityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ActivityType{}
	if err = randomize.Struct(seed, &o, activityTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ActivityType: %s", err)
	}

	count, err := ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, activityTypeDBTypes, false, activityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ActivityType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ActivityType: %s", err)
	}

	count, err = ActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
