// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMailingAddresses(t *testing.T) {
	t.Parallel()

	query := MailingAddresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMailingAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailingAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MailingAddresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailingAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailingAddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailingAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MailingAddressExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MailingAddress exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MailingAddressExists to return true, but got false.")
	}
}

func testMailingAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mailingAddressFound, err := FindMailingAddress(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mailingAddressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMailingAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MailingAddresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMailingAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MailingAddresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMailingAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mailingAddressOne := &MailingAddress{}
	mailingAddressTwo := &MailingAddress{}
	if err = randomize.Struct(seed, mailingAddressOne, mailingAddressDBTypes, false, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, mailingAddressTwo, mailingAddressDBTypes, false, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailingAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailingAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MailingAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMailingAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mailingAddressOne := &MailingAddress{}
	mailingAddressTwo := &MailingAddress{}
	if err = randomize.Struct(seed, mailingAddressOne, mailingAddressDBTypes, false, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, mailingAddressTwo, mailingAddressDBTypes, false, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailingAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailingAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mailingAddressBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func mailingAddressAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MailingAddress) error {
	*o = MailingAddress{}
	return nil
}

func testMailingAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MailingAddress{}
	o := &MailingAddress{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MailingAddress object: %s", err)
	}

	AddMailingAddressHook(boil.BeforeInsertHook, mailingAddressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mailingAddressBeforeInsertHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.AfterInsertHook, mailingAddressAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mailingAddressAfterInsertHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.AfterSelectHook, mailingAddressAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mailingAddressAfterSelectHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.BeforeUpdateHook, mailingAddressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mailingAddressBeforeUpdateHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.AfterUpdateHook, mailingAddressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mailingAddressAfterUpdateHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.BeforeDeleteHook, mailingAddressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mailingAddressBeforeDeleteHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.AfterDeleteHook, mailingAddressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mailingAddressAfterDeleteHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.BeforeUpsertHook, mailingAddressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mailingAddressBeforeUpsertHooks = []MailingAddressHook{}

	AddMailingAddressHook(boil.AfterUpsertHook, mailingAddressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mailingAddressAfterUpsertHooks = []MailingAddressHook{}
}

func testMailingAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailingAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mailingAddressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailingAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailingAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailingAddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailingAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MailingAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mailingAddressDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testMailingAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mailingAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mailingAddressColumns) == len(mailingAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMailingAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mailingAddressColumns) == len(mailingAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MailingAddress{}
	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailingAddressDBTypes, true, mailingAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mailingAddressColumns, mailingAddressPrimaryKeyColumns) {
		fields = mailingAddressColumns
	} else {
		fields = strmangle.SetComplement(
			mailingAddressColumns,
			mailingAddressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MailingAddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMailingAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(mailingAddressColumns) == len(mailingAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MailingAddress{}
	if err = randomize.Struct(seed, &o, mailingAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MailingAddress: %s", err)
	}

	count, err := MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mailingAddressDBTypes, false, mailingAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailingAddress struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MailingAddress: %s", err)
	}

	count, err = MailingAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
