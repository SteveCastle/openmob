// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCustomerCarts(t *testing.T) {
	t.Parallel()

	query := CustomerCarts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCustomerCartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerCartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CustomerCarts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerCartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerCartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerCartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CustomerCartExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CustomerCart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CustomerCartExists to return true, but got false.")
	}
}

func testCustomerCartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	customerCartFound, err := FindCustomerCart(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if customerCartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCustomerCartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CustomerCarts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCustomerCartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CustomerCarts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCustomerCartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	customerCartOne := &CustomerCart{}
	customerCartTwo := &CustomerCart{}
	if err = randomize.Struct(seed, customerCartOne, customerCartDBTypes, false, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}
	if err = randomize.Struct(seed, customerCartTwo, customerCartDBTypes, false, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerCartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerCartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerCarts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCustomerCartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	customerCartOne := &CustomerCart{}
	customerCartTwo := &CustomerCart{}
	if err = randomize.Struct(seed, customerCartOne, customerCartDBTypes, false, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}
	if err = randomize.Struct(seed, customerCartTwo, customerCartDBTypes, false, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerCartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerCartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func customerCartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func customerCartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerCart) error {
	*o = CustomerCart{}
	return nil
}

func testCustomerCartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CustomerCart{}
	o := &CustomerCart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, customerCartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CustomerCart object: %s", err)
	}

	AddCustomerCartHook(boil.BeforeInsertHook, customerCartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	customerCartBeforeInsertHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.AfterInsertHook, customerCartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	customerCartAfterInsertHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.AfterSelectHook, customerCartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	customerCartAfterSelectHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.BeforeUpdateHook, customerCartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	customerCartBeforeUpdateHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.AfterUpdateHook, customerCartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	customerCartAfterUpdateHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.BeforeDeleteHook, customerCartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	customerCartBeforeDeleteHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.AfterDeleteHook, customerCartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	customerCartAfterDeleteHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.BeforeUpsertHook, customerCartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	customerCartBeforeUpsertHooks = []CustomerCartHook{}

	AddCustomerCartHook(boil.AfterUpsertHook, customerCartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	customerCartAfterUpsertHooks = []CustomerCartHook{}
}

func testCustomerCartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerCartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(customerCartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerCartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerCartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerCartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerCartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerCarts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	customerCartDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testCustomerCartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(customerCartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(customerCartColumns) == len(customerCartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCustomerCartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(customerCartColumns) == len(customerCartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerCart{}
	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerCartDBTypes, true, customerCartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(customerCartColumns, customerCartPrimaryKeyColumns) {
		fields = customerCartColumns
	} else {
		fields = strmangle.SetComplement(
			customerCartColumns,
			customerCartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CustomerCartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCustomerCartsUpsert(t *testing.T) {
	t.Parallel()

	if len(customerCartColumns) == len(customerCartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CustomerCart{}
	if err = randomize.Struct(seed, &o, customerCartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerCart: %s", err)
	}

	count, err := CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, customerCartDBTypes, false, customerCartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerCart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerCart: %s", err)
	}

	count, err = CustomerCarts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
