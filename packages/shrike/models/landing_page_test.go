// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLandingPages(t *testing.T) {
	t.Parallel()

	query := LandingPages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLandingPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLandingPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LandingPages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLandingPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LandingPageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLandingPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LandingPageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LandingPage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LandingPageExists to return true, but got false.")
	}
}

func testLandingPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	landingPageFound, err := FindLandingPage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if landingPageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLandingPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LandingPages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLandingPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LandingPages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLandingPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	landingPageOne := &LandingPage{}
	landingPageTwo := &LandingPage{}
	if err = randomize.Struct(seed, landingPageOne, landingPageDBTypes, false, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}
	if err = randomize.Struct(seed, landingPageTwo, landingPageDBTypes, false, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = landingPageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = landingPageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LandingPages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLandingPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	landingPageOne := &LandingPage{}
	landingPageTwo := &LandingPage{}
	if err = randomize.Struct(seed, landingPageOne, landingPageDBTypes, false, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}
	if err = randomize.Struct(seed, landingPageTwo, landingPageDBTypes, false, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = landingPageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = landingPageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func landingPageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func landingPageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LandingPage) error {
	*o = LandingPage{}
	return nil
}

func testLandingPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LandingPage{}
	o := &LandingPage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, landingPageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LandingPage object: %s", err)
	}

	AddLandingPageHook(boil.BeforeInsertHook, landingPageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	landingPageBeforeInsertHooks = []LandingPageHook{}

	AddLandingPageHook(boil.AfterInsertHook, landingPageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	landingPageAfterInsertHooks = []LandingPageHook{}

	AddLandingPageHook(boil.AfterSelectHook, landingPageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	landingPageAfterSelectHooks = []LandingPageHook{}

	AddLandingPageHook(boil.BeforeUpdateHook, landingPageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	landingPageBeforeUpdateHooks = []LandingPageHook{}

	AddLandingPageHook(boil.AfterUpdateHook, landingPageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	landingPageAfterUpdateHooks = []LandingPageHook{}

	AddLandingPageHook(boil.BeforeDeleteHook, landingPageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	landingPageBeforeDeleteHooks = []LandingPageHook{}

	AddLandingPageHook(boil.AfterDeleteHook, landingPageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	landingPageAfterDeleteHooks = []LandingPageHook{}

	AddLandingPageHook(boil.BeforeUpsertHook, landingPageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	landingPageBeforeUpsertHooks = []LandingPageHook{}

	AddLandingPageHook(boil.AfterUpsertHook, landingPageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	landingPageAfterUpsertHooks = []LandingPageHook{}
}

func testLandingPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLandingPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(landingPageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLandingPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLandingPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LandingPageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLandingPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LandingPages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	landingPageDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testLandingPagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(landingPagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(landingPageColumns) == len(landingPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLandingPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(landingPageColumns) == len(landingPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LandingPage{}
	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, landingPageDBTypes, true, landingPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(landingPageColumns, landingPagePrimaryKeyColumns) {
		fields = landingPageColumns
	} else {
		fields = strmangle.SetComplement(
			landingPageColumns,
			landingPagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LandingPageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLandingPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(landingPageColumns) == len(landingPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LandingPage{}
	if err = randomize.Struct(seed, &o, landingPageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LandingPage: %s", err)
	}

	count, err := LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, landingPageDBTypes, false, landingPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LandingPage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LandingPage: %s", err)
	}

	count, err = LandingPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
