// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCauses(t *testing.T) {
	t.Parallel()

	query := Causes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCausesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCausesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Causes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCausesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CauseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCausesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CauseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Cause exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CauseExists to return true, but got false.")
	}
}

func testCausesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	causeFound, err := FindCause(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if causeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCausesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Causes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCausesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Causes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCausesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	causeOne := &Cause{}
	causeTwo := &Cause{}
	if err = randomize.Struct(seed, causeOne, causeDBTypes, false, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}
	if err = randomize.Struct(seed, causeTwo, causeDBTypes, false, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = causeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = causeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Causes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCausesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	causeOne := &Cause{}
	causeTwo := &Cause{}
	if err = randomize.Struct(seed, causeOne, causeDBTypes, false, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}
	if err = randomize.Struct(seed, causeTwo, causeDBTypes, false, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = causeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = causeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func causeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func causeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cause) error {
	*o = Cause{}
	return nil
}

func testCausesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Cause{}
	o := &Cause{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, causeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Cause object: %s", err)
	}

	AddCauseHook(boil.BeforeInsertHook, causeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	causeBeforeInsertHooks = []CauseHook{}

	AddCauseHook(boil.AfterInsertHook, causeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	causeAfterInsertHooks = []CauseHook{}

	AddCauseHook(boil.AfterSelectHook, causeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	causeAfterSelectHooks = []CauseHook{}

	AddCauseHook(boil.BeforeUpdateHook, causeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	causeBeforeUpdateHooks = []CauseHook{}

	AddCauseHook(boil.AfterUpdateHook, causeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	causeAfterUpdateHooks = []CauseHook{}

	AddCauseHook(boil.BeforeDeleteHook, causeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	causeBeforeDeleteHooks = []CauseHook{}

	AddCauseHook(boil.AfterDeleteHook, causeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	causeAfterDeleteHooks = []CauseHook{}

	AddCauseHook(boil.BeforeUpsertHook, causeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	causeBeforeUpsertHooks = []CauseHook{}

	AddCauseHook(boil.AfterUpsertHook, causeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	causeAfterUpsertHooks = []CauseHook{}
}

func testCausesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCausesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(causeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCausesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCausesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CauseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCausesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Causes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	causeDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testCausesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(causePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(causeColumns) == len(causePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, causeDBTypes, true, causePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCausesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(causeColumns) == len(causePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cause{}
	if err = randomize.Struct(seed, o, causeDBTypes, true, causeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, causeDBTypes, true, causePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(causeColumns, causePrimaryKeyColumns) {
		fields = causeColumns
	} else {
		fields = strmangle.SetComplement(
			causeColumns,
			causePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CauseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCausesUpsert(t *testing.T) {
	t.Parallel()

	if len(causeColumns) == len(causePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Cause{}
	if err = randomize.Struct(seed, &o, causeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cause: %s", err)
	}

	count, err := Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, causeDBTypes, false, causePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cause struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cause: %s", err)
	}

	count, err = Causes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
