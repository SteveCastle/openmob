// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDonations(t *testing.T) {
	t.Parallel()

	query := Donations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDonationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Donations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DonationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DonationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Donation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DonationExists to return true, but got false.")
	}
}

func testDonationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	donationFound, err := FindDonation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if donationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDonationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Donations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDonationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Donations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDonationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	donationOne := &Donation{}
	donationTwo := &Donation{}
	if err = randomize.Struct(seed, donationOne, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}
	if err = randomize.Struct(seed, donationTwo, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = donationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = donationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Donations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDonationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	donationOne := &Donation{}
	donationTwo := &Donation{}
	if err = randomize.Struct(seed, donationOne, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}
	if err = randomize.Struct(seed, donationTwo, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = donationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = donationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func donationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func testDonationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Donation{}
	o := &Donation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, donationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Donation object: %s", err)
	}

	AddDonationHook(boil.BeforeInsertHook, donationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	donationBeforeInsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterInsertHook, donationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	donationAfterInsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterSelectHook, donationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	donationAfterSelectHooks = []DonationHook{}

	AddDonationHook(boil.BeforeUpdateHook, donationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	donationBeforeUpdateHooks = []DonationHook{}

	AddDonationHook(boil.AfterUpdateHook, donationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	donationAfterUpdateHooks = []DonationHook{}

	AddDonationHook(boil.BeforeDeleteHook, donationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	donationBeforeDeleteHooks = []DonationHook{}

	AddDonationHook(boil.AfterDeleteHook, donationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	donationAfterDeleteHooks = []DonationHook{}

	AddDonationHook(boil.BeforeUpsertHook, donationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	donationBeforeUpsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterUpsertHook, donationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	donationAfterUpsertHooks = []DonationHook{}
}

func testDonationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDonationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(donationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDonationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDonationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DonationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDonationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Donations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	donationDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testDonationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(donationColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, donationDBTypes, true, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDonationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(donationColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, donationDBTypes, true, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(donationColumns, donationPrimaryKeyColumns) {
		fields = donationColumns
	} else {
		fields = strmangle.SetComplement(
			donationColumns,
			donationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DonationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDonationsUpsert(t *testing.T) {
	t.Parallel()

	if len(donationColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Donation{}
	if err = randomize.Struct(seed, &o, donationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Donation: %s", err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, donationDBTypes, false, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Donation: %s", err)
	}

	count, err = Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
