// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContacts(t *testing.T) {
	t.Parallel()

	query := Contacts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContactsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContactsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Contacts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContactsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContactSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContactsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContactExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Contact exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContactExists to return true, but got false.")
	}
}

func testContactsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contactFound, err := FindContact(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contactFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContactsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Contacts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testContactsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Contacts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContactsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contactOne := &Contact{}
	contactTwo := &Contact{}
	if err = randomize.Struct(seed, contactOne, contactDBTypes, false, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}
	if err = randomize.Struct(seed, contactTwo, contactDBTypes, false, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Contacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContactsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contactOne := &Contact{}
	contactTwo := &Contact{}
	if err = randomize.Struct(seed, contactOne, contactDBTypes, false, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}
	if err = randomize.Struct(seed, contactTwo, contactDBTypes, false, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func contactBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func contactAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
	*o = Contact{}
	return nil
}

func testContactsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Contact{}
	o := &Contact{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, contactDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Contact object: %s", err)
	}

	AddContactHook(boil.BeforeInsertHook, contactBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	contactBeforeInsertHooks = []ContactHook{}

	AddContactHook(boil.AfterInsertHook, contactAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	contactAfterInsertHooks = []ContactHook{}

	AddContactHook(boil.AfterSelectHook, contactAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	contactAfterSelectHooks = []ContactHook{}

	AddContactHook(boil.BeforeUpdateHook, contactBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	contactBeforeUpdateHooks = []ContactHook{}

	AddContactHook(boil.AfterUpdateHook, contactAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	contactAfterUpdateHooks = []ContactHook{}

	AddContactHook(boil.BeforeDeleteHook, contactBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	contactBeforeDeleteHooks = []ContactHook{}

	AddContactHook(boil.AfterDeleteHook, contactAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	contactAfterDeleteHooks = []ContactHook{}

	AddContactHook(boil.BeforeUpsertHook, contactBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	contactBeforeUpsertHooks = []ContactHook{}

	AddContactHook(boil.AfterUpsertHook, contactAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	contactAfterUpsertHooks = []ContactHook{}
}

func testContactsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContactsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(contactColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContactsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContactsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContactSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContactsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Contacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contactDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testContactsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contactPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contactColumns) == len(contactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contactDBTypes, true, contactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContactsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contactColumns) == len(contactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Contact{}
	if err = randomize.Struct(seed, o, contactDBTypes, true, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contactDBTypes, true, contactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contactColumns, contactPrimaryKeyColumns) {
		fields = contactColumns
	} else {
		fields = strmangle.SetComplement(
			contactColumns,
			contactPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContactSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContactsUpsert(t *testing.T) {
	t.Parallel()

	if len(contactColumns) == len(contactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Contact{}
	if err = randomize.Struct(seed, &o, contactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Contact: %s", err)
	}

	count, err := Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contactDBTypes, false, contactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Contact: %s", err)
	}

	count, err = Contacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
