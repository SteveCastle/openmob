type File @model {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}
​
type Validator @model {
  id: ID! @isUnique
  createdAt: DateTime!
  lastEdited: DateTime
  title: String!
  fields: [FieldType!]! @relation(name: "FieldValidators")
  errorMessage: String
  regex: String
}
​
type Widget @model {
  id: ID! @isUnique
  createdAt: DateTime!
  title: String!
  componentName: String!
  override: String
  fieldTypes: [FieldType!]! @relation(name: "FieldTypeWidgets")
}
​
type Option @model {
  id: ID! @isUnique
  propType: PropType!
  title: String
  value: String
  fields: FieldType @relation(name: "FieldOptions")
}
​
type FieldType @model {
  id: ID! @isUnique
  title: String!
  propName: String!
  createdAt: DateTime!
  lastEdited: DateTime
  propType: PropType!
  stringValue: String
  intValue: Int
  floatValue: Float
  booleanValue: Boolean
  dateTimeValue: DateTime
  componentListValue: [ComponentListItem!]! @relation(name: "ComponentListFieldType")
  widget: Widget @relation(name: "FieldTypeWidgets")
  options: [Option!]! @relation(name: "FieldOptions")
  fields: [Field!]! @relation(name: "FieldsOfType")
  parentOf: [FieldType!]! @relation(name: "ChildrenFields")
  childOf: [FieldType!]! @relation(name: "ChildrenFields")
  validators: [Validator!]! @relation(name: "FieldValidators")
  componentTypes: [ComponentType!]! @relation(name: "FieldTypes")
}
​
type ComponentListItem @model {
  id: ID! @isUnique
  createdAt: DateTime!
  fieldType: FieldType @relation(name: "ComponentListFieldType")
  componentType: ComponentType @relation(name: "ComponentListComponentType")
  weight: Int! @defaultValue(value: 0)
}
​
type Field @model {
  id: ID! @isUnique
  createdAt: DateTime!
  author: User @relation(name: "FieldAuthor")
  admin: [User!]! @relation(name: "FieldAdmin")
  fieldType: FieldType! @relation(name: "FieldsOfType")
  weight: Int! @defaultValue(value: 0)
  stringValue: String
  intValue: Int
  floatValue: Float
  booleanValue: Boolean
  dateTimeValue: DateTime
  componentType: ComponentType @relation(name: "FieldComponentType")
  components: [Component!]! @relation(name: "ComponentFields")
  parentOf: [Field!]! @relation(name: "ChildField")
  childOf: Field @relation(name: "ChildField")
  previousState: Field @relation(name: "FieldHistory")
  nextState: Field @relation(name: "FieldHistory")
}
​
type ComponentDefinition @model {
  id: ID! @isUnique
  createdAt: DateTime!
  lastEdited: DateTime
  title: String!
  componentPath: String @isUnique
  override: String
  componentTypes: [ComponentType!]! @relation(name: "ComponentTypeDefinition")
  components: [Component!]! @relation(name: "ComponentDefinitionUsed")
  componentTypeDefaults: [ComponentType!]! @relation(name: "ComponentTypeDefinitionDefault")
}
​
type ComponentType @model {
  id: ID! @isUnique
  createdAt: DateTime!
  lastEdited: DateTime
  title: String!
  isTopLevel: Boolean!
  allowedComponentDefinitions: [ComponentDefinition!]! @relation(name: "ComponentTypeDefinition")
  defaultComponentDefinition: ComponentDefinition @relation(name: "ComponentTypeDefinitionDefault")
  allowAllChildren: Boolean!
  parentOf: [ComponentType!]! @relation(name: "ChildrenTypes")
  childOf: [ComponentType!]! @relation(name: "ChildrenTypes")
  allowedOnPageTypes: [PageType!]! @relation(name: "AllowedPageComponentTypes")
  components: [Component!]! @relation(name: "ComponentsOfType")
  fieldValues: [Field!]! @relation(name: "FieldComponentType")
  fieldTypes: [FieldType!]! @relation(name: "FieldTypes")
  defaultofPageTypes: [PageType!]! @relation(name: "PageComponent")
  belongsToFieldList: [ComponentListItem!]! @relation(name: "ComponentListComponentType")
}
​
type Component @model {
  id: ID! @isUnique
  admin: [User!]! @relation(name: "ComponentAdmin")
  createdAt: DateTime!
  lastEdited: DateTime
  componentType: ComponentType! @relation(name: "ComponentsOfType")
  definition: ComponentDefinition! @relation(name: "ComponentDefinitionUsed")
  weight: Int! @defaultValue(value: 0)
  fields: [Field!]! @relation(name: "ComponentFields")
  page: Page! @relation(name: "PageLevelComponent")
  childrenComponents: [Component!]! @relation(name: "NestedComponent")
  component: Component! @relation(name: "NestedComponent")
}
​
type PageType @model {
  id: ID! @isUnique
  createdAt: DateTime!
  title: String!
  allowedComponentTypes: [ComponentType!]! @relation(name: "AllowedPageComponentTypes")
  defaultComponentType: ComponentType @relation(name: "PageComponent")
  pages: [Page!]! @relation(name: "PagesOfType")
}
​
type Page @model {
  id: ID! @isUnique
  createdAt: DateTime!
  lastEdited: DateTime
  author: User @relation(name: "Author")
  published: Boolean! @defaultValue(value: false)
  admin: [User!]! @relation(name: "Admin")
  pageType: PageType! @relation(name: "PagesOfType")
  title: String!
  url: String! @isUnique
  pageLevelComponent: Component! @relation(name: "PageLevelComponent")
}
​
type User @model {
  id: ID! @isUnique
  createdAt: DateTime!
  pages: [Page!]! @relation(name: "Author")
  pagesAdmin: [Page!]! @relation(name: "Admin")
  fieldsAdmin: [Field!]! @relation(name: "FieldAdmin")
  author: [Field!]! @relation(name: "FieldAuthor")
  componentsAdmin: [Component!]! @relation(name: "ComponentAdmin")
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
}