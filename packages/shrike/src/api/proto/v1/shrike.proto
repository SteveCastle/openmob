syntax = "proto3";

package shrike.v1;

option go_package = "v1";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Shrike service",
    version: "1.0",
    contact: {
      name: "openmob",
      url: "https://github.com/SteveCastle/openmob",
      email: "stephen@openmob.us",
        },
    },
    schemes: HTTP,
    consumes: "application/json",
    produces: "application/json",
    responses: {
    key: "404",
    value: {
      description: "Returned when the resource does not exist.",
      schema: {
        json_schema: {
          type: STRING,
        }
      }
    }
  }
};
message OrderedPair {
  string fieldName = 1;
  enum Direction {
    ASCENDING = 0;
    DESCENDING = 1;
  }
  Direction direction = 2;
  string keyset = 3;
}

message Ordering {
  repeated OrderedPair orderedPair = 1;
}
message FilterRule {
  string fieldName = 1;
  enum Rule {
    EQ = 0;
    NE = 1;
    GT = 2;
    LT = 4;
    LTE = 5;
    LIKE = 6;
    NOTLIKE = 7;
  }
  Rule rule = 2;
  string value = 3;
  enum LogicalOperator {
    AND = 0;
    OR = 1;
  }
  LogicalOperator logicalOperator = 4;
}

message Filter {
  repeated FilterRule filter = 1;
}

// Generated Types and Message Schema

message ACL {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
}

message CreateACL {
      }

//Request and Response Message Types
message CreateACLRequest {
  string api = 1;
  CreateACL item = 2;
}

message CreateACLResponse {
  string api = 1;
  string ID = 2;
}

message GetACLRequest {
  string api = 1;
  string ID = 2;
}

message GetACLResponse {
  string api = 1;
  ACL item = 2;
}

message ListACLRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListACLResponse {
  string api = 1;
  repeated ACL items = 2;
}

// Request data to update ACL
message UpdateACLRequest{
    string api = 1;
    // ACL entity to update
    ACL item = 2;
}

// Contains status of update operation
message UpdateACLResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ACL
message DeleteACLRequest {
    string api = 1;
    // Unique integer IDentifier of the ACL to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteACLResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message MailingAddress {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string StreetAddress = 4;
  string City = 5;
  string State = 6;
  string ZipCode = 7;
}

message CreateMailingAddress {
        string StreetAddress = 1;
  string City = 2;
  string State = 3;
  string ZipCode = 4;
}

//Request and Response Message Types
message CreateMailingAddressRequest {
  string api = 1;
  CreateMailingAddress item = 2;
}

message CreateMailingAddressResponse {
  string api = 1;
  string ID = 2;
}

message GetMailingAddressRequest {
  string api = 1;
  string ID = 2;
}

message GetMailingAddressResponse {
  string api = 1;
  MailingAddress item = 2;
}

message ListMailingAddressRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListMailingAddressResponse {
  string api = 1;
  repeated MailingAddress items = 2;
}

// Request data to update MailingAddress
message UpdateMailingAddressRequest{
    string api = 1;
    // MailingAddress entity to update
    MailingAddress item = 2;
}

// Contains status of update operation
message UpdateMailingAddressResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete MailingAddress
message DeleteMailingAddressRequest {
    string api = 1;
    // Unique integer IDentifier of the MailingAddress to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteMailingAddressResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PhoneNumber {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string PhoneNumber = 4;
}

message CreatePhoneNumber {
        string PhoneNumber = 1;
}

//Request and Response Message Types
message CreatePhoneNumberRequest {
  string api = 1;
  CreatePhoneNumber item = 2;
}

message CreatePhoneNumberResponse {
  string api = 1;
  string ID = 2;
}

message GetPhoneNumberRequest {
  string api = 1;
  string ID = 2;
}

message GetPhoneNumberResponse {
  string api = 1;
  PhoneNumber item = 2;
}

message ListPhoneNumberRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPhoneNumberResponse {
  string api = 1;
  repeated PhoneNumber items = 2;
}

// Request data to update PhoneNumber
message UpdatePhoneNumberRequest{
    string api = 1;
    // PhoneNumber entity to update
    PhoneNumber item = 2;
}

// Contains status of update operation
message UpdatePhoneNumberResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PhoneNumber
message DeletePhoneNumberRequest {
    string api = 1;
    // Unique integer IDentifier of the PhoneNumber to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePhoneNumberResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message EmailAddress {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Address = 4;
}

message CreateEmailAddress {
        string Address = 1;
}

//Request and Response Message Types
message CreateEmailAddressRequest {
  string api = 1;
  CreateEmailAddress item = 2;
}

message CreateEmailAddressResponse {
  string api = 1;
  string ID = 2;
}

message GetEmailAddressRequest {
  string api = 1;
  string ID = 2;
}

message GetEmailAddressResponse {
  string api = 1;
  EmailAddress item = 2;
}

message ListEmailAddressRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListEmailAddressResponse {
  string api = 1;
  repeated EmailAddress items = 2;
}

// Request data to update EmailAddress
message UpdateEmailAddressRequest{
    string api = 1;
    // EmailAddress entity to update
    EmailAddress item = 2;
}

// Contains status of update operation
message UpdateEmailAddressResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete EmailAddress
message DeleteEmailAddressRequest {
    string api = 1;
    // Unique integer IDentifier of the EmailAddress to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteEmailAddressResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Photo {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string ImgURL = 4;
}

message CreatePhoto {
        string ImgURL = 1;
}

//Request and Response Message Types
message CreatePhotoRequest {
  string api = 1;
  CreatePhoto item = 2;
}

message CreatePhotoResponse {
  string api = 1;
  string ID = 2;
}

message GetPhotoRequest {
  string api = 1;
  string ID = 2;
}

message GetPhotoResponse {
  string api = 1;
  Photo item = 2;
}

message ListPhotoRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPhotoResponse {
  string api = 1;
  repeated Photo items = 2;
}

// Request data to update Photo
message UpdatePhotoRequest{
    string api = 1;
    // Photo entity to update
    Photo item = 2;
}

// Contains status of update operation
message UpdatePhotoResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Photo
message DeletePhotoRequest {
    string api = 1;
    // Unique integer IDentifier of the Photo to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePhotoResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateLayoutType {
        string Title = 1;
}

//Request and Response Message Types
message CreateLayoutTypeRequest {
  string api = 1;
  CreateLayoutType item = 2;
}

message CreateLayoutTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetLayoutTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetLayoutTypeResponse {
  string api = 1;
  LayoutType item = 2;
}

message ListLayoutTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLayoutTypeResponse {
  string api = 1;
  repeated LayoutType items = 2;
}

// Request data to update LayoutType
message UpdateLayoutTypeRequest{
    string api = 1;
    // LayoutType entity to update
    LayoutType item = 2;
}

// Contains status of update operation
message UpdateLayoutTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutType
message DeleteLayoutTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the LayoutType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLayoutTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutRow {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Layout = 4;
}

message CreateLayoutRow {
        string Layout = 1;
}

//Request and Response Message Types
message CreateLayoutRowRequest {
  string api = 1;
  CreateLayoutRow item = 2;
}

message CreateLayoutRowResponse {
  string api = 1;
  string ID = 2;
}

message GetLayoutRowRequest {
  string api = 1;
  string ID = 2;
}

message GetLayoutRowResponse {
  string api = 1;
  LayoutRow item = 2;
}

message ListLayoutRowRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLayoutRowResponse {
  string api = 1;
  repeated LayoutRow items = 2;
}

// Request data to update LayoutRow
message UpdateLayoutRowRequest{
    string api = 1;
    // LayoutRow entity to update
    LayoutRow item = 2;
}

// Contains status of update operation
message UpdateLayoutRowResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutRow
message DeleteLayoutRowRequest {
    string api = 1;
    // Unique integer IDentifier of the LayoutRow to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLayoutRowResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ComponentImplementation {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
}

message CreateComponentImplementation {
      }

//Request and Response Message Types
message CreateComponentImplementationRequest {
  string api = 1;
  CreateComponentImplementation item = 2;
}

message CreateComponentImplementationResponse {
  string api = 1;
  string ID = 2;
}

message GetComponentImplementationRequest {
  string api = 1;
  string ID = 2;
}

message GetComponentImplementationResponse {
  string api = 1;
  ComponentImplementation item = 2;
}

message ListComponentImplementationRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListComponentImplementationResponse {
  string api = 1;
  repeated ComponentImplementation items = 2;
}

// Request data to update ComponentImplementation
message UpdateComponentImplementationRequest{
    string api = 1;
    // ComponentImplementation entity to update
    ComponentImplementation item = 2;
}

// Contains status of update operation
message UpdateComponentImplementationResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ComponentImplementation
message DeleteComponentImplementationRequest {
    string api = 1;
    // Unique integer IDentifier of the ComponentImplementation to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteComponentImplementationResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ComponentType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateComponentType {
        string Title = 1;
}

//Request and Response Message Types
message CreateComponentTypeRequest {
  string api = 1;
  CreateComponentType item = 2;
}

message CreateComponentTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetComponentTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetComponentTypeResponse {
  string api = 1;
  ComponentType item = 2;
}

message ListComponentTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListComponentTypeResponse {
  string api = 1;
  repeated ComponentType items = 2;
}

// Request data to update ComponentType
message UpdateComponentTypeRequest{
    string api = 1;
    // ComponentType entity to update
    ComponentType item = 2;
}

// Contains status of update operation
message UpdateComponentTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ComponentType
message DeleteComponentTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the ComponentType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteComponentTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutColumn {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string LayoutRow = 4;
}

message CreateLayoutColumn {
        string LayoutRow = 1;
}

//Request and Response Message Types
message CreateLayoutColumnRequest {
  string api = 1;
  CreateLayoutColumn item = 2;
}

message CreateLayoutColumnResponse {
  string api = 1;
  string ID = 2;
}

message GetLayoutColumnRequest {
  string api = 1;
  string ID = 2;
}

message GetLayoutColumnResponse {
  string api = 1;
  LayoutColumn item = 2;
}

message ListLayoutColumnRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLayoutColumnResponse {
  string api = 1;
  repeated LayoutColumn items = 2;
}

// Request data to update LayoutColumn
message UpdateLayoutColumnRequest{
    string api = 1;
    // LayoutColumn entity to update
    LayoutColumn item = 2;
}

// Contains status of update operation
message UpdateLayoutColumnResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutColumn
message DeleteLayoutColumnRequest {
    string api = 1;
    // Unique integer IDentifier of the LayoutColumn to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLayoutColumnResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message FieldType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateFieldType {
        string Title = 1;
}

//Request and Response Message Types
message CreateFieldTypeRequest {
  string api = 1;
  CreateFieldType item = 2;
}

message CreateFieldTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetFieldTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetFieldTypeResponse {
  string api = 1;
  FieldType item = 2;
}

message ListFieldTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListFieldTypeResponse {
  string api = 1;
  repeated FieldType items = 2;
}

// Request data to update FieldType
message UpdateFieldTypeRequest{
    string api = 1;
    // FieldType entity to update
    FieldType item = 2;
}

// Contains status of update operation
message UpdateFieldTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete FieldType
message DeleteFieldTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the FieldType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteFieldTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Component {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string ComponentType = 4;
  string LayoutColumn = 5;
}

message CreateComponent {
        string ComponentType = 1;
  string LayoutColumn = 2;
}

//Request and Response Message Types
message CreateComponentRequest {
  string api = 1;
  CreateComponent item = 2;
}

message CreateComponentResponse {
  string api = 1;
  string ID = 2;
}

message GetComponentRequest {
  string api = 1;
  string ID = 2;
}

message GetComponentResponse {
  string api = 1;
  Component item = 2;
}

message ListComponentRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListComponentResponse {
  string api = 1;
  repeated Component items = 2;
}

// Request data to update Component
message UpdateComponentRequest{
    string api = 1;
    // Component entity to update
    Component item = 2;
}

// Contains status of update operation
message UpdateComponentResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Component
message DeleteComponentRequest {
    string api = 1;
    // Unique integer IDentifier of the Component to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteComponentResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Field {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string FieldType = 4;
  string Component = 5;
}

message CreateField {
        string FieldType = 1;
  string Component = 2;
}

//Request and Response Message Types
message CreateFieldRequest {
  string api = 1;
  CreateField item = 2;
}

message CreateFieldResponse {
  string api = 1;
  string ID = 2;
}

message GetFieldRequest {
  string api = 1;
  string ID = 2;
}

message GetFieldResponse {
  string api = 1;
  Field item = 2;
}

message ListFieldRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListFieldResponse {
  string api = 1;
  repeated Field items = 2;
}

// Request data to update Field
message UpdateFieldRequest{
    string api = 1;
    // Field entity to update
    Field item = 2;
}

// Contains status of update operation
message UpdateFieldResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Field
message DeleteFieldRequest {
    string api = 1;
    // Unique integer IDentifier of the Field to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteFieldResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message HomePage {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Cause = 5;
  string Layout = 6;
}

message CreateHomePage {
        string Title = 1;
  string Cause = 2;
  string Layout = 3;
}

//Request and Response Message Types
message CreateHomePageRequest {
  string api = 1;
  CreateHomePage item = 2;
}

message CreateHomePageResponse {
  string api = 1;
  string ID = 2;
}

message GetHomePageRequest {
  string api = 1;
  string ID = 2;
}

message GetHomePageResponse {
  string api = 1;
  HomePage item = 2;
}

message ListHomePageRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListHomePageResponse {
  string api = 1;
  repeated HomePage items = 2;
}

// Request data to update HomePage
message UpdateHomePageRequest{
    string api = 1;
    // HomePage entity to update
    HomePage item = 2;
}

// Contains status of update operation
message UpdateHomePageResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete HomePage
message DeleteHomePageRequest {
    string api = 1;
    // Unique integer IDentifier of the HomePage to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteHomePageResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Layout {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string LayoutType = 4;
}

message CreateLayout {
        string LayoutType = 1;
}

//Request and Response Message Types
message CreateLayoutRequest {
  string api = 1;
  CreateLayout item = 2;
}

message CreateLayoutResponse {
  string api = 1;
  string ID = 2;
}

message GetLayoutRequest {
  string api = 1;
  string ID = 2;
}

message GetLayoutResponse {
  string api = 1;
  Layout item = 2;
}

message ListLayoutRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLayoutResponse {
  string api = 1;
  repeated Layout items = 2;
}

// Request data to update Layout
message UpdateLayoutRequest{
    string api = 1;
    // Layout entity to update
    Layout item = 2;
}

// Contains status of update operation
message UpdateLayoutResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Layout
message DeleteLayoutRequest {
    string api = 1;
    // Unique integer IDentifier of the Layout to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLayoutResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LandingPage {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Cause = 5;
  string Layout = 6;
}

message CreateLandingPage {
        string Title = 1;
  string Cause = 2;
  string Layout = 3;
}

//Request and Response Message Types
message CreateLandingPageRequest {
  string api = 1;
  CreateLandingPage item = 2;
}

message CreateLandingPageResponse {
  string api = 1;
  string ID = 2;
}

message GetLandingPageRequest {
  string api = 1;
  string ID = 2;
}

message GetLandingPageResponse {
  string api = 1;
  LandingPage item = 2;
}

message ListLandingPageRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLandingPageResponse {
  string api = 1;
  repeated LandingPage items = 2;
}

// Request data to update LandingPage
message UpdateLandingPageRequest{
    string api = 1;
    // LandingPage entity to update
    LandingPage item = 2;
}

// Contains status of update operation
message UpdateLandingPageResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LandingPage
message DeleteLandingPageRequest {
    string api = 1;
    // Unique integer IDentifier of the LandingPage to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLandingPageResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Experiment {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string LandingPage = 5;
}

message CreateExperiment {
        string Title = 1;
  string LandingPage = 2;
}

//Request and Response Message Types
message CreateExperimentRequest {
  string api = 1;
  CreateExperiment item = 2;
}

message CreateExperimentResponse {
  string api = 1;
  string ID = 2;
}

message GetExperimentRequest {
  string api = 1;
  string ID = 2;
}

message GetExperimentResponse {
  string api = 1;
  Experiment item = 2;
}

message ListExperimentRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListExperimentResponse {
  string api = 1;
  repeated Experiment items = 2;
}

// Request data to update Experiment
message UpdateExperimentRequest{
    string api = 1;
    // Experiment entity to update
    Experiment item = 2;
}

// Contains status of update operation
message UpdateExperimentResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Experiment
message DeleteExperimentRequest {
    string api = 1;
    // Unique integer IDentifier of the Experiment to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteExperimentResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Issue {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Election = 5;
}

message CreateIssue {
        string Title = 1;
  string Election = 2;
}

//Request and Response Message Types
message CreateIssueRequest {
  string api = 1;
  CreateIssue item = 2;
}

message CreateIssueResponse {
  string api = 1;
  string ID = 2;
}

message GetIssueRequest {
  string api = 1;
  string ID = 2;
}

message GetIssueResponse {
  string api = 1;
  Issue item = 2;
}

message ListIssueRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListIssueResponse {
  string api = 1;
  repeated Issue items = 2;
}

// Request data to update Issue
message UpdateIssueRequest{
    string api = 1;
    // Issue entity to update
    Issue item = 2;
}

// Contains status of update operation
message UpdateIssueResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Issue
message DeleteIssueRequest {
    string api = 1;
    // Unique integer IDentifier of the Issue to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteIssueResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Candidate {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Election = 4;
}

message CreateCandidate {
        string Election = 1;
}

//Request and Response Message Types
message CreateCandidateRequest {
  string api = 1;
  CreateCandidate item = 2;
}

message CreateCandidateResponse {
  string api = 1;
  string ID = 2;
}

message GetCandidateRequest {
  string api = 1;
  string ID = 2;
}

message GetCandidateResponse {
  string api = 1;
  Candidate item = 2;
}

message ListCandidateRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListCandidateResponse {
  string api = 1;
  repeated Candidate items = 2;
}

// Request data to update Candidate
message UpdateCandidateRequest{
    string api = 1;
    // Candidate entity to update
    Candidate item = 2;
}

// Contains status of update operation
message UpdateCandidateResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Candidate
message DeleteCandidateRequest {
    string api = 1;
    // Unique integer IDentifier of the Candidate to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteCandidateResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DistrictType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateDistrictType {
        string Title = 1;
}

//Request and Response Message Types
message CreateDistrictTypeRequest {
  string api = 1;
  CreateDistrictType item = 2;
}

message CreateDistrictTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetDistrictTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetDistrictTypeResponse {
  string api = 1;
  DistrictType item = 2;
}

message ListDistrictTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDistrictTypeResponse {
  string api = 1;
  repeated DistrictType items = 2;
}

// Request data to update DistrictType
message UpdateDistrictTypeRequest{
    string api = 1;
    // DistrictType entity to update
    DistrictType item = 2;
}

// Contains status of update operation
message UpdateDistrictTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DistrictType
message DeleteDistrictTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the DistrictType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDistrictTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message District {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  int64 Geom = 4;
  string Title = 5;
  string DistrictType = 6;
}

message CreateDistrict {
        int64 Geom = 1;
  string Title = 2;
  string DistrictType = 3;
}

//Request and Response Message Types
message CreateDistrictRequest {
  string api = 1;
  CreateDistrict item = 2;
}

message CreateDistrictResponse {
  string api = 1;
  string ID = 2;
}

message GetDistrictRequest {
  string api = 1;
  string ID = 2;
}

message GetDistrictResponse {
  string api = 1;
  District item = 2;
}

message ListDistrictRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDistrictResponse {
  string api = 1;
  repeated District items = 2;
}

// Request data to update District
message UpdateDistrictRequest{
    string api = 1;
    // District entity to update
    District item = 2;
}

// Contains status of update operation
message UpdateDistrictResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete District
message DeleteDistrictRequest {
    string api = 1;
    // Unique integer IDentifier of the District to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDistrictResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Office {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Election = 5;
}

message CreateOffice {
        string Title = 1;
  string Election = 2;
}

//Request and Response Message Types
message CreateOfficeRequest {
  string api = 1;
  CreateOffice item = 2;
}

message CreateOfficeResponse {
  string api = 1;
  string ID = 2;
}

message GetOfficeRequest {
  string api = 1;
  string ID = 2;
}

message GetOfficeResponse {
  string api = 1;
  Office item = 2;
}

message ListOfficeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListOfficeResponse {
  string api = 1;
  repeated Office items = 2;
}

// Request data to update Office
message UpdateOfficeRequest{
    string api = 1;
    // Office entity to update
    Office item = 2;
}

// Contains status of update operation
message UpdateOfficeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Office
message DeleteOfficeRequest {
    string api = 1;
    // Unique integer IDentifier of the Office to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteOfficeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PollItem {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Poll = 5;
}

message CreatePollItem {
        string Title = 1;
  string Poll = 2;
}

//Request and Response Message Types
message CreatePollItemRequest {
  string api = 1;
  CreatePollItem item = 2;
}

message CreatePollItemResponse {
  string api = 1;
  string ID = 2;
}

message GetPollItemRequest {
  string api = 1;
  string ID = 2;
}

message GetPollItemResponse {
  string api = 1;
  PollItem item = 2;
}

message ListPollItemRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPollItemResponse {
  string api = 1;
  repeated PollItem items = 2;
}

// Request data to update PollItem
message UpdatePollItemRequest{
    string api = 1;
    // PollItem entity to update
    PollItem item = 2;
}

// Contains status of update operation
message UpdatePollItemResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PollItem
message DeletePollItemRequest {
    string api = 1;
    // Unique integer IDentifier of the PollItem to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePollItemResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunityType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateVolunteerOpportunityType {
        string Title = 1;
}

//Request and Response Message Types
message CreateVolunteerOpportunityTypeRequest {
  string api = 1;
  CreateVolunteerOpportunityType item = 2;
}

message CreateVolunteerOpportunityTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityTypeResponse {
  string api = 1;
  VolunteerOpportunityType item = 2;
}

message ListVolunteerOpportunityTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListVolunteerOpportunityTypeResponse {
  string api = 1;
  repeated VolunteerOpportunityType items = 2;
}

// Request data to update VolunteerOpportunityType
message UpdateVolunteerOpportunityTypeRequest{
    string api = 1;
    // VolunteerOpportunityType entity to update
    VolunteerOpportunityType item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunityType
message DeleteVolunteerOpportunityTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the VolunteerOpportunityType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEventType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateLiveEventType {
        string Title = 1;
}

//Request and Response Message Types
message CreateLiveEventTypeRequest {
  string api = 1;
  CreateLiveEventType item = 2;
}

message CreateLiveEventTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetLiveEventTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetLiveEventTypeResponse {
  string api = 1;
  LiveEventType item = 2;
}

message ListLiveEventTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLiveEventTypeResponse {
  string api = 1;
  repeated LiveEventType items = 2;
}

// Request data to update LiveEventType
message UpdateLiveEventTypeRequest{
    string api = 1;
    // LiveEventType entity to update
    LiveEventType item = 2;
}

// Contains status of update operation
message UpdateLiveEventTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEventType
message DeleteLiveEventTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the LiveEventType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLiveEventTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Company {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateCompany {
        string Title = 1;
}

//Request and Response Message Types
message CreateCompanyRequest {
  string api = 1;
  CreateCompany item = 2;
}

message CreateCompanyResponse {
  string api = 1;
  string ID = 2;
}

message GetCompanyRequest {
  string api = 1;
  string ID = 2;
}

message GetCompanyResponse {
  string api = 1;
  Company item = 2;
}

message ListCompanyRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListCompanyResponse {
  string api = 1;
  repeated Company items = 2;
}

// Request data to update Company
message UpdateCompanyRequest{
    string api = 1;
    // Company entity to update
    Company item = 2;
}

// Contains status of update operation
message UpdateCompanyResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Company
message DeleteCompanyRequest {
    string api = 1;
    // Unique integer IDentifier of the Company to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteCompanyResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ProductType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateProductType {
        string Title = 1;
}

//Request and Response Message Types
message CreateProductTypeRequest {
  string api = 1;
  CreateProductType item = 2;
}

message CreateProductTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetProductTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetProductTypeResponse {
  string api = 1;
  ProductType item = 2;
}

message ListProductTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListProductTypeResponse {
  string api = 1;
  repeated ProductType items = 2;
}

// Request data to update ProductType
message UpdateProductTypeRequest{
    string api = 1;
    // ProductType entity to update
    ProductType item = 2;
}

// Contains status of update operation
message UpdateProductTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ProductType
message DeleteProductTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the ProductType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteProductTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message CustomerCart {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
}

message CreateCustomerCart {
      }

//Request and Response Message Types
message CreateCustomerCartRequest {
  string api = 1;
  CreateCustomerCart item = 2;
}

message CreateCustomerCartResponse {
  string api = 1;
  string ID = 2;
}

message GetCustomerCartRequest {
  string api = 1;
  string ID = 2;
}

message GetCustomerCartResponse {
  string api = 1;
  CustomerCart item = 2;
}

message ListCustomerCartRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListCustomerCartResponse {
  string api = 1;
  repeated CustomerCart items = 2;
}

// Request data to update CustomerCart
message UpdateCustomerCartRequest{
    string api = 1;
    // CustomerCart entity to update
    CustomerCart item = 2;
}

// Contains status of update operation
message UpdateCustomerCartResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete CustomerCart
message DeleteCustomerCartRequest {
    string api = 1;
    // Unique integer IDentifier of the CustomerCart to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteCustomerCartResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Payment {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string CustomerOrder = 4;
}

message CreatePayment {
        string CustomerOrder = 1;
}

//Request and Response Message Types
message CreatePaymentRequest {
  string api = 1;
  CreatePayment item = 2;
}

message CreatePaymentResponse {
  string api = 1;
  string ID = 2;
}

message GetPaymentRequest {
  string api = 1;
  string ID = 2;
}

message GetPaymentResponse {
  string api = 1;
  Payment item = 2;
}

message ListPaymentRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPaymentResponse {
  string api = 1;
  repeated Payment items = 2;
}

// Request data to update Payment
message UpdatePaymentRequest{
    string api = 1;
    // Payment entity to update
    Payment item = 2;
}

// Contains status of update operation
message UpdatePaymentResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Payment
message DeletePaymentRequest {
    string api = 1;
    // Unique integer IDentifier of the Payment to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePaymentResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Delivery {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
}

message CreateDelivery {
      }

//Request and Response Message Types
message CreateDeliveryRequest {
  string api = 1;
  CreateDelivery item = 2;
}

message CreateDeliveryResponse {
  string api = 1;
  string ID = 2;
}

message GetDeliveryRequest {
  string api = 1;
  string ID = 2;
}

message GetDeliveryResponse {
  string api = 1;
  Delivery item = 2;
}

message ListDeliveryRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDeliveryResponse {
  string api = 1;
  repeated Delivery items = 2;
}

// Request data to update Delivery
message UpdateDeliveryRequest{
    string api = 1;
    // Delivery entity to update
    Delivery item = 2;
}

// Contains status of update operation
message UpdateDeliveryResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Delivery
message DeleteDeliveryRequest {
    string api = 1;
    // Unique integer IDentifier of the Delivery to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDeliveryResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Boycott {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateBoycott {
        string Title = 1;
}

//Request and Response Message Types
message CreateBoycottRequest {
  string api = 1;
  CreateBoycott item = 2;
}

message CreateBoycottResponse {
  string api = 1;
  string ID = 2;
}

message GetBoycottRequest {
  string api = 1;
  string ID = 2;
}

message GetBoycottResponse {
  string api = 1;
  Boycott item = 2;
}

message ListBoycottRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListBoycottResponse {
  string api = 1;
  repeated Boycott items = 2;
}

// Request data to update Boycott
message UpdateBoycottRequest{
    string api = 1;
    // Boycott entity to update
    Boycott item = 2;
}

// Contains status of update operation
message UpdateBoycottResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Boycott
message DeleteBoycottRequest {
    string api = 1;
    // Unique integer IDentifier of the Boycott to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteBoycottResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message BoycottMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Boycott = 5;
}

message CreateBoycottMembership {
        string Cause = 1;
  string Boycott = 2;
}

//Request and Response Message Types
message CreateBoycottMembershipRequest {
  string api = 1;
  CreateBoycottMembership item = 2;
}

message CreateBoycottMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetBoycottMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetBoycottMembershipResponse {
  string api = 1;
  BoycottMembership item = 2;
}

message ListBoycottMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListBoycottMembershipResponse {
  string api = 1;
  repeated BoycottMembership items = 2;
}

// Request data to update BoycottMembership
message UpdateBoycottMembershipRequest{
    string api = 1;
    // BoycottMembership entity to update
    BoycottMembership item = 2;
}

// Contains status of update operation
message UpdateBoycottMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete BoycottMembership
message DeleteBoycottMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the BoycottMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteBoycottMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Election {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateElection {
        string Title = 1;
}

//Request and Response Message Types
message CreateElectionRequest {
  string api = 1;
  CreateElection item = 2;
}

message CreateElectionResponse {
  string api = 1;
  string ID = 2;
}

message GetElectionRequest {
  string api = 1;
  string ID = 2;
}

message GetElectionResponse {
  string api = 1;
  Election item = 2;
}

message ListElectionRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListElectionResponse {
  string api = 1;
  repeated Election items = 2;
}

// Request data to update Election
message UpdateElectionRequest{
    string api = 1;
    // Election entity to update
    Election item = 2;
}

// Contains status of update operation
message UpdateElectionResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Election
message DeleteElectionRequest {
    string api = 1;
    // Unique integer IDentifier of the Election to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteElectionResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ElectionMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Election = 5;
}

message CreateElectionMembership {
        string Cause = 1;
  string Election = 2;
}

//Request and Response Message Types
message CreateElectionMembershipRequest {
  string api = 1;
  CreateElectionMembership item = 2;
}

message CreateElectionMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetElectionMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetElectionMembershipResponse {
  string api = 1;
  ElectionMembership item = 2;
}

message ListElectionMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListElectionMembershipResponse {
  string api = 1;
  repeated ElectionMembership items = 2;
}

// Request data to update ElectionMembership
message UpdateElectionMembershipRequest{
    string api = 1;
    // ElectionMembership entity to update
    ElectionMembership item = 2;
}

// Contains status of update operation
message UpdateElectionMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ElectionMembership
message DeleteElectionMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the ElectionMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteElectionMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PetitionMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Petition = 5;
}

message CreatePetitionMembership {
        string Cause = 1;
  string Petition = 2;
}

//Request and Response Message Types
message CreatePetitionMembershipRequest {
  string api = 1;
  CreatePetitionMembership item = 2;
}

message CreatePetitionMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetPetitionMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetPetitionMembershipResponse {
  string api = 1;
  PetitionMembership item = 2;
}

message ListPetitionMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPetitionMembershipResponse {
  string api = 1;
  repeated PetitionMembership items = 2;
}

// Request data to update PetitionMembership
message UpdatePetitionMembershipRequest{
    string api = 1;
    // PetitionMembership entity to update
    PetitionMembership item = 2;
}

// Contains status of update operation
message UpdatePetitionMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PetitionMembership
message DeletePetitionMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the PetitionMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePetitionMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PollMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Petition = 5;
}

message CreatePollMembership {
        string Cause = 1;
  string Petition = 2;
}

//Request and Response Message Types
message CreatePollMembershipRequest {
  string api = 1;
  CreatePollMembership item = 2;
}

message CreatePollMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetPollMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetPollMembershipResponse {
  string api = 1;
  PollMembership item = 2;
}

message ListPollMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPollMembershipResponse {
  string api = 1;
  repeated PollMembership items = 2;
}

// Request data to update PollMembership
message UpdatePollMembershipRequest{
    string api = 1;
    // PollMembership entity to update
    PollMembership item = 2;
}

// Contains status of update operation
message UpdatePollMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PollMembership
message DeletePollMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the PollMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePollMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunityMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string VolunteerOpportunity = 5;
}

message CreateVolunteerOpportunityMembership {
        string Cause = 1;
  string VolunteerOpportunity = 2;
}

//Request and Response Message Types
message CreateVolunteerOpportunityMembershipRequest {
  string api = 1;
  CreateVolunteerOpportunityMembership item = 2;
}

message CreateVolunteerOpportunityMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityMembershipResponse {
  string api = 1;
  VolunteerOpportunityMembership item = 2;
}

message ListVolunteerOpportunityMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListVolunteerOpportunityMembershipResponse {
  string api = 1;
  repeated VolunteerOpportunityMembership items = 2;
}

// Request data to update VolunteerOpportunityMembership
message UpdateVolunteerOpportunityMembershipRequest{
    string api = 1;
    // VolunteerOpportunityMembership entity to update
    VolunteerOpportunityMembership item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunityMembership
message DeleteVolunteerOpportunityMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the VolunteerOpportunityMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEventMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string LiveEvent = 5;
}

message CreateLiveEventMembership {
        string Cause = 1;
  string LiveEvent = 2;
}

//Request and Response Message Types
message CreateLiveEventMembershipRequest {
  string api = 1;
  CreateLiveEventMembership item = 2;
}

message CreateLiveEventMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetLiveEventMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetLiveEventMembershipResponse {
  string api = 1;
  LiveEventMembership item = 2;
}

message ListLiveEventMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLiveEventMembershipResponse {
  string api = 1;
  repeated LiveEventMembership items = 2;
}

// Request data to update LiveEventMembership
message UpdateLiveEventMembershipRequest{
    string api = 1;
    // LiveEventMembership entity to update
    LiveEventMembership item = 2;
}

// Contains status of update operation
message UpdateLiveEventMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEventMembership
message DeleteLiveEventMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the LiveEventMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLiveEventMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Product {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string ProductType = 5;
}

message CreateProduct {
        string Title = 1;
  string ProductType = 2;
}

//Request and Response Message Types
message CreateProductRequest {
  string api = 1;
  CreateProduct item = 2;
}

message CreateProductResponse {
  string api = 1;
  string ID = 2;
}

message GetProductRequest {
  string api = 1;
  string ID = 2;
}

message GetProductResponse {
  string api = 1;
  Product item = 2;
}

message ListProductRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListProductResponse {
  string api = 1;
  repeated Product items = 2;
}

// Request data to update Product
message UpdateProductRequest{
    string api = 1;
    // Product entity to update
    Product item = 2;
}

// Contains status of update operation
message UpdateProductResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Product
message DeleteProductRequest {
    string api = 1;
    // Unique integer IDentifier of the Product to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteProductResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ProductMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Product = 5;
}

message CreateProductMembership {
        string Cause = 1;
  string Product = 2;
}

//Request and Response Message Types
message CreateProductMembershipRequest {
  string api = 1;
  CreateProductMembership item = 2;
}

message CreateProductMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetProductMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetProductMembershipResponse {
  string api = 1;
  ProductMembership item = 2;
}

message ListProductMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListProductMembershipResponse {
  string api = 1;
  repeated ProductMembership items = 2;
}

// Request data to update ProductMembership
message UpdateProductMembershipRequest{
    string api = 1;
    // ProductMembership entity to update
    ProductMembership item = 2;
}

// Contains status of update operation
message UpdateProductMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ProductMembership
message DeleteProductMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the ProductMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteProductMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DonationCampaign {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateDonationCampaign {
        string Title = 1;
}

//Request and Response Message Types
message CreateDonationCampaignRequest {
  string api = 1;
  CreateDonationCampaign item = 2;
}

message CreateDonationCampaignResponse {
  string api = 1;
  string ID = 2;
}

message GetDonationCampaignRequest {
  string api = 1;
  string ID = 2;
}

message GetDonationCampaignResponse {
  string api = 1;
  DonationCampaign item = 2;
}

message ListDonationCampaignRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDonationCampaignResponse {
  string api = 1;
  repeated DonationCampaign items = 2;
}

// Request data to update DonationCampaign
message UpdateDonationCampaignRequest{
    string api = 1;
    // DonationCampaign entity to update
    DonationCampaign item = 2;
}

// Contains status of update operation
message UpdateDonationCampaignResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DonationCampaign
message DeleteDonationCampaignRequest {
    string api = 1;
    // Unique integer IDentifier of the DonationCampaign to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDonationCampaignResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DonationCampaignMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string DonationCampaign = 5;
}

message CreateDonationCampaignMembership {
        string Cause = 1;
  string DonationCampaign = 2;
}

//Request and Response Message Types
message CreateDonationCampaignMembershipRequest {
  string api = 1;
  CreateDonationCampaignMembership item = 2;
}

message CreateDonationCampaignMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetDonationCampaignMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetDonationCampaignMembershipResponse {
  string api = 1;
  DonationCampaignMembership item = 2;
}

message ListDonationCampaignMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDonationCampaignMembershipResponse {
  string api = 1;
  repeated DonationCampaignMembership items = 2;
}

// Request data to update DonationCampaignMembership
message UpdateDonationCampaignMembershipRequest{
    string api = 1;
    // DonationCampaignMembership entity to update
    DonationCampaignMembership item = 2;
}

// Contains status of update operation
message UpdateDonationCampaignMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DonationCampaignMembership
message DeleteDonationCampaignMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the DonationCampaignMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDonationCampaignMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Petition {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreatePetition {
        string Title = 1;
}

//Request and Response Message Types
message CreatePetitionRequest {
  string api = 1;
  CreatePetition item = 2;
}

message CreatePetitionResponse {
  string api = 1;
  string ID = 2;
}

message GetPetitionRequest {
  string api = 1;
  string ID = 2;
}

message GetPetitionResponse {
  string api = 1;
  Petition item = 2;
}

message ListPetitionRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPetitionResponse {
  string api = 1;
  repeated Petition items = 2;
}

// Request data to update Petition
message UpdatePetitionRequest{
    string api = 1;
    // Petition entity to update
    Petition item = 2;
}

// Contains status of update operation
message UpdatePetitionResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Petition
message DeletePetitionRequest {
    string api = 1;
    // Unique integer IDentifier of the Petition to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePetitionResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PetitionSigner {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Petition = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreatePetitionSigner {
        string Petition = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreatePetitionSignerRequest {
  string api = 1;
  CreatePetitionSigner item = 2;
}

message CreatePetitionSignerResponse {
  string api = 1;
  string ID = 2;
}

message GetPetitionSignerRequest {
  string api = 1;
  string ID = 2;
}

message GetPetitionSignerResponse {
  string api = 1;
  PetitionSigner item = 2;
}

message ListPetitionSignerRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPetitionSignerResponse {
  string api = 1;
  repeated PetitionSigner items = 2;
}

// Request data to update PetitionSigner
message UpdatePetitionSignerRequest{
    string api = 1;
    // PetitionSigner entity to update
    PetitionSigner item = 2;
}

// Contains status of update operation
message UpdatePetitionSignerResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PetitionSigner
message DeletePetitionSignerRequest {
    string api = 1;
    // Unique integer IDentifier of the PetitionSigner to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePetitionSignerResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Poll {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreatePoll {
        string Title = 1;
}

//Request and Response Message Types
message CreatePollRequest {
  string api = 1;
  CreatePoll item = 2;
}

message CreatePollResponse {
  string api = 1;
  string ID = 2;
}

message GetPollRequest {
  string api = 1;
  string ID = 2;
}

message GetPollResponse {
  string api = 1;
  Poll item = 2;
}

message ListPollRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPollResponse {
  string api = 1;
  repeated Poll items = 2;
}

// Request data to update Poll
message UpdatePollRequest{
    string api = 1;
    // Poll entity to update
    Poll item = 2;
}

// Contains status of update operation
message UpdatePollResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Poll
message DeletePollRequest {
    string api = 1;
    // Unique integer IDentifier of the Poll to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePollResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PollRespondant {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Poll = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreatePollRespondant {
        string Poll = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreatePollRespondantRequest {
  string api = 1;
  CreatePollRespondant item = 2;
}

message CreatePollRespondantResponse {
  string api = 1;
  string ID = 2;
}

message GetPollRespondantRequest {
  string api = 1;
  string ID = 2;
}

message GetPollRespondantResponse {
  string api = 1;
  PollRespondant item = 2;
}

message ListPollRespondantRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPollRespondantResponse {
  string api = 1;
  repeated PollRespondant items = 2;
}

// Request data to update PollRespondant
message UpdatePollRespondantRequest{
    string api = 1;
    // PollRespondant entity to update
    PollRespondant item = 2;
}

// Contains status of update operation
message UpdatePollRespondantResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PollRespondant
message DeletePollRespondantRequest {
    string api = 1;
    // Unique integer IDentifier of the PollRespondant to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePollRespondantResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Purchaser {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string CustomerOrder = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreatePurchaser {
        string CustomerOrder = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreatePurchaserRequest {
  string api = 1;
  CreatePurchaser item = 2;
}

message CreatePurchaserResponse {
  string api = 1;
  string ID = 2;
}

message GetPurchaserRequest {
  string api = 1;
  string ID = 2;
}

message GetPurchaserResponse {
  string api = 1;
  Purchaser item = 2;
}

message ListPurchaserRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListPurchaserResponse {
  string api = 1;
  repeated Purchaser items = 2;
}

// Request data to update Purchaser
message UpdatePurchaserRequest{
    string api = 1;
    // Purchaser entity to update
    Purchaser item = 2;
}

// Contains status of update operation
message UpdatePurchaserResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Purchaser
message DeletePurchaserRequest {
    string api = 1;
    // Unique integer IDentifier of the Purchaser to delete
    string ID = 2;
}

// Contains status of delete operation
message DeletePurchaserResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message CustomerOrder {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string CustomerCart = 4;
}

message CreateCustomerOrder {
        string CustomerCart = 1;
}

//Request and Response Message Types
message CreateCustomerOrderRequest {
  string api = 1;
  CreateCustomerOrder item = 2;
}

message CreateCustomerOrderResponse {
  string api = 1;
  string ID = 2;
}

message GetCustomerOrderRequest {
  string api = 1;
  string ID = 2;
}

message GetCustomerOrderResponse {
  string api = 1;
  CustomerOrder item = 2;
}

message ListCustomerOrderRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListCustomerOrderResponse {
  string api = 1;
  repeated CustomerOrder items = 2;
}

// Request data to update CustomerOrder
message UpdateCustomerOrderRequest{
    string api = 1;
    // CustomerOrder entity to update
    CustomerOrder item = 2;
}

// Contains status of update operation
message UpdateCustomerOrderResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete CustomerOrder
message DeleteCustomerOrderRequest {
    string api = 1;
    // Unique integer IDentifier of the CustomerOrder to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteCustomerOrderResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Donor {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string CustomerOrder = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreateDonor {
        string CustomerOrder = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreateDonorRequest {
  string api = 1;
  CreateDonor item = 2;
}

message CreateDonorResponse {
  string api = 1;
  string ID = 2;
}

message GetDonorRequest {
  string api = 1;
  string ID = 2;
}

message GetDonorResponse {
  string api = 1;
  Donor item = 2;
}

message ListDonorRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListDonorResponse {
  string api = 1;
  repeated Donor items = 2;
}

// Request data to update Donor
message UpdateDonorRequest{
    string api = 1;
    // Donor entity to update
    Donor item = 2;
}

// Contains status of update operation
message UpdateDonorResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Donor
message DeleteDonorRequest {
    string api = 1;
    // Unique integer IDentifier of the Donor to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteDonorResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEvent {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string LiveEventType = 5;
}

message CreateLiveEvent {
        string Title = 1;
  string LiveEventType = 2;
}

//Request and Response Message Types
message CreateLiveEventRequest {
  string api = 1;
  CreateLiveEvent item = 2;
}

message CreateLiveEventResponse {
  string api = 1;
  string ID = 2;
}

message GetLiveEventRequest {
  string api = 1;
  string ID = 2;
}

message GetLiveEventResponse {
  string api = 1;
  LiveEvent item = 2;
}

message ListLiveEventRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListLiveEventResponse {
  string api = 1;
  repeated LiveEvent items = 2;
}

// Request data to update LiveEvent
message UpdateLiveEventRequest{
    string api = 1;
    // LiveEvent entity to update
    LiveEvent item = 2;
}

// Contains status of update operation
message UpdateLiveEventResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEvent
message DeleteLiveEventRequest {
    string api = 1;
    // Unique integer IDentifier of the LiveEvent to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteLiveEventResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message EventAttendee {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string LiveEvent = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreateEventAttendee {
        string LiveEvent = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreateEventAttendeeRequest {
  string api = 1;
  CreateEventAttendee item = 2;
}

message CreateEventAttendeeResponse {
  string api = 1;
  string ID = 2;
}

message GetEventAttendeeRequest {
  string api = 1;
  string ID = 2;
}

message GetEventAttendeeResponse {
  string api = 1;
  EventAttendee item = 2;
}

message ListEventAttendeeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListEventAttendeeResponse {
  string api = 1;
  repeated EventAttendee items = 2;
}

// Request data to update EventAttendee
message UpdateEventAttendeeRequest{
    string api = 1;
    // EventAttendee entity to update
    EventAttendee item = 2;
}

// Contains status of update operation
message UpdateEventAttendeeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete EventAttendee
message DeleteEventAttendeeRequest {
    string api = 1;
    // Unique integer IDentifier of the EventAttendee to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteEventAttendeeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Voter {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Contact = 4;
  string Cause = 5;
}

message CreateVoter {
        string Contact = 1;
  string Cause = 2;
}

//Request and Response Message Types
message CreateVoterRequest {
  string api = 1;
  CreateVoter item = 2;
}

message CreateVoterResponse {
  string api = 1;
  string ID = 2;
}

message GetVoterRequest {
  string api = 1;
  string ID = 2;
}

message GetVoterResponse {
  string api = 1;
  Voter item = 2;
}

message ListVoterRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListVoterResponse {
  string api = 1;
  repeated Voter items = 2;
}

// Request data to update Voter
message UpdateVoterRequest{
    string api = 1;
    // Voter entity to update
    Voter item = 2;
}

// Contains status of update operation
message UpdateVoterResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Voter
message DeleteVoterRequest {
    string api = 1;
    // Unique integer IDentifier of the Voter to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteVoterResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunity {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string ElectionType = 5;
}

message CreateVolunteerOpportunity {
        string Title = 1;
  string ElectionType = 2;
}

//Request and Response Message Types
message CreateVolunteerOpportunityRequest {
  string api = 1;
  CreateVolunteerOpportunity item = 2;
}

message CreateVolunteerOpportunityResponse {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityRequest {
  string api = 1;
  string ID = 2;
}

message GetVolunteerOpportunityResponse {
  string api = 1;
  VolunteerOpportunity item = 2;
}

message ListVolunteerOpportunityRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListVolunteerOpportunityResponse {
  string api = 1;
  repeated VolunteerOpportunity items = 2;
}

// Request data to update VolunteerOpportunity
message UpdateVolunteerOpportunityRequest{
    string api = 1;
    // VolunteerOpportunity entity to update
    VolunteerOpportunity item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunity
message DeleteVolunteerOpportunityRequest {
    string api = 1;
    // Unique integer IDentifier of the VolunteerOpportunity to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Volunteer {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string VolunteerOpportunity = 4;
  string Contact = 5;
  string Cause = 6;
}

message CreateVolunteer {
        string VolunteerOpportunity = 1;
  string Contact = 2;
  string Cause = 3;
}

//Request and Response Message Types
message CreateVolunteerRequest {
  string api = 1;
  CreateVolunteer item = 2;
}

message CreateVolunteerResponse {
  string api = 1;
  string ID = 2;
}

message GetVolunteerRequest {
  string api = 1;
  string ID = 2;
}

message GetVolunteerResponse {
  string api = 1;
  Volunteer item = 2;
}

message ListVolunteerRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListVolunteerResponse {
  string api = 1;
  repeated Volunteer items = 2;
}

// Request data to update Volunteer
message UpdateVolunteerRequest{
    string api = 1;
    // Volunteer entity to update
    Volunteer item = 2;
}

// Contains status of update operation
message UpdateVolunteerResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Volunteer
message DeleteVolunteerRequest {
    string api = 1;
    // Unique integer IDentifier of the Volunteer to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteVolunteerResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Follower {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Contact = 4;
  string Cause = 5;
}

message CreateFollower {
        string Contact = 1;
  string Cause = 2;
}

//Request and Response Message Types
message CreateFollowerRequest {
  string api = 1;
  CreateFollower item = 2;
}

message CreateFollowerResponse {
  string api = 1;
  string ID = 2;
}

message GetFollowerRequest {
  string api = 1;
  string ID = 2;
}

message GetFollowerResponse {
  string api = 1;
  Follower item = 2;
}

message ListFollowerRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListFollowerResponse {
  string api = 1;
  repeated Follower items = 2;
}

// Request data to update Follower
message UpdateFollowerRequest{
    string api = 1;
    // Follower entity to update
    Follower item = 2;
}

// Contains status of update operation
message UpdateFollowerResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Follower
message DeleteFollowerRequest {
    string api = 1;
    // Unique integer IDentifier of the Follower to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteFollowerResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Territory {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateTerritory {
        string Title = 1;
}

//Request and Response Message Types
message CreateTerritoryRequest {
  string api = 1;
  CreateTerritory item = 2;
}

message CreateTerritoryResponse {
  string api = 1;
  string ID = 2;
}

message GetTerritoryRequest {
  string api = 1;
  string ID = 2;
}

message GetTerritoryResponse {
  string api = 1;
  Territory item = 2;
}

message ListTerritoryRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListTerritoryResponse {
  string api = 1;
  repeated Territory items = 2;
}

// Request data to update Territory
message UpdateTerritoryRequest{
    string api = 1;
    // Territory entity to update
    Territory item = 2;
}

// Contains status of update operation
message UpdateTerritoryResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Territory
message DeleteTerritoryRequest {
    string api = 1;
    // Unique integer IDentifier of the Territory to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteTerritoryResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ActivityType {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
}

message CreateActivityType {
        string Title = 1;
}

//Request and Response Message Types
message CreateActivityTypeRequest {
  string api = 1;
  CreateActivityType item = 2;
}

message CreateActivityTypeResponse {
  string api = 1;
  string ID = 2;
}

message GetActivityTypeRequest {
  string api = 1;
  string ID = 2;
}

message GetActivityTypeResponse {
  string api = 1;
  ActivityType item = 2;
}

message ListActivityTypeRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListActivityTypeResponse {
  string api = 1;
  repeated ActivityType items = 2;
}

// Request data to update ActivityType
message UpdateActivityTypeRequest{
    string api = 1;
    // ActivityType entity to update
    ActivityType item = 2;
}

// Contains status of update operation
message UpdateActivityTypeResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ActivityType
message DeleteActivityTypeRequest {
    string api = 1;
    // Unique integer IDentifier of the ActivityType to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteActivityTypeResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Activity {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string ActivityType = 5;
  string Contact = 6;
  string Cause = 7;
}

message CreateActivity {
        string Title = 1;
  string ActivityType = 2;
  string Contact = 3;
  string Cause = 4;
}

//Request and Response Message Types
message CreateActivityRequest {
  string api = 1;
  CreateActivity item = 2;
}

message CreateActivityResponse {
  string api = 1;
  string ID = 2;
}

message GetActivityRequest {
  string api = 1;
  string ID = 2;
}

message GetActivityResponse {
  string api = 1;
  Activity item = 2;
}

message ListActivityRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListActivityResponse {
  string api = 1;
  repeated Activity items = 2;
}

// Request data to update Activity
message UpdateActivityRequest{
    string api = 1;
    // Activity entity to update
    Activity item = 2;
}

// Contains status of update operation
message UpdateActivityResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Activity
message DeleteActivityRequest {
    string api = 1;
    // Unique integer IDentifier of the Activity to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteActivityResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Note {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Contact = 4;
  string Cause = 5;
  string Body = 6;
}

message CreateNote {
        string Contact = 1;
  string Cause = 2;
  string Body = 3;
}

//Request and Response Message Types
message CreateNoteRequest {
  string api = 1;
  CreateNote item = 2;
}

message CreateNoteResponse {
  string api = 1;
  string ID = 2;
}

message GetNoteRequest {
  string api = 1;
  string ID = 2;
}

message GetNoteResponse {
  string api = 1;
  Note item = 2;
}

message ListNoteRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListNoteResponse {
  string api = 1;
  repeated Note items = 2;
}

// Request data to update Note
message UpdateNoteRequest{
    string api = 1;
    // Note entity to update
    Note item = 2;
}

// Contains status of update operation
message UpdateNoteResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Note
message DeleteNoteRequest {
    string api = 1;
    // Unique integer IDentifier of the Note to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteNoteResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Account {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Username = 4;
}

message CreateAccount {
        string Username = 1;
}

//Request and Response Message Types
message CreateAccountRequest {
  string api = 1;
  CreateAccount item = 2;
}

message CreateAccountResponse {
  string api = 1;
  string ID = 2;
}

message GetAccountRequest {
  string api = 1;
  string ID = 2;
}

message GetAccountResponse {
  string api = 1;
  Account item = 2;
}

message ListAccountRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListAccountResponse {
  string api = 1;
  repeated Account items = 2;
}

// Request data to update Account
message UpdateAccountRequest{
    string api = 1;
    // Account entity to update
    Account item = 2;
}

// Contains status of update operation
message UpdateAccountResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Account
message DeleteAccountRequest {
    string api = 1;
    // Unique integer IDentifier of the Account to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteAccountResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message OwnerMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Account = 5;
}

message CreateOwnerMembership {
        string Cause = 1;
  string Account = 2;
}

//Request and Response Message Types
message CreateOwnerMembershipRequest {
  string api = 1;
  CreateOwnerMembership item = 2;
}

message CreateOwnerMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetOwnerMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetOwnerMembershipResponse {
  string api = 1;
  OwnerMembership item = 2;
}

message ListOwnerMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListOwnerMembershipResponse {
  string api = 1;
  repeated OwnerMembership items = 2;
}

// Request data to update OwnerMembership
message UpdateOwnerMembershipRequest{
    string api = 1;
    // OwnerMembership entity to update
    OwnerMembership item = 2;
}

// Contains status of update operation
message UpdateOwnerMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete OwnerMembership
message DeleteOwnerMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the OwnerMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteOwnerMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Contact {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string FirstName = 4;
  string MiddleName = 5;
  string LastName = 6;
  string Email = 7;
  string PhoneNumber = 8;
}

message CreateContact {
        string FirstName = 1;
  string MiddleName = 2;
  string LastName = 3;
  string Email = 4;
  string PhoneNumber = 5;
}

//Request and Response Message Types
message CreateContactRequest {
  string api = 1;
  CreateContact item = 2;
}

message CreateContactResponse {
  string api = 1;
  string ID = 2;
}

message GetContactRequest {
  string api = 1;
  string ID = 2;
}

message GetContactResponse {
  string api = 1;
  Contact item = 2;
}

message ListContactRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListContactResponse {
  string api = 1;
  repeated Contact items = 2;
}

// Request data to update Contact
message UpdateContactRequest{
    string api = 1;
    // Contact entity to update
    Contact item = 2;
}

// Contains status of update operation
message UpdateContactResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Contact
message DeleteContactRequest {
    string api = 1;
    // Unique integer IDentifier of the Contact to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteContactResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ContactMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Contact = 5;
}

message CreateContactMembership {
        string Cause = 1;
  string Contact = 2;
}

//Request and Response Message Types
message CreateContactMembershipRequest {
  string api = 1;
  CreateContactMembership item = 2;
}

message CreateContactMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetContactMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetContactMembershipResponse {
  string api = 1;
  ContactMembership item = 2;
}

message ListContactMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListContactMembershipResponse {
  string api = 1;
  repeated ContactMembership items = 2;
}

// Request data to update ContactMembership
message UpdateContactMembershipRequest{
    string api = 1;
    // ContactMembership entity to update
    ContactMembership item = 2;
}

// Contains status of update operation
message UpdateContactMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ContactMembership
message DeleteContactMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the ContactMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteContactMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Cause {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Title = 4;
  string Slug = 5;
  string Summary = 6;
}

message CreateCause {
        string Title = 1;
  string Slug = 2;
  string Summary = 3;
}

//Request and Response Message Types
message CreateCauseRequest {
  string api = 1;
  CreateCause item = 2;
}

message CreateCauseResponse {
  string api = 1;
  string ID = 2;
}

message GetCauseRequest {
  string api = 1;
  string ID = 2;
}

message GetCauseResponse {
  string api = 1;
  Cause item = 2;
}

message ListCauseRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListCauseResponse {
  string api = 1;
  repeated Cause items = 2;
}

// Request data to update Cause
message UpdateCauseRequest{
    string api = 1;
    // Cause entity to update
    Cause item = 2;
}

// Contains status of update operation
message UpdateCauseResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Cause
message DeleteCauseRequest {
    string api = 1;
    // Unique integer IDentifier of the Cause to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteCauseResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Agent {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Account = 4;
}

message CreateAgent {
        string Account = 1;
}

//Request and Response Message Types
message CreateAgentRequest {
  string api = 1;
  CreateAgent item = 2;
}

message CreateAgentResponse {
  string api = 1;
  string ID = 2;
}

message GetAgentRequest {
  string api = 1;
  string ID = 2;
}

message GetAgentResponse {
  string api = 1;
  Agent item = 2;
}

message ListAgentRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListAgentResponse {
  string api = 1;
  repeated Agent items = 2;
}

// Request data to update Agent
message UpdateAgentRequest{
    string api = 1;
    // Agent entity to update
    Agent item = 2;
}

// Contains status of update operation
message UpdateAgentResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Agent
message DeleteAgentRequest {
    string api = 1;
    // Unique integer IDentifier of the Agent to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteAgentResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message AgentMembership {
  string ID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Cause = 4;
  string Agent = 5;
}

message CreateAgentMembership {
        string Cause = 1;
  string Agent = 2;
}

//Request and Response Message Types
message CreateAgentMembershipRequest {
  string api = 1;
  CreateAgentMembership item = 2;
}

message CreateAgentMembershipResponse {
  string api = 1;
  string ID = 2;
}

message GetAgentMembershipRequest {
  string api = 1;
  string ID = 2;
}

message GetAgentMembershipResponse {
  string api = 1;
  AgentMembership item = 2;
}

message ListAgentMembershipRequest {
  string api = 1;
  int64 limit = 2;
  Ordering ordering = 3;
  Filter filter = 4;
}

message ListAgentMembershipResponse {
  string api = 1;
  repeated AgentMembership items = 2;
}

// Request data to update AgentMembership
message UpdateAgentMembershipRequest{
    string api = 1;
    // AgentMembership entity to update
    AgentMembership item = 2;
}

// Contains status of update operation
message UpdateAgentMembershipResponse {
    string api = 1;
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete AgentMembership
message DeleteAgentMembershipRequest {
    string api = 1;
    // Unique integer IDentifier of the AgentMembership to delete
    string ID = 2;
}

// Contains status of delete operation
message DeleteAgentMembershipResponse {
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}


// Generated Shrike Service Definition
service ShrikeService {
  
  // CreateACL takes a ACL object to create.
  rpc CreateACL(CreateACLRequest) returns (CreateACLResponse) {
    option (google.api.http) ={
      post: "/v1/acl"
      body: "*"
    };
  }
  // GetACL takes an ID and returns a single ACL.
  rpc GetACL(GetACLRequest) returns (GetACLResponse) {
    option (google.api.http) ={
      get: "/v1/acl/{ID}"
    };
  }
    // List ACL, takes filters, limit, and cursor param.
  rpc ListACL(ListACLRequest) returns (ListACLResponse) {
  option (google.api.http) ={
    get: "/v1/acl"
  };
}
    // Update ACL
    rpc UpdateACL(UpdateACLRequest) returns (UpdateACLResponse) {
        option (google.api.http) = {
            put: "/v1/acl/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/acl/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ACL
    rpc DeleteACL(DeleteACLRequest) returns (DeleteACLResponse) {
        option (google.api.http) = {
            delete: "/v1/acl/{ID}"
        };
    }
  
  // CreateMailingAddress takes a MailingAddress object to create.
  rpc CreateMailingAddress(CreateMailingAddressRequest) returns (CreateMailingAddressResponse) {
    option (google.api.http) ={
      post: "/v1/mailingaddress"
      body: "*"
    };
  }
  // GetMailingAddress takes an ID and returns a single MailingAddress.
  rpc GetMailingAddress(GetMailingAddressRequest) returns (GetMailingAddressResponse) {
    option (google.api.http) ={
      get: "/v1/mailingaddress/{ID}"
    };
  }
    // List MailingAddress, takes filters, limit, and cursor param.
  rpc ListMailingAddress(ListMailingAddressRequest) returns (ListMailingAddressResponse) {
  option (google.api.http) ={
    get: "/v1/mailingaddress"
  };
}
    // Update MailingAddress
    rpc UpdateMailingAddress(UpdateMailingAddressRequest) returns (UpdateMailingAddressResponse) {
        option (google.api.http) = {
            put: "/v1/mailingaddress/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/mailingaddress/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete MailingAddress
    rpc DeleteMailingAddress(DeleteMailingAddressRequest) returns (DeleteMailingAddressResponse) {
        option (google.api.http) = {
            delete: "/v1/mailingaddress/{ID}"
        };
    }
  
  // CreatePhoneNumber takes a PhoneNumber object to create.
  rpc CreatePhoneNumber(CreatePhoneNumberRequest) returns (CreatePhoneNumberResponse) {
    option (google.api.http) ={
      post: "/v1/phonenumber"
      body: "*"
    };
  }
  // GetPhoneNumber takes an ID and returns a single PhoneNumber.
  rpc GetPhoneNumber(GetPhoneNumberRequest) returns (GetPhoneNumberResponse) {
    option (google.api.http) ={
      get: "/v1/phonenumber/{ID}"
    };
  }
    // List PhoneNumber, takes filters, limit, and cursor param.
  rpc ListPhoneNumber(ListPhoneNumberRequest) returns (ListPhoneNumberResponse) {
  option (google.api.http) ={
    get: "/v1/phonenumber"
  };
}
    // Update PhoneNumber
    rpc UpdatePhoneNumber(UpdatePhoneNumberRequest) returns (UpdatePhoneNumberResponse) {
        option (google.api.http) = {
            put: "/v1/phonenumber/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/phonenumber/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PhoneNumber
    rpc DeletePhoneNumber(DeletePhoneNumberRequest) returns (DeletePhoneNumberResponse) {
        option (google.api.http) = {
            delete: "/v1/phonenumber/{ID}"
        };
    }
  
  // CreateEmailAddress takes a EmailAddress object to create.
  rpc CreateEmailAddress(CreateEmailAddressRequest) returns (CreateEmailAddressResponse) {
    option (google.api.http) ={
      post: "/v1/emailaddress"
      body: "*"
    };
  }
  // GetEmailAddress takes an ID and returns a single EmailAddress.
  rpc GetEmailAddress(GetEmailAddressRequest) returns (GetEmailAddressResponse) {
    option (google.api.http) ={
      get: "/v1/emailaddress/{ID}"
    };
  }
    // List EmailAddress, takes filters, limit, and cursor param.
  rpc ListEmailAddress(ListEmailAddressRequest) returns (ListEmailAddressResponse) {
  option (google.api.http) ={
    get: "/v1/emailaddress"
  };
}
    // Update EmailAddress
    rpc UpdateEmailAddress(UpdateEmailAddressRequest) returns (UpdateEmailAddressResponse) {
        option (google.api.http) = {
            put: "/v1/emailaddress/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/emailaddress/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete EmailAddress
    rpc DeleteEmailAddress(DeleteEmailAddressRequest) returns (DeleteEmailAddressResponse) {
        option (google.api.http) = {
            delete: "/v1/emailaddress/{ID}"
        };
    }
  
  // CreatePhoto takes a Photo object to create.
  rpc CreatePhoto(CreatePhotoRequest) returns (CreatePhotoResponse) {
    option (google.api.http) ={
      post: "/v1/photo"
      body: "*"
    };
  }
  // GetPhoto takes an ID and returns a single Photo.
  rpc GetPhoto(GetPhotoRequest) returns (GetPhotoResponse) {
    option (google.api.http) ={
      get: "/v1/photo/{ID}"
    };
  }
    // List Photo, takes filters, limit, and cursor param.
  rpc ListPhoto(ListPhotoRequest) returns (ListPhotoResponse) {
  option (google.api.http) ={
    get: "/v1/photo"
  };
}
    // Update Photo
    rpc UpdatePhoto(UpdatePhotoRequest) returns (UpdatePhotoResponse) {
        option (google.api.http) = {
            put: "/v1/photo/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/photo/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Photo
    rpc DeletePhoto(DeletePhotoRequest) returns (DeletePhotoResponse) {
        option (google.api.http) = {
            delete: "/v1/photo/{ID}"
        };
    }
  
  // CreateLayoutType takes a LayoutType object to create.
  rpc CreateLayoutType(CreateLayoutTypeRequest) returns (CreateLayoutTypeResponse) {
    option (google.api.http) ={
      post: "/v1/layouttype"
      body: "*"
    };
  }
  // GetLayoutType takes an ID and returns a single LayoutType.
  rpc GetLayoutType(GetLayoutTypeRequest) returns (GetLayoutTypeResponse) {
    option (google.api.http) ={
      get: "/v1/layouttype/{ID}"
    };
  }
    // List LayoutType, takes filters, limit, and cursor param.
  rpc ListLayoutType(ListLayoutTypeRequest) returns (ListLayoutTypeResponse) {
  option (google.api.http) ={
    get: "/v1/layouttype"
  };
}
    // Update LayoutType
    rpc UpdateLayoutType(UpdateLayoutTypeRequest) returns (UpdateLayoutTypeResponse) {
        option (google.api.http) = {
            put: "/v1/layouttype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/layouttype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LayoutType
    rpc DeleteLayoutType(DeleteLayoutTypeRequest) returns (DeleteLayoutTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/layouttype/{ID}"
        };
    }
  
  // CreateLayoutRow takes a LayoutRow object to create.
  rpc CreateLayoutRow(CreateLayoutRowRequest) returns (CreateLayoutRowResponse) {
    option (google.api.http) ={
      post: "/v1/layoutrow"
      body: "*"
    };
  }
  // GetLayoutRow takes an ID and returns a single LayoutRow.
  rpc GetLayoutRow(GetLayoutRowRequest) returns (GetLayoutRowResponse) {
    option (google.api.http) ={
      get: "/v1/layoutrow/{ID}"
    };
  }
    // List LayoutRow, takes filters, limit, and cursor param.
  rpc ListLayoutRow(ListLayoutRowRequest) returns (ListLayoutRowResponse) {
  option (google.api.http) ={
    get: "/v1/layoutrow"
  };
}
    // Update LayoutRow
    rpc UpdateLayoutRow(UpdateLayoutRowRequest) returns (UpdateLayoutRowResponse) {
        option (google.api.http) = {
            put: "/v1/layoutrow/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/layoutrow/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LayoutRow
    rpc DeleteLayoutRow(DeleteLayoutRowRequest) returns (DeleteLayoutRowResponse) {
        option (google.api.http) = {
            delete: "/v1/layoutrow/{ID}"
        };
    }
  
  // CreateComponentImplementation takes a ComponentImplementation object to create.
  rpc CreateComponentImplementation(CreateComponentImplementationRequest) returns (CreateComponentImplementationResponse) {
    option (google.api.http) ={
      post: "/v1/componentimplementation"
      body: "*"
    };
  }
  // GetComponentImplementation takes an ID and returns a single ComponentImplementation.
  rpc GetComponentImplementation(GetComponentImplementationRequest) returns (GetComponentImplementationResponse) {
    option (google.api.http) ={
      get: "/v1/componentimplementation/{ID}"
    };
  }
    // List ComponentImplementation, takes filters, limit, and cursor param.
  rpc ListComponentImplementation(ListComponentImplementationRequest) returns (ListComponentImplementationResponse) {
  option (google.api.http) ={
    get: "/v1/componentimplementation"
  };
}
    // Update ComponentImplementation
    rpc UpdateComponentImplementation(UpdateComponentImplementationRequest) returns (UpdateComponentImplementationResponse) {
        option (google.api.http) = {
            put: "/v1/componentimplementation/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/componentimplementation/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ComponentImplementation
    rpc DeleteComponentImplementation(DeleteComponentImplementationRequest) returns (DeleteComponentImplementationResponse) {
        option (google.api.http) = {
            delete: "/v1/componentimplementation/{ID}"
        };
    }
  
  // CreateComponentType takes a ComponentType object to create.
  rpc CreateComponentType(CreateComponentTypeRequest) returns (CreateComponentTypeResponse) {
    option (google.api.http) ={
      post: "/v1/componenttype"
      body: "*"
    };
  }
  // GetComponentType takes an ID and returns a single ComponentType.
  rpc GetComponentType(GetComponentTypeRequest) returns (GetComponentTypeResponse) {
    option (google.api.http) ={
      get: "/v1/componenttype/{ID}"
    };
  }
    // List ComponentType, takes filters, limit, and cursor param.
  rpc ListComponentType(ListComponentTypeRequest) returns (ListComponentTypeResponse) {
  option (google.api.http) ={
    get: "/v1/componenttype"
  };
}
    // Update ComponentType
    rpc UpdateComponentType(UpdateComponentTypeRequest) returns (UpdateComponentTypeResponse) {
        option (google.api.http) = {
            put: "/v1/componenttype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/componenttype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ComponentType
    rpc DeleteComponentType(DeleteComponentTypeRequest) returns (DeleteComponentTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/componenttype/{ID}"
        };
    }
  
  // CreateLayoutColumn takes a LayoutColumn object to create.
  rpc CreateLayoutColumn(CreateLayoutColumnRequest) returns (CreateLayoutColumnResponse) {
    option (google.api.http) ={
      post: "/v1/layoutcolumn"
      body: "*"
    };
  }
  // GetLayoutColumn takes an ID and returns a single LayoutColumn.
  rpc GetLayoutColumn(GetLayoutColumnRequest) returns (GetLayoutColumnResponse) {
    option (google.api.http) ={
      get: "/v1/layoutcolumn/{ID}"
    };
  }
    // List LayoutColumn, takes filters, limit, and cursor param.
  rpc ListLayoutColumn(ListLayoutColumnRequest) returns (ListLayoutColumnResponse) {
  option (google.api.http) ={
    get: "/v1/layoutcolumn"
  };
}
    // Update LayoutColumn
    rpc UpdateLayoutColumn(UpdateLayoutColumnRequest) returns (UpdateLayoutColumnResponse) {
        option (google.api.http) = {
            put: "/v1/layoutcolumn/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/layoutcolumn/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LayoutColumn
    rpc DeleteLayoutColumn(DeleteLayoutColumnRequest) returns (DeleteLayoutColumnResponse) {
        option (google.api.http) = {
            delete: "/v1/layoutcolumn/{ID}"
        };
    }
  
  // CreateFieldType takes a FieldType object to create.
  rpc CreateFieldType(CreateFieldTypeRequest) returns (CreateFieldTypeResponse) {
    option (google.api.http) ={
      post: "/v1/fieldtype"
      body: "*"
    };
  }
  // GetFieldType takes an ID and returns a single FieldType.
  rpc GetFieldType(GetFieldTypeRequest) returns (GetFieldTypeResponse) {
    option (google.api.http) ={
      get: "/v1/fieldtype/{ID}"
    };
  }
    // List FieldType, takes filters, limit, and cursor param.
  rpc ListFieldType(ListFieldTypeRequest) returns (ListFieldTypeResponse) {
  option (google.api.http) ={
    get: "/v1/fieldtype"
  };
}
    // Update FieldType
    rpc UpdateFieldType(UpdateFieldTypeRequest) returns (UpdateFieldTypeResponse) {
        option (google.api.http) = {
            put: "/v1/fieldtype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/fieldtype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete FieldType
    rpc DeleteFieldType(DeleteFieldTypeRequest) returns (DeleteFieldTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/fieldtype/{ID}"
        };
    }
  
  // CreateComponent takes a Component object to create.
  rpc CreateComponent(CreateComponentRequest) returns (CreateComponentResponse) {
    option (google.api.http) ={
      post: "/v1/component"
      body: "*"
    };
  }
  // GetComponent takes an ID and returns a single Component.
  rpc GetComponent(GetComponentRequest) returns (GetComponentResponse) {
    option (google.api.http) ={
      get: "/v1/component/{ID}"
    };
  }
    // List Component, takes filters, limit, and cursor param.
  rpc ListComponent(ListComponentRequest) returns (ListComponentResponse) {
  option (google.api.http) ={
    get: "/v1/component"
  };
}
    // Update Component
    rpc UpdateComponent(UpdateComponentRequest) returns (UpdateComponentResponse) {
        option (google.api.http) = {
            put: "/v1/component/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/component/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Component
    rpc DeleteComponent(DeleteComponentRequest) returns (DeleteComponentResponse) {
        option (google.api.http) = {
            delete: "/v1/component/{ID}"
        };
    }
  
  // CreateField takes a Field object to create.
  rpc CreateField(CreateFieldRequest) returns (CreateFieldResponse) {
    option (google.api.http) ={
      post: "/v1/field"
      body: "*"
    };
  }
  // GetField takes an ID and returns a single Field.
  rpc GetField(GetFieldRequest) returns (GetFieldResponse) {
    option (google.api.http) ={
      get: "/v1/field/{ID}"
    };
  }
    // List Field, takes filters, limit, and cursor param.
  rpc ListField(ListFieldRequest) returns (ListFieldResponse) {
  option (google.api.http) ={
    get: "/v1/field"
  };
}
    // Update Field
    rpc UpdateField(UpdateFieldRequest) returns (UpdateFieldResponse) {
        option (google.api.http) = {
            put: "/v1/field/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/field/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Field
    rpc DeleteField(DeleteFieldRequest) returns (DeleteFieldResponse) {
        option (google.api.http) = {
            delete: "/v1/field/{ID}"
        };
    }
  
  // CreateHomePage takes a HomePage object to create.
  rpc CreateHomePage(CreateHomePageRequest) returns (CreateHomePageResponse) {
    option (google.api.http) ={
      post: "/v1/homepage"
      body: "*"
    };
  }
  // GetHomePage takes an ID and returns a single HomePage.
  rpc GetHomePage(GetHomePageRequest) returns (GetHomePageResponse) {
    option (google.api.http) ={
      get: "/v1/homepage/{ID}"
    };
  }
    // List HomePage, takes filters, limit, and cursor param.
  rpc ListHomePage(ListHomePageRequest) returns (ListHomePageResponse) {
  option (google.api.http) ={
    get: "/v1/homepage"
  };
}
    // Update HomePage
    rpc UpdateHomePage(UpdateHomePageRequest) returns (UpdateHomePageResponse) {
        option (google.api.http) = {
            put: "/v1/homepage/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/homepage/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete HomePage
    rpc DeleteHomePage(DeleteHomePageRequest) returns (DeleteHomePageResponse) {
        option (google.api.http) = {
            delete: "/v1/homepage/{ID}"
        };
    }
  
  // CreateLayout takes a Layout object to create.
  rpc CreateLayout(CreateLayoutRequest) returns (CreateLayoutResponse) {
    option (google.api.http) ={
      post: "/v1/layout"
      body: "*"
    };
  }
  // GetLayout takes an ID and returns a single Layout.
  rpc GetLayout(GetLayoutRequest) returns (GetLayoutResponse) {
    option (google.api.http) ={
      get: "/v1/layout/{ID}"
    };
  }
    // List Layout, takes filters, limit, and cursor param.
  rpc ListLayout(ListLayoutRequest) returns (ListLayoutResponse) {
  option (google.api.http) ={
    get: "/v1/layout"
  };
}
    // Update Layout
    rpc UpdateLayout(UpdateLayoutRequest) returns (UpdateLayoutResponse) {
        option (google.api.http) = {
            put: "/v1/layout/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/layout/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Layout
    rpc DeleteLayout(DeleteLayoutRequest) returns (DeleteLayoutResponse) {
        option (google.api.http) = {
            delete: "/v1/layout/{ID}"
        };
    }
  
  // CreateLandingPage takes a LandingPage object to create.
  rpc CreateLandingPage(CreateLandingPageRequest) returns (CreateLandingPageResponse) {
    option (google.api.http) ={
      post: "/v1/landingpage"
      body: "*"
    };
  }
  // GetLandingPage takes an ID and returns a single LandingPage.
  rpc GetLandingPage(GetLandingPageRequest) returns (GetLandingPageResponse) {
    option (google.api.http) ={
      get: "/v1/landingpage/{ID}"
    };
  }
    // List LandingPage, takes filters, limit, and cursor param.
  rpc ListLandingPage(ListLandingPageRequest) returns (ListLandingPageResponse) {
  option (google.api.http) ={
    get: "/v1/landingpage"
  };
}
    // Update LandingPage
    rpc UpdateLandingPage(UpdateLandingPageRequest) returns (UpdateLandingPageResponse) {
        option (google.api.http) = {
            put: "/v1/landingpage/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/landingpage/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LandingPage
    rpc DeleteLandingPage(DeleteLandingPageRequest) returns (DeleteLandingPageResponse) {
        option (google.api.http) = {
            delete: "/v1/landingpage/{ID}"
        };
    }
  
  // CreateExperiment takes a Experiment object to create.
  rpc CreateExperiment(CreateExperimentRequest) returns (CreateExperimentResponse) {
    option (google.api.http) ={
      post: "/v1/experiment"
      body: "*"
    };
  }
  // GetExperiment takes an ID and returns a single Experiment.
  rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse) {
    option (google.api.http) ={
      get: "/v1/experiment/{ID}"
    };
  }
    // List Experiment, takes filters, limit, and cursor param.
  rpc ListExperiment(ListExperimentRequest) returns (ListExperimentResponse) {
  option (google.api.http) ={
    get: "/v1/experiment"
  };
}
    // Update Experiment
    rpc UpdateExperiment(UpdateExperimentRequest) returns (UpdateExperimentResponse) {
        option (google.api.http) = {
            put: "/v1/experiment/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/experiment/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Experiment
    rpc DeleteExperiment(DeleteExperimentRequest) returns (DeleteExperimentResponse) {
        option (google.api.http) = {
            delete: "/v1/experiment/{ID}"
        };
    }
  
  // CreateIssue takes a Issue object to create.
  rpc CreateIssue(CreateIssueRequest) returns (CreateIssueResponse) {
    option (google.api.http) ={
      post: "/v1/issue"
      body: "*"
    };
  }
  // GetIssue takes an ID and returns a single Issue.
  rpc GetIssue(GetIssueRequest) returns (GetIssueResponse) {
    option (google.api.http) ={
      get: "/v1/issue/{ID}"
    };
  }
    // List Issue, takes filters, limit, and cursor param.
  rpc ListIssue(ListIssueRequest) returns (ListIssueResponse) {
  option (google.api.http) ={
    get: "/v1/issue"
  };
}
    // Update Issue
    rpc UpdateIssue(UpdateIssueRequest) returns (UpdateIssueResponse) {
        option (google.api.http) = {
            put: "/v1/issue/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/issue/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Issue
    rpc DeleteIssue(DeleteIssueRequest) returns (DeleteIssueResponse) {
        option (google.api.http) = {
            delete: "/v1/issue/{ID}"
        };
    }
  
  // CreateCandidate takes a Candidate object to create.
  rpc CreateCandidate(CreateCandidateRequest) returns (CreateCandidateResponse) {
    option (google.api.http) ={
      post: "/v1/candidate"
      body: "*"
    };
  }
  // GetCandidate takes an ID and returns a single Candidate.
  rpc GetCandidate(GetCandidateRequest) returns (GetCandidateResponse) {
    option (google.api.http) ={
      get: "/v1/candidate/{ID}"
    };
  }
    // List Candidate, takes filters, limit, and cursor param.
  rpc ListCandidate(ListCandidateRequest) returns (ListCandidateResponse) {
  option (google.api.http) ={
    get: "/v1/candidate"
  };
}
    // Update Candidate
    rpc UpdateCandidate(UpdateCandidateRequest) returns (UpdateCandidateResponse) {
        option (google.api.http) = {
            put: "/v1/candidate/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/candidate/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Candidate
    rpc DeleteCandidate(DeleteCandidateRequest) returns (DeleteCandidateResponse) {
        option (google.api.http) = {
            delete: "/v1/candidate/{ID}"
        };
    }
  
  // CreateDistrictType takes a DistrictType object to create.
  rpc CreateDistrictType(CreateDistrictTypeRequest) returns (CreateDistrictTypeResponse) {
    option (google.api.http) ={
      post: "/v1/districttype"
      body: "*"
    };
  }
  // GetDistrictType takes an ID and returns a single DistrictType.
  rpc GetDistrictType(GetDistrictTypeRequest) returns (GetDistrictTypeResponse) {
    option (google.api.http) ={
      get: "/v1/districttype/{ID}"
    };
  }
    // List DistrictType, takes filters, limit, and cursor param.
  rpc ListDistrictType(ListDistrictTypeRequest) returns (ListDistrictTypeResponse) {
  option (google.api.http) ={
    get: "/v1/districttype"
  };
}
    // Update DistrictType
    rpc UpdateDistrictType(UpdateDistrictTypeRequest) returns (UpdateDistrictTypeResponse) {
        option (google.api.http) = {
            put: "/v1/districttype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/districttype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete DistrictType
    rpc DeleteDistrictType(DeleteDistrictTypeRequest) returns (DeleteDistrictTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/districttype/{ID}"
        };
    }
  
  // CreateDistrict takes a District object to create.
  rpc CreateDistrict(CreateDistrictRequest) returns (CreateDistrictResponse) {
    option (google.api.http) ={
      post: "/v1/district"
      body: "*"
    };
  }
  // GetDistrict takes an ID and returns a single District.
  rpc GetDistrict(GetDistrictRequest) returns (GetDistrictResponse) {
    option (google.api.http) ={
      get: "/v1/district/{ID}"
    };
  }
    // List District, takes filters, limit, and cursor param.
  rpc ListDistrict(ListDistrictRequest) returns (ListDistrictResponse) {
  option (google.api.http) ={
    get: "/v1/district"
  };
}
    // Update District
    rpc UpdateDistrict(UpdateDistrictRequest) returns (UpdateDistrictResponse) {
        option (google.api.http) = {
            put: "/v1/district/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/district/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete District
    rpc DeleteDistrict(DeleteDistrictRequest) returns (DeleteDistrictResponse) {
        option (google.api.http) = {
            delete: "/v1/district/{ID}"
        };
    }
  
  // CreateOffice takes a Office object to create.
  rpc CreateOffice(CreateOfficeRequest) returns (CreateOfficeResponse) {
    option (google.api.http) ={
      post: "/v1/office"
      body: "*"
    };
  }
  // GetOffice takes an ID and returns a single Office.
  rpc GetOffice(GetOfficeRequest) returns (GetOfficeResponse) {
    option (google.api.http) ={
      get: "/v1/office/{ID}"
    };
  }
    // List Office, takes filters, limit, and cursor param.
  rpc ListOffice(ListOfficeRequest) returns (ListOfficeResponse) {
  option (google.api.http) ={
    get: "/v1/office"
  };
}
    // Update Office
    rpc UpdateOffice(UpdateOfficeRequest) returns (UpdateOfficeResponse) {
        option (google.api.http) = {
            put: "/v1/office/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/office/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Office
    rpc DeleteOffice(DeleteOfficeRequest) returns (DeleteOfficeResponse) {
        option (google.api.http) = {
            delete: "/v1/office/{ID}"
        };
    }
  
  // CreatePollItem takes a PollItem object to create.
  rpc CreatePollItem(CreatePollItemRequest) returns (CreatePollItemResponse) {
    option (google.api.http) ={
      post: "/v1/pollitem"
      body: "*"
    };
  }
  // GetPollItem takes an ID and returns a single PollItem.
  rpc GetPollItem(GetPollItemRequest) returns (GetPollItemResponse) {
    option (google.api.http) ={
      get: "/v1/pollitem/{ID}"
    };
  }
    // List PollItem, takes filters, limit, and cursor param.
  rpc ListPollItem(ListPollItemRequest) returns (ListPollItemResponse) {
  option (google.api.http) ={
    get: "/v1/pollitem"
  };
}
    // Update PollItem
    rpc UpdatePollItem(UpdatePollItemRequest) returns (UpdatePollItemResponse) {
        option (google.api.http) = {
            put: "/v1/pollitem/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/pollitem/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PollItem
    rpc DeletePollItem(DeletePollItemRequest) returns (DeletePollItemResponse) {
        option (google.api.http) = {
            delete: "/v1/pollitem/{ID}"
        };
    }
  
  // CreateVolunteerOpportunityType takes a VolunteerOpportunityType object to create.
  rpc CreateVolunteerOpportunityType(CreateVolunteerOpportunityTypeRequest) returns (CreateVolunteerOpportunityTypeResponse) {
    option (google.api.http) ={
      post: "/v1/volunteeropportunitytype"
      body: "*"
    };
  }
  // GetVolunteerOpportunityType takes an ID and returns a single VolunteerOpportunityType.
  rpc GetVolunteerOpportunityType(GetVolunteerOpportunityTypeRequest) returns (GetVolunteerOpportunityTypeResponse) {
    option (google.api.http) ={
      get: "/v1/volunteeropportunitytype/{ID}"
    };
  }
    // List VolunteerOpportunityType, takes filters, limit, and cursor param.
  rpc ListVolunteerOpportunityType(ListVolunteerOpportunityTypeRequest) returns (ListVolunteerOpportunityTypeResponse) {
  option (google.api.http) ={
    get: "/v1/volunteeropportunitytype"
  };
}
    // Update VolunteerOpportunityType
    rpc UpdateVolunteerOpportunityType(UpdateVolunteerOpportunityTypeRequest) returns (UpdateVolunteerOpportunityTypeResponse) {
        option (google.api.http) = {
            put: "/v1/volunteeropportunitytype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunitytype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunityType
    rpc DeleteVolunteerOpportunityType(DeleteVolunteerOpportunityTypeRequest) returns (DeleteVolunteerOpportunityTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/volunteeropportunitytype/{ID}"
        };
    }
  
  // CreateLiveEventType takes a LiveEventType object to create.
  rpc CreateLiveEventType(CreateLiveEventTypeRequest) returns (CreateLiveEventTypeResponse) {
    option (google.api.http) ={
      post: "/v1/liveeventtype"
      body: "*"
    };
  }
  // GetLiveEventType takes an ID and returns a single LiveEventType.
  rpc GetLiveEventType(GetLiveEventTypeRequest) returns (GetLiveEventTypeResponse) {
    option (google.api.http) ={
      get: "/v1/liveeventtype/{ID}"
    };
  }
    // List LiveEventType, takes filters, limit, and cursor param.
  rpc ListLiveEventType(ListLiveEventTypeRequest) returns (ListLiveEventTypeResponse) {
  option (google.api.http) ={
    get: "/v1/liveeventtype"
  };
}
    // Update LiveEventType
    rpc UpdateLiveEventType(UpdateLiveEventTypeRequest) returns (UpdateLiveEventTypeResponse) {
        option (google.api.http) = {
            put: "/v1/liveeventtype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveeventtype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LiveEventType
    rpc DeleteLiveEventType(DeleteLiveEventTypeRequest) returns (DeleteLiveEventTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/liveeventtype/{ID}"
        };
    }
  
  // CreateCompany takes a Company object to create.
  rpc CreateCompany(CreateCompanyRequest) returns (CreateCompanyResponse) {
    option (google.api.http) ={
      post: "/v1/company"
      body: "*"
    };
  }
  // GetCompany takes an ID and returns a single Company.
  rpc GetCompany(GetCompanyRequest) returns (GetCompanyResponse) {
    option (google.api.http) ={
      get: "/v1/company/{ID}"
    };
  }
    // List Company, takes filters, limit, and cursor param.
  rpc ListCompany(ListCompanyRequest) returns (ListCompanyResponse) {
  option (google.api.http) ={
    get: "/v1/company"
  };
}
    // Update Company
    rpc UpdateCompany(UpdateCompanyRequest) returns (UpdateCompanyResponse) {
        option (google.api.http) = {
            put: "/v1/company/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/company/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Company
    rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse) {
        option (google.api.http) = {
            delete: "/v1/company/{ID}"
        };
    }
  
  // CreateProductType takes a ProductType object to create.
  rpc CreateProductType(CreateProductTypeRequest) returns (CreateProductTypeResponse) {
    option (google.api.http) ={
      post: "/v1/producttype"
      body: "*"
    };
  }
  // GetProductType takes an ID and returns a single ProductType.
  rpc GetProductType(GetProductTypeRequest) returns (GetProductTypeResponse) {
    option (google.api.http) ={
      get: "/v1/producttype/{ID}"
    };
  }
    // List ProductType, takes filters, limit, and cursor param.
  rpc ListProductType(ListProductTypeRequest) returns (ListProductTypeResponse) {
  option (google.api.http) ={
    get: "/v1/producttype"
  };
}
    // Update ProductType
    rpc UpdateProductType(UpdateProductTypeRequest) returns (UpdateProductTypeResponse) {
        option (google.api.http) = {
            put: "/v1/producttype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/producttype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ProductType
    rpc DeleteProductType(DeleteProductTypeRequest) returns (DeleteProductTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/producttype/{ID}"
        };
    }
  
  // CreateCustomerCart takes a CustomerCart object to create.
  rpc CreateCustomerCart(CreateCustomerCartRequest) returns (CreateCustomerCartResponse) {
    option (google.api.http) ={
      post: "/v1/customercart"
      body: "*"
    };
  }
  // GetCustomerCart takes an ID and returns a single CustomerCart.
  rpc GetCustomerCart(GetCustomerCartRequest) returns (GetCustomerCartResponse) {
    option (google.api.http) ={
      get: "/v1/customercart/{ID}"
    };
  }
    // List CustomerCart, takes filters, limit, and cursor param.
  rpc ListCustomerCart(ListCustomerCartRequest) returns (ListCustomerCartResponse) {
  option (google.api.http) ={
    get: "/v1/customercart"
  };
}
    // Update CustomerCart
    rpc UpdateCustomerCart(UpdateCustomerCartRequest) returns (UpdateCustomerCartResponse) {
        option (google.api.http) = {
            put: "/v1/customercart/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/customercart/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete CustomerCart
    rpc DeleteCustomerCart(DeleteCustomerCartRequest) returns (DeleteCustomerCartResponse) {
        option (google.api.http) = {
            delete: "/v1/customercart/{ID}"
        };
    }
  
  // CreatePayment takes a Payment object to create.
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) ={
      post: "/v1/payment"
      body: "*"
    };
  }
  // GetPayment takes an ID and returns a single Payment.
  rpc GetPayment(GetPaymentRequest) returns (GetPaymentResponse) {
    option (google.api.http) ={
      get: "/v1/payment/{ID}"
    };
  }
    // List Payment, takes filters, limit, and cursor param.
  rpc ListPayment(ListPaymentRequest) returns (ListPaymentResponse) {
  option (google.api.http) ={
    get: "/v1/payment"
  };
}
    // Update Payment
    rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse) {
        option (google.api.http) = {
            put: "/v1/payment/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/payment/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Payment
    rpc DeletePayment(DeletePaymentRequest) returns (DeletePaymentResponse) {
        option (google.api.http) = {
            delete: "/v1/payment/{ID}"
        };
    }
  
  // CreateDelivery takes a Delivery object to create.
  rpc CreateDelivery(CreateDeliveryRequest) returns (CreateDeliveryResponse) {
    option (google.api.http) ={
      post: "/v1/delivery"
      body: "*"
    };
  }
  // GetDelivery takes an ID and returns a single Delivery.
  rpc GetDelivery(GetDeliveryRequest) returns (GetDeliveryResponse) {
    option (google.api.http) ={
      get: "/v1/delivery/{ID}"
    };
  }
    // List Delivery, takes filters, limit, and cursor param.
  rpc ListDelivery(ListDeliveryRequest) returns (ListDeliveryResponse) {
  option (google.api.http) ={
    get: "/v1/delivery"
  };
}
    // Update Delivery
    rpc UpdateDelivery(UpdateDeliveryRequest) returns (UpdateDeliveryResponse) {
        option (google.api.http) = {
            put: "/v1/delivery/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/delivery/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Delivery
    rpc DeleteDelivery(DeleteDeliveryRequest) returns (DeleteDeliveryResponse) {
        option (google.api.http) = {
            delete: "/v1/delivery/{ID}"
        };
    }
  
  // CreateBoycott takes a Boycott object to create.
  rpc CreateBoycott(CreateBoycottRequest) returns (CreateBoycottResponse) {
    option (google.api.http) ={
      post: "/v1/boycott"
      body: "*"
    };
  }
  // GetBoycott takes an ID and returns a single Boycott.
  rpc GetBoycott(GetBoycottRequest) returns (GetBoycottResponse) {
    option (google.api.http) ={
      get: "/v1/boycott/{ID}"
    };
  }
    // List Boycott, takes filters, limit, and cursor param.
  rpc ListBoycott(ListBoycottRequest) returns (ListBoycottResponse) {
  option (google.api.http) ={
    get: "/v1/boycott"
  };
}
    // Update Boycott
    rpc UpdateBoycott(UpdateBoycottRequest) returns (UpdateBoycottResponse) {
        option (google.api.http) = {
            put: "/v1/boycott/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/boycott/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Boycott
    rpc DeleteBoycott(DeleteBoycottRequest) returns (DeleteBoycottResponse) {
        option (google.api.http) = {
            delete: "/v1/boycott/{ID}"
        };
    }
  
  // CreateBoycottMembership takes a BoycottMembership object to create.
  rpc CreateBoycottMembership(CreateBoycottMembershipRequest) returns (CreateBoycottMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/boycottmembership"
      body: "*"
    };
  }
  // GetBoycottMembership takes an ID and returns a single BoycottMembership.
  rpc GetBoycottMembership(GetBoycottMembershipRequest) returns (GetBoycottMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/boycottmembership/{ID}"
    };
  }
    // List BoycottMembership, takes filters, limit, and cursor param.
  rpc ListBoycottMembership(ListBoycottMembershipRequest) returns (ListBoycottMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/boycottmembership"
  };
}
    // Update BoycottMembership
    rpc UpdateBoycottMembership(UpdateBoycottMembershipRequest) returns (UpdateBoycottMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/boycottmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/boycottmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete BoycottMembership
    rpc DeleteBoycottMembership(DeleteBoycottMembershipRequest) returns (DeleteBoycottMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/boycottmembership/{ID}"
        };
    }
  
  // CreateElection takes a Election object to create.
  rpc CreateElection(CreateElectionRequest) returns (CreateElectionResponse) {
    option (google.api.http) ={
      post: "/v1/election"
      body: "*"
    };
  }
  // GetElection takes an ID and returns a single Election.
  rpc GetElection(GetElectionRequest) returns (GetElectionResponse) {
    option (google.api.http) ={
      get: "/v1/election/{ID}"
    };
  }
    // List Election, takes filters, limit, and cursor param.
  rpc ListElection(ListElectionRequest) returns (ListElectionResponse) {
  option (google.api.http) ={
    get: "/v1/election"
  };
}
    // Update Election
    rpc UpdateElection(UpdateElectionRequest) returns (UpdateElectionResponse) {
        option (google.api.http) = {
            put: "/v1/election/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/election/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Election
    rpc DeleteElection(DeleteElectionRequest) returns (DeleteElectionResponse) {
        option (google.api.http) = {
            delete: "/v1/election/{ID}"
        };
    }
  
  // CreateElectionMembership takes a ElectionMembership object to create.
  rpc CreateElectionMembership(CreateElectionMembershipRequest) returns (CreateElectionMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/electionmembership"
      body: "*"
    };
  }
  // GetElectionMembership takes an ID and returns a single ElectionMembership.
  rpc GetElectionMembership(GetElectionMembershipRequest) returns (GetElectionMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/electionmembership/{ID}"
    };
  }
    // List ElectionMembership, takes filters, limit, and cursor param.
  rpc ListElectionMembership(ListElectionMembershipRequest) returns (ListElectionMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/electionmembership"
  };
}
    // Update ElectionMembership
    rpc UpdateElectionMembership(UpdateElectionMembershipRequest) returns (UpdateElectionMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/electionmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/electionmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ElectionMembership
    rpc DeleteElectionMembership(DeleteElectionMembershipRequest) returns (DeleteElectionMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/electionmembership/{ID}"
        };
    }
  
  // CreatePetitionMembership takes a PetitionMembership object to create.
  rpc CreatePetitionMembership(CreatePetitionMembershipRequest) returns (CreatePetitionMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/petitionmembership"
      body: "*"
    };
  }
  // GetPetitionMembership takes an ID and returns a single PetitionMembership.
  rpc GetPetitionMembership(GetPetitionMembershipRequest) returns (GetPetitionMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/petitionmembership/{ID}"
    };
  }
    // List PetitionMembership, takes filters, limit, and cursor param.
  rpc ListPetitionMembership(ListPetitionMembershipRequest) returns (ListPetitionMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/petitionmembership"
  };
}
    // Update PetitionMembership
    rpc UpdatePetitionMembership(UpdatePetitionMembershipRequest) returns (UpdatePetitionMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/petitionmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/petitionmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PetitionMembership
    rpc DeletePetitionMembership(DeletePetitionMembershipRequest) returns (DeletePetitionMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/petitionmembership/{ID}"
        };
    }
  
  // CreatePollMembership takes a PollMembership object to create.
  rpc CreatePollMembership(CreatePollMembershipRequest) returns (CreatePollMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/pollmembership"
      body: "*"
    };
  }
  // GetPollMembership takes an ID and returns a single PollMembership.
  rpc GetPollMembership(GetPollMembershipRequest) returns (GetPollMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/pollmembership/{ID}"
    };
  }
    // List PollMembership, takes filters, limit, and cursor param.
  rpc ListPollMembership(ListPollMembershipRequest) returns (ListPollMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/pollmembership"
  };
}
    // Update PollMembership
    rpc UpdatePollMembership(UpdatePollMembershipRequest) returns (UpdatePollMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/pollmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/pollmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PollMembership
    rpc DeletePollMembership(DeletePollMembershipRequest) returns (DeletePollMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/pollmembership/{ID}"
        };
    }
  
  // CreateVolunteerOpportunityMembership takes a VolunteerOpportunityMembership object to create.
  rpc CreateVolunteerOpportunityMembership(CreateVolunteerOpportunityMembershipRequest) returns (CreateVolunteerOpportunityMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/volunteeropportunitymembership"
      body: "*"
    };
  }
  // GetVolunteerOpportunityMembership takes an ID and returns a single VolunteerOpportunityMembership.
  rpc GetVolunteerOpportunityMembership(GetVolunteerOpportunityMembershipRequest) returns (GetVolunteerOpportunityMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/volunteeropportunitymembership/{ID}"
    };
  }
    // List VolunteerOpportunityMembership, takes filters, limit, and cursor param.
  rpc ListVolunteerOpportunityMembership(ListVolunteerOpportunityMembershipRequest) returns (ListVolunteerOpportunityMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/volunteeropportunitymembership"
  };
}
    // Update VolunteerOpportunityMembership
    rpc UpdateVolunteerOpportunityMembership(UpdateVolunteerOpportunityMembershipRequest) returns (UpdateVolunteerOpportunityMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/volunteeropportunitymembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunitymembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunityMembership
    rpc DeleteVolunteerOpportunityMembership(DeleteVolunteerOpportunityMembershipRequest) returns (DeleteVolunteerOpportunityMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/volunteeropportunitymembership/{ID}"
        };
    }
  
  // CreateLiveEventMembership takes a LiveEventMembership object to create.
  rpc CreateLiveEventMembership(CreateLiveEventMembershipRequest) returns (CreateLiveEventMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/liveeventmembership"
      body: "*"
    };
  }
  // GetLiveEventMembership takes an ID and returns a single LiveEventMembership.
  rpc GetLiveEventMembership(GetLiveEventMembershipRequest) returns (GetLiveEventMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/liveeventmembership/{ID}"
    };
  }
    // List LiveEventMembership, takes filters, limit, and cursor param.
  rpc ListLiveEventMembership(ListLiveEventMembershipRequest) returns (ListLiveEventMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/liveeventmembership"
  };
}
    // Update LiveEventMembership
    rpc UpdateLiveEventMembership(UpdateLiveEventMembershipRequest) returns (UpdateLiveEventMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/liveeventmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveeventmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LiveEventMembership
    rpc DeleteLiveEventMembership(DeleteLiveEventMembershipRequest) returns (DeleteLiveEventMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/liveeventmembership/{ID}"
        };
    }
  
  // CreateProduct takes a Product object to create.
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
    option (google.api.http) ={
      post: "/v1/product"
      body: "*"
    };
  }
  // GetProduct takes an ID and returns a single Product.
  rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
    option (google.api.http) ={
      get: "/v1/product/{ID}"
    };
  }
    // List Product, takes filters, limit, and cursor param.
  rpc ListProduct(ListProductRequest) returns (ListProductResponse) {
  option (google.api.http) ={
    get: "/v1/product"
  };
}
    // Update Product
    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {
        option (google.api.http) = {
            put: "/v1/product/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/product/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Product
    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {
        option (google.api.http) = {
            delete: "/v1/product/{ID}"
        };
    }
  
  // CreateProductMembership takes a ProductMembership object to create.
  rpc CreateProductMembership(CreateProductMembershipRequest) returns (CreateProductMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/productmembership"
      body: "*"
    };
  }
  // GetProductMembership takes an ID and returns a single ProductMembership.
  rpc GetProductMembership(GetProductMembershipRequest) returns (GetProductMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/productmembership/{ID}"
    };
  }
    // List ProductMembership, takes filters, limit, and cursor param.
  rpc ListProductMembership(ListProductMembershipRequest) returns (ListProductMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/productmembership"
  };
}
    // Update ProductMembership
    rpc UpdateProductMembership(UpdateProductMembershipRequest) returns (UpdateProductMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/productmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/productmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ProductMembership
    rpc DeleteProductMembership(DeleteProductMembershipRequest) returns (DeleteProductMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/productmembership/{ID}"
        };
    }
  
  // CreateDonationCampaign takes a DonationCampaign object to create.
  rpc CreateDonationCampaign(CreateDonationCampaignRequest) returns (CreateDonationCampaignResponse) {
    option (google.api.http) ={
      post: "/v1/donationcampaign"
      body: "*"
    };
  }
  // GetDonationCampaign takes an ID and returns a single DonationCampaign.
  rpc GetDonationCampaign(GetDonationCampaignRequest) returns (GetDonationCampaignResponse) {
    option (google.api.http) ={
      get: "/v1/donationcampaign/{ID}"
    };
  }
    // List DonationCampaign, takes filters, limit, and cursor param.
  rpc ListDonationCampaign(ListDonationCampaignRequest) returns (ListDonationCampaignResponse) {
  option (google.api.http) ={
    get: "/v1/donationcampaign"
  };
}
    // Update DonationCampaign
    rpc UpdateDonationCampaign(UpdateDonationCampaignRequest) returns (UpdateDonationCampaignResponse) {
        option (google.api.http) = {
            put: "/v1/donationcampaign/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/donationcampaign/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete DonationCampaign
    rpc DeleteDonationCampaign(DeleteDonationCampaignRequest) returns (DeleteDonationCampaignResponse) {
        option (google.api.http) = {
            delete: "/v1/donationcampaign/{ID}"
        };
    }
  
  // CreateDonationCampaignMembership takes a DonationCampaignMembership object to create.
  rpc CreateDonationCampaignMembership(CreateDonationCampaignMembershipRequest) returns (CreateDonationCampaignMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/donationcampaignmembership"
      body: "*"
    };
  }
  // GetDonationCampaignMembership takes an ID and returns a single DonationCampaignMembership.
  rpc GetDonationCampaignMembership(GetDonationCampaignMembershipRequest) returns (GetDonationCampaignMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/donationcampaignmembership/{ID}"
    };
  }
    // List DonationCampaignMembership, takes filters, limit, and cursor param.
  rpc ListDonationCampaignMembership(ListDonationCampaignMembershipRequest) returns (ListDonationCampaignMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/donationcampaignmembership"
  };
}
    // Update DonationCampaignMembership
    rpc UpdateDonationCampaignMembership(UpdateDonationCampaignMembershipRequest) returns (UpdateDonationCampaignMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/donationcampaignmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/donationcampaignmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete DonationCampaignMembership
    rpc DeleteDonationCampaignMembership(DeleteDonationCampaignMembershipRequest) returns (DeleteDonationCampaignMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/donationcampaignmembership/{ID}"
        };
    }
  
  // CreatePetition takes a Petition object to create.
  rpc CreatePetition(CreatePetitionRequest) returns (CreatePetitionResponse) {
    option (google.api.http) ={
      post: "/v1/petition"
      body: "*"
    };
  }
  // GetPetition takes an ID and returns a single Petition.
  rpc GetPetition(GetPetitionRequest) returns (GetPetitionResponse) {
    option (google.api.http) ={
      get: "/v1/petition/{ID}"
    };
  }
    // List Petition, takes filters, limit, and cursor param.
  rpc ListPetition(ListPetitionRequest) returns (ListPetitionResponse) {
  option (google.api.http) ={
    get: "/v1/petition"
  };
}
    // Update Petition
    rpc UpdatePetition(UpdatePetitionRequest) returns (UpdatePetitionResponse) {
        option (google.api.http) = {
            put: "/v1/petition/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/petition/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Petition
    rpc DeletePetition(DeletePetitionRequest) returns (DeletePetitionResponse) {
        option (google.api.http) = {
            delete: "/v1/petition/{ID}"
        };
    }
  
  // CreatePetitionSigner takes a PetitionSigner object to create.
  rpc CreatePetitionSigner(CreatePetitionSignerRequest) returns (CreatePetitionSignerResponse) {
    option (google.api.http) ={
      post: "/v1/petitionsigner"
      body: "*"
    };
  }
  // GetPetitionSigner takes an ID and returns a single PetitionSigner.
  rpc GetPetitionSigner(GetPetitionSignerRequest) returns (GetPetitionSignerResponse) {
    option (google.api.http) ={
      get: "/v1/petitionsigner/{ID}"
    };
  }
    // List PetitionSigner, takes filters, limit, and cursor param.
  rpc ListPetitionSigner(ListPetitionSignerRequest) returns (ListPetitionSignerResponse) {
  option (google.api.http) ={
    get: "/v1/petitionsigner"
  };
}
    // Update PetitionSigner
    rpc UpdatePetitionSigner(UpdatePetitionSignerRequest) returns (UpdatePetitionSignerResponse) {
        option (google.api.http) = {
            put: "/v1/petitionsigner/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/petitionsigner/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PetitionSigner
    rpc DeletePetitionSigner(DeletePetitionSignerRequest) returns (DeletePetitionSignerResponse) {
        option (google.api.http) = {
            delete: "/v1/petitionsigner/{ID}"
        };
    }
  
  // CreatePoll takes a Poll object to create.
  rpc CreatePoll(CreatePollRequest) returns (CreatePollResponse) {
    option (google.api.http) ={
      post: "/v1/poll"
      body: "*"
    };
  }
  // GetPoll takes an ID and returns a single Poll.
  rpc GetPoll(GetPollRequest) returns (GetPollResponse) {
    option (google.api.http) ={
      get: "/v1/poll/{ID}"
    };
  }
    // List Poll, takes filters, limit, and cursor param.
  rpc ListPoll(ListPollRequest) returns (ListPollResponse) {
  option (google.api.http) ={
    get: "/v1/poll"
  };
}
    // Update Poll
    rpc UpdatePoll(UpdatePollRequest) returns (UpdatePollResponse) {
        option (google.api.http) = {
            put: "/v1/poll/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/poll/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Poll
    rpc DeletePoll(DeletePollRequest) returns (DeletePollResponse) {
        option (google.api.http) = {
            delete: "/v1/poll/{ID}"
        };
    }
  
  // CreatePollRespondant takes a PollRespondant object to create.
  rpc CreatePollRespondant(CreatePollRespondantRequest) returns (CreatePollRespondantResponse) {
    option (google.api.http) ={
      post: "/v1/pollrespondant"
      body: "*"
    };
  }
  // GetPollRespondant takes an ID and returns a single PollRespondant.
  rpc GetPollRespondant(GetPollRespondantRequest) returns (GetPollRespondantResponse) {
    option (google.api.http) ={
      get: "/v1/pollrespondant/{ID}"
    };
  }
    // List PollRespondant, takes filters, limit, and cursor param.
  rpc ListPollRespondant(ListPollRespondantRequest) returns (ListPollRespondantResponse) {
  option (google.api.http) ={
    get: "/v1/pollrespondant"
  };
}
    // Update PollRespondant
    rpc UpdatePollRespondant(UpdatePollRespondantRequest) returns (UpdatePollRespondantResponse) {
        option (google.api.http) = {
            put: "/v1/pollrespondant/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/pollrespondant/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete PollRespondant
    rpc DeletePollRespondant(DeletePollRespondantRequest) returns (DeletePollRespondantResponse) {
        option (google.api.http) = {
            delete: "/v1/pollrespondant/{ID}"
        };
    }
  
  // CreatePurchaser takes a Purchaser object to create.
  rpc CreatePurchaser(CreatePurchaserRequest) returns (CreatePurchaserResponse) {
    option (google.api.http) ={
      post: "/v1/purchaser"
      body: "*"
    };
  }
  // GetPurchaser takes an ID and returns a single Purchaser.
  rpc GetPurchaser(GetPurchaserRequest) returns (GetPurchaserResponse) {
    option (google.api.http) ={
      get: "/v1/purchaser/{ID}"
    };
  }
    // List Purchaser, takes filters, limit, and cursor param.
  rpc ListPurchaser(ListPurchaserRequest) returns (ListPurchaserResponse) {
  option (google.api.http) ={
    get: "/v1/purchaser"
  };
}
    // Update Purchaser
    rpc UpdatePurchaser(UpdatePurchaserRequest) returns (UpdatePurchaserResponse) {
        option (google.api.http) = {
            put: "/v1/purchaser/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/purchaser/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Purchaser
    rpc DeletePurchaser(DeletePurchaserRequest) returns (DeletePurchaserResponse) {
        option (google.api.http) = {
            delete: "/v1/purchaser/{ID}"
        };
    }
  
  // CreateCustomerOrder takes a CustomerOrder object to create.
  rpc CreateCustomerOrder(CreateCustomerOrderRequest) returns (CreateCustomerOrderResponse) {
    option (google.api.http) ={
      post: "/v1/customerorder"
      body: "*"
    };
  }
  // GetCustomerOrder takes an ID and returns a single CustomerOrder.
  rpc GetCustomerOrder(GetCustomerOrderRequest) returns (GetCustomerOrderResponse) {
    option (google.api.http) ={
      get: "/v1/customerorder/{ID}"
    };
  }
    // List CustomerOrder, takes filters, limit, and cursor param.
  rpc ListCustomerOrder(ListCustomerOrderRequest) returns (ListCustomerOrderResponse) {
  option (google.api.http) ={
    get: "/v1/customerorder"
  };
}
    // Update CustomerOrder
    rpc UpdateCustomerOrder(UpdateCustomerOrderRequest) returns (UpdateCustomerOrderResponse) {
        option (google.api.http) = {
            put: "/v1/customerorder/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/customerorder/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete CustomerOrder
    rpc DeleteCustomerOrder(DeleteCustomerOrderRequest) returns (DeleteCustomerOrderResponse) {
        option (google.api.http) = {
            delete: "/v1/customerorder/{ID}"
        };
    }
  
  // CreateDonor takes a Donor object to create.
  rpc CreateDonor(CreateDonorRequest) returns (CreateDonorResponse) {
    option (google.api.http) ={
      post: "/v1/donor"
      body: "*"
    };
  }
  // GetDonor takes an ID and returns a single Donor.
  rpc GetDonor(GetDonorRequest) returns (GetDonorResponse) {
    option (google.api.http) ={
      get: "/v1/donor/{ID}"
    };
  }
    // List Donor, takes filters, limit, and cursor param.
  rpc ListDonor(ListDonorRequest) returns (ListDonorResponse) {
  option (google.api.http) ={
    get: "/v1/donor"
  };
}
    // Update Donor
    rpc UpdateDonor(UpdateDonorRequest) returns (UpdateDonorResponse) {
        option (google.api.http) = {
            put: "/v1/donor/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/donor/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Donor
    rpc DeleteDonor(DeleteDonorRequest) returns (DeleteDonorResponse) {
        option (google.api.http) = {
            delete: "/v1/donor/{ID}"
        };
    }
  
  // CreateLiveEvent takes a LiveEvent object to create.
  rpc CreateLiveEvent(CreateLiveEventRequest) returns (CreateLiveEventResponse) {
    option (google.api.http) ={
      post: "/v1/liveevent"
      body: "*"
    };
  }
  // GetLiveEvent takes an ID and returns a single LiveEvent.
  rpc GetLiveEvent(GetLiveEventRequest) returns (GetLiveEventResponse) {
    option (google.api.http) ={
      get: "/v1/liveevent/{ID}"
    };
  }
    // List LiveEvent, takes filters, limit, and cursor param.
  rpc ListLiveEvent(ListLiveEventRequest) returns (ListLiveEventResponse) {
  option (google.api.http) ={
    get: "/v1/liveevent"
  };
}
    // Update LiveEvent
    rpc UpdateLiveEvent(UpdateLiveEventRequest) returns (UpdateLiveEventResponse) {
        option (google.api.http) = {
            put: "/v1/liveevent/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveevent/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete LiveEvent
    rpc DeleteLiveEvent(DeleteLiveEventRequest) returns (DeleteLiveEventResponse) {
        option (google.api.http) = {
            delete: "/v1/liveevent/{ID}"
        };
    }
  
  // CreateEventAttendee takes a EventAttendee object to create.
  rpc CreateEventAttendee(CreateEventAttendeeRequest) returns (CreateEventAttendeeResponse) {
    option (google.api.http) ={
      post: "/v1/eventattendee"
      body: "*"
    };
  }
  // GetEventAttendee takes an ID and returns a single EventAttendee.
  rpc GetEventAttendee(GetEventAttendeeRequest) returns (GetEventAttendeeResponse) {
    option (google.api.http) ={
      get: "/v1/eventattendee/{ID}"
    };
  }
    // List EventAttendee, takes filters, limit, and cursor param.
  rpc ListEventAttendee(ListEventAttendeeRequest) returns (ListEventAttendeeResponse) {
  option (google.api.http) ={
    get: "/v1/eventattendee"
  };
}
    // Update EventAttendee
    rpc UpdateEventAttendee(UpdateEventAttendeeRequest) returns (UpdateEventAttendeeResponse) {
        option (google.api.http) = {
            put: "/v1/eventattendee/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/eventattendee/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete EventAttendee
    rpc DeleteEventAttendee(DeleteEventAttendeeRequest) returns (DeleteEventAttendeeResponse) {
        option (google.api.http) = {
            delete: "/v1/eventattendee/{ID}"
        };
    }
  
  // CreateVoter takes a Voter object to create.
  rpc CreateVoter(CreateVoterRequest) returns (CreateVoterResponse) {
    option (google.api.http) ={
      post: "/v1/voter"
      body: "*"
    };
  }
  // GetVoter takes an ID and returns a single Voter.
  rpc GetVoter(GetVoterRequest) returns (GetVoterResponse) {
    option (google.api.http) ={
      get: "/v1/voter/{ID}"
    };
  }
    // List Voter, takes filters, limit, and cursor param.
  rpc ListVoter(ListVoterRequest) returns (ListVoterResponse) {
  option (google.api.http) ={
    get: "/v1/voter"
  };
}
    // Update Voter
    rpc UpdateVoter(UpdateVoterRequest) returns (UpdateVoterResponse) {
        option (google.api.http) = {
            put: "/v1/voter/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/voter/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Voter
    rpc DeleteVoter(DeleteVoterRequest) returns (DeleteVoterResponse) {
        option (google.api.http) = {
            delete: "/v1/voter/{ID}"
        };
    }
  
  // CreateVolunteerOpportunity takes a VolunteerOpportunity object to create.
  rpc CreateVolunteerOpportunity(CreateVolunteerOpportunityRequest) returns (CreateVolunteerOpportunityResponse) {
    option (google.api.http) ={
      post: "/v1/volunteeropportunity"
      body: "*"
    };
  }
  // GetVolunteerOpportunity takes an ID and returns a single VolunteerOpportunity.
  rpc GetVolunteerOpportunity(GetVolunteerOpportunityRequest) returns (GetVolunteerOpportunityResponse) {
    option (google.api.http) ={
      get: "/v1/volunteeropportunity/{ID}"
    };
  }
    // List VolunteerOpportunity, takes filters, limit, and cursor param.
  rpc ListVolunteerOpportunity(ListVolunteerOpportunityRequest) returns (ListVolunteerOpportunityResponse) {
  option (google.api.http) ={
    get: "/v1/volunteeropportunity"
  };
}
    // Update VolunteerOpportunity
    rpc UpdateVolunteerOpportunity(UpdateVolunteerOpportunityRequest) returns (UpdateVolunteerOpportunityResponse) {
        option (google.api.http) = {
            put: "/v1/volunteeropportunity/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunity/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunity
    rpc DeleteVolunteerOpportunity(DeleteVolunteerOpportunityRequest) returns (DeleteVolunteerOpportunityResponse) {
        option (google.api.http) = {
            delete: "/v1/volunteeropportunity/{ID}"
        };
    }
  
  // CreateVolunteer takes a Volunteer object to create.
  rpc CreateVolunteer(CreateVolunteerRequest) returns (CreateVolunteerResponse) {
    option (google.api.http) ={
      post: "/v1/volunteer"
      body: "*"
    };
  }
  // GetVolunteer takes an ID and returns a single Volunteer.
  rpc GetVolunteer(GetVolunteerRequest) returns (GetVolunteerResponse) {
    option (google.api.http) ={
      get: "/v1/volunteer/{ID}"
    };
  }
    // List Volunteer, takes filters, limit, and cursor param.
  rpc ListVolunteer(ListVolunteerRequest) returns (ListVolunteerResponse) {
  option (google.api.http) ={
    get: "/v1/volunteer"
  };
}
    // Update Volunteer
    rpc UpdateVolunteer(UpdateVolunteerRequest) returns (UpdateVolunteerResponse) {
        option (google.api.http) = {
            put: "/v1/volunteer/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteer/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Volunteer
    rpc DeleteVolunteer(DeleteVolunteerRequest) returns (DeleteVolunteerResponse) {
        option (google.api.http) = {
            delete: "/v1/volunteer/{ID}"
        };
    }
  
  // CreateFollower takes a Follower object to create.
  rpc CreateFollower(CreateFollowerRequest) returns (CreateFollowerResponse) {
    option (google.api.http) ={
      post: "/v1/follower"
      body: "*"
    };
  }
  // GetFollower takes an ID and returns a single Follower.
  rpc GetFollower(GetFollowerRequest) returns (GetFollowerResponse) {
    option (google.api.http) ={
      get: "/v1/follower/{ID}"
    };
  }
    // List Follower, takes filters, limit, and cursor param.
  rpc ListFollower(ListFollowerRequest) returns (ListFollowerResponse) {
  option (google.api.http) ={
    get: "/v1/follower"
  };
}
    // Update Follower
    rpc UpdateFollower(UpdateFollowerRequest) returns (UpdateFollowerResponse) {
        option (google.api.http) = {
            put: "/v1/follower/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/follower/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Follower
    rpc DeleteFollower(DeleteFollowerRequest) returns (DeleteFollowerResponse) {
        option (google.api.http) = {
            delete: "/v1/follower/{ID}"
        };
    }
  
  // CreateTerritory takes a Territory object to create.
  rpc CreateTerritory(CreateTerritoryRequest) returns (CreateTerritoryResponse) {
    option (google.api.http) ={
      post: "/v1/territory"
      body: "*"
    };
  }
  // GetTerritory takes an ID and returns a single Territory.
  rpc GetTerritory(GetTerritoryRequest) returns (GetTerritoryResponse) {
    option (google.api.http) ={
      get: "/v1/territory/{ID}"
    };
  }
    // List Territory, takes filters, limit, and cursor param.
  rpc ListTerritory(ListTerritoryRequest) returns (ListTerritoryResponse) {
  option (google.api.http) ={
    get: "/v1/territory"
  };
}
    // Update Territory
    rpc UpdateTerritory(UpdateTerritoryRequest) returns (UpdateTerritoryResponse) {
        option (google.api.http) = {
            put: "/v1/territory/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/territory/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Territory
    rpc DeleteTerritory(DeleteTerritoryRequest) returns (DeleteTerritoryResponse) {
        option (google.api.http) = {
            delete: "/v1/territory/{ID}"
        };
    }
  
  // CreateActivityType takes a ActivityType object to create.
  rpc CreateActivityType(CreateActivityTypeRequest) returns (CreateActivityTypeResponse) {
    option (google.api.http) ={
      post: "/v1/activitytype"
      body: "*"
    };
  }
  // GetActivityType takes an ID and returns a single ActivityType.
  rpc GetActivityType(GetActivityTypeRequest) returns (GetActivityTypeResponse) {
    option (google.api.http) ={
      get: "/v1/activitytype/{ID}"
    };
  }
    // List ActivityType, takes filters, limit, and cursor param.
  rpc ListActivityType(ListActivityTypeRequest) returns (ListActivityTypeResponse) {
  option (google.api.http) ={
    get: "/v1/activitytype"
  };
}
    // Update ActivityType
    rpc UpdateActivityType(UpdateActivityTypeRequest) returns (UpdateActivityTypeResponse) {
        option (google.api.http) = {
            put: "/v1/activitytype/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/activitytype/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ActivityType
    rpc DeleteActivityType(DeleteActivityTypeRequest) returns (DeleteActivityTypeResponse) {
        option (google.api.http) = {
            delete: "/v1/activitytype/{ID}"
        };
    }
  
  // CreateActivity takes a Activity object to create.
  rpc CreateActivity(CreateActivityRequest) returns (CreateActivityResponse) {
    option (google.api.http) ={
      post: "/v1/activity"
      body: "*"
    };
  }
  // GetActivity takes an ID and returns a single Activity.
  rpc GetActivity(GetActivityRequest) returns (GetActivityResponse) {
    option (google.api.http) ={
      get: "/v1/activity/{ID}"
    };
  }
    // List Activity, takes filters, limit, and cursor param.
  rpc ListActivity(ListActivityRequest) returns (ListActivityResponse) {
  option (google.api.http) ={
    get: "/v1/activity"
  };
}
    // Update Activity
    rpc UpdateActivity(UpdateActivityRequest) returns (UpdateActivityResponse) {
        option (google.api.http) = {
            put: "/v1/activity/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/activity/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Activity
    rpc DeleteActivity(DeleteActivityRequest) returns (DeleteActivityResponse) {
        option (google.api.http) = {
            delete: "/v1/activity/{ID}"
        };
    }
  
  // CreateNote takes a Note object to create.
  rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse) {
    option (google.api.http) ={
      post: "/v1/note"
      body: "*"
    };
  }
  // GetNote takes an ID and returns a single Note.
  rpc GetNote(GetNoteRequest) returns (GetNoteResponse) {
    option (google.api.http) ={
      get: "/v1/note/{ID}"
    };
  }
    // List Note, takes filters, limit, and cursor param.
  rpc ListNote(ListNoteRequest) returns (ListNoteResponse) {
  option (google.api.http) ={
    get: "/v1/note"
  };
}
    // Update Note
    rpc UpdateNote(UpdateNoteRequest) returns (UpdateNoteResponse) {
        option (google.api.http) = {
            put: "/v1/note/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/note/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Note
    rpc DeleteNote(DeleteNoteRequest) returns (DeleteNoteResponse) {
        option (google.api.http) = {
            delete: "/v1/note/{ID}"
        };
    }
  
  // CreateAccount takes a Account object to create.
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) ={
      post: "/v1/account"
      body: "*"
    };
  }
  // GetAccount takes an ID and returns a single Account.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) ={
      get: "/v1/account/{ID}"
    };
  }
    // List Account, takes filters, limit, and cursor param.
  rpc ListAccount(ListAccountRequest) returns (ListAccountResponse) {
  option (google.api.http) ={
    get: "/v1/account"
  };
}
    // Update Account
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            put: "/v1/account/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/account/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Account
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            delete: "/v1/account/{ID}"
        };
    }
  
  // CreateOwnerMembership takes a OwnerMembership object to create.
  rpc CreateOwnerMembership(CreateOwnerMembershipRequest) returns (CreateOwnerMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/ownermembership"
      body: "*"
    };
  }
  // GetOwnerMembership takes an ID and returns a single OwnerMembership.
  rpc GetOwnerMembership(GetOwnerMembershipRequest) returns (GetOwnerMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/ownermembership/{ID}"
    };
  }
    // List OwnerMembership, takes filters, limit, and cursor param.
  rpc ListOwnerMembership(ListOwnerMembershipRequest) returns (ListOwnerMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/ownermembership"
  };
}
    // Update OwnerMembership
    rpc UpdateOwnerMembership(UpdateOwnerMembershipRequest) returns (UpdateOwnerMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/ownermembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/ownermembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete OwnerMembership
    rpc DeleteOwnerMembership(DeleteOwnerMembershipRequest) returns (DeleteOwnerMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/ownermembership/{ID}"
        };
    }
  
  // CreateContact takes a Contact object to create.
  rpc CreateContact(CreateContactRequest) returns (CreateContactResponse) {
    option (google.api.http) ={
      post: "/v1/contact"
      body: "*"
    };
  }
  // GetContact takes an ID and returns a single Contact.
  rpc GetContact(GetContactRequest) returns (GetContactResponse) {
    option (google.api.http) ={
      get: "/v1/contact/{ID}"
    };
  }
    // List Contact, takes filters, limit, and cursor param.
  rpc ListContact(ListContactRequest) returns (ListContactResponse) {
  option (google.api.http) ={
    get: "/v1/contact"
  };
}
    // Update Contact
    rpc UpdateContact(UpdateContactRequest) returns (UpdateContactResponse) {
        option (google.api.http) = {
            put: "/v1/contact/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/contact/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Contact
    rpc DeleteContact(DeleteContactRequest) returns (DeleteContactResponse) {
        option (google.api.http) = {
            delete: "/v1/contact/{ID}"
        };
    }
  
  // CreateContactMembership takes a ContactMembership object to create.
  rpc CreateContactMembership(CreateContactMembershipRequest) returns (CreateContactMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/contactmembership"
      body: "*"
    };
  }
  // GetContactMembership takes an ID and returns a single ContactMembership.
  rpc GetContactMembership(GetContactMembershipRequest) returns (GetContactMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/contactmembership/{ID}"
    };
  }
    // List ContactMembership, takes filters, limit, and cursor param.
  rpc ListContactMembership(ListContactMembershipRequest) returns (ListContactMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/contactmembership"
  };
}
    // Update ContactMembership
    rpc UpdateContactMembership(UpdateContactMembershipRequest) returns (UpdateContactMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/contactmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/contactmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete ContactMembership
    rpc DeleteContactMembership(DeleteContactMembershipRequest) returns (DeleteContactMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/contactmembership/{ID}"
        };
    }
  
  // CreateCause takes a Cause object to create.
  rpc CreateCause(CreateCauseRequest) returns (CreateCauseResponse) {
    option (google.api.http) ={
      post: "/v1/cause"
      body: "*"
    };
  }
  // GetCause takes an ID and returns a single Cause.
  rpc GetCause(GetCauseRequest) returns (GetCauseResponse) {
    option (google.api.http) ={
      get: "/v1/cause/{ID}"
    };
  }
    // List Cause, takes filters, limit, and cursor param.
  rpc ListCause(ListCauseRequest) returns (ListCauseResponse) {
  option (google.api.http) ={
    get: "/v1/cause"
  };
}
    // Update Cause
    rpc UpdateCause(UpdateCauseRequest) returns (UpdateCauseResponse) {
        option (google.api.http) = {
            put: "/v1/cause/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/cause/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Cause
    rpc DeleteCause(DeleteCauseRequest) returns (DeleteCauseResponse) {
        option (google.api.http) = {
            delete: "/v1/cause/{ID}"
        };
    }
  
  // CreateAgent takes a Agent object to create.
  rpc CreateAgent(CreateAgentRequest) returns (CreateAgentResponse) {
    option (google.api.http) ={
      post: "/v1/agent"
      body: "*"
    };
  }
  // GetAgent takes an ID and returns a single Agent.
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (google.api.http) ={
      get: "/v1/agent/{ID}"
    };
  }
    // List Agent, takes filters, limit, and cursor param.
  rpc ListAgent(ListAgentRequest) returns (ListAgentResponse) {
  option (google.api.http) ={
    get: "/v1/agent"
  };
}
    // Update Agent
    rpc UpdateAgent(UpdateAgentRequest) returns (UpdateAgentResponse) {
        option (google.api.http) = {
            put: "/v1/agent/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/agent/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete Agent
    rpc DeleteAgent(DeleteAgentRequest) returns (DeleteAgentResponse) {
        option (google.api.http) = {
            delete: "/v1/agent/{ID}"
        };
    }
  
  // CreateAgentMembership takes a AgentMembership object to create.
  rpc CreateAgentMembership(CreateAgentMembershipRequest) returns (CreateAgentMembershipResponse) {
    option (google.api.http) ={
      post: "/v1/agentmembership"
      body: "*"
    };
  }
  // GetAgentMembership takes an ID and returns a single AgentMembership.
  rpc GetAgentMembership(GetAgentMembershipRequest) returns (GetAgentMembershipResponse) {
    option (google.api.http) ={
      get: "/v1/agentmembership/{ID}"
    };
  }
    // List AgentMembership, takes filters, limit, and cursor param.
  rpc ListAgentMembership(ListAgentMembershipRequest) returns (ListAgentMembershipResponse) {
  option (google.api.http) ={
    get: "/v1/agentmembership"
  };
}
    // Update AgentMembership
    rpc UpdateAgentMembership(UpdateAgentMembershipRequest) returns (UpdateAgentMembershipResponse) {
        option (google.api.http) = {
            put: "/v1/agentmembership/{item.ID}"
            body: "*"

            additional_bindings {
                patch: "/v1/agentmembership/{item.ID}"
                body: "*"
            }
        };
    }

    // Delete AgentMembership
    rpc DeleteAgentMembership(DeleteAgentMembershipRequest) returns (DeleteAgentMembershipResponse) {
        option (google.api.http) = {
            delete: "/v1/agentmembership/{ID}"
        };
    }
  
}