syntax = "proto3";

package shrike.v1;

option go_package = "v1";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Shrike service";
		version: "1.0";
		contact: {
			name: "openmob";
			url: "https://github.com/SteveCastle/openmob";
			email: "stephen@openmob.us";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

// Generated Types and Message Schema

message ACL {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
}

//Request and Response Message Types
message CreateACLRequest {
	string api = 1;
	ACL item = 2;
}

message CreateACLResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetACLRequest {
	string api = 1;
	int64 id = 2;
}

message GetACLResponse {
	string api = 1;
	ACL item = 2;
}

message ListACLRequest {
	string api = 1;
	int64 limit = 2;
}

message ListACLResponse {
	string api = 1;
	repeated ACL items = 2;
}

// Request data to update ACL
message UpdateACLRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ACL entity to update
    ACL item = 2;
}

// Contains status of update operation
message UpdateACLResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ACL
message DeleteACLRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ACL to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteACLResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message MailingAddress {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string StreetAddress = 3;
	
	string City = 4;
	
	string State = 5;
	
	string ZipCode = 6;
	
}

//Request and Response Message Types
message CreateMailingAddressRequest {
	string api = 1;
	MailingAddress item = 2;
}

message CreateMailingAddressResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetMailingAddressRequest {
	string api = 1;
	int64 id = 2;
}

message GetMailingAddressResponse {
	string api = 1;
	MailingAddress item = 2;
}

message ListMailingAddressRequest {
	string api = 1;
	int64 limit = 2;
}

message ListMailingAddressResponse {
	string api = 1;
	repeated MailingAddress items = 2;
}

// Request data to update MailingAddress
message UpdateMailingAddressRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // MailingAddress entity to update
    MailingAddress item = 2;
}

// Contains status of update operation
message UpdateMailingAddressResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete MailingAddress
message DeleteMailingAddressRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the MailingAddress to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteMailingAddressResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PhoneNumber {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string PhoneNumber = 3;
	
}

//Request and Response Message Types
message CreatePhoneNumberRequest {
	string api = 1;
	PhoneNumber item = 2;
}

message CreatePhoneNumberResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPhoneNumberRequest {
	string api = 1;
	int64 id = 2;
}

message GetPhoneNumberResponse {
	string api = 1;
	PhoneNumber item = 2;
}

message ListPhoneNumberRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPhoneNumberResponse {
	string api = 1;
	repeated PhoneNumber items = 2;
}

// Request data to update PhoneNumber
message UpdatePhoneNumberRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // PhoneNumber entity to update
    PhoneNumber item = 2;
}

// Contains status of update operation
message UpdatePhoneNumberResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PhoneNumber
message DeletePhoneNumberRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the PhoneNumber to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePhoneNumberResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message EmailAddress {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Address = 3;
	
}

//Request and Response Message Types
message CreateEmailAddressRequest {
	string api = 1;
	EmailAddress item = 2;
}

message CreateEmailAddressResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetEmailAddressRequest {
	string api = 1;
	int64 id = 2;
}

message GetEmailAddressResponse {
	string api = 1;
	EmailAddress item = 2;
}

message ListEmailAddressRequest {
	string api = 1;
	int64 limit = 2;
}

message ListEmailAddressResponse {
	string api = 1;
	repeated EmailAddress items = 2;
}

// Request data to update EmailAddress
message UpdateEmailAddressRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // EmailAddress entity to update
    EmailAddress item = 2;
}

// Contains status of update operation
message UpdateEmailAddressResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete EmailAddress
message DeleteEmailAddressRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the EmailAddress to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteEmailAddressResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Photo {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string ImgURL = 3;
	
}

//Request and Response Message Types
message CreatePhotoRequest {
	string api = 1;
	Photo item = 2;
}

message CreatePhotoResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPhotoRequest {
	string api = 1;
	int64 id = 2;
}

message GetPhotoResponse {
	string api = 1;
	Photo item = 2;
}

message ListPhotoRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPhotoResponse {
	string api = 1;
	repeated Photo items = 2;
}

// Request data to update Photo
message UpdatePhotoRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Photo entity to update
    Photo item = 2;
}

// Contains status of update operation
message UpdatePhotoResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Photo
message DeletePhotoRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Photo to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePhotoResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateLayoutTypeRequest {
	string api = 1;
	LayoutType item = 2;
}

message CreateLayoutTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLayoutTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetLayoutTypeResponse {
	string api = 1;
	LayoutType item = 2;
}

message ListLayoutTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLayoutTypeResponse {
	string api = 1;
	repeated LayoutType items = 2;
}

// Request data to update LayoutType
message UpdateLayoutTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LayoutType entity to update
    LayoutType item = 2;
}

// Contains status of update operation
message UpdateLayoutTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutType
message DeleteLayoutTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LayoutType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLayoutTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutRow {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Layout = 3;
	
}

//Request and Response Message Types
message CreateLayoutRowRequest {
	string api = 1;
	LayoutRow item = 2;
}

message CreateLayoutRowResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLayoutRowRequest {
	string api = 1;
	int64 id = 2;
}

message GetLayoutRowResponse {
	string api = 1;
	LayoutRow item = 2;
}

message ListLayoutRowRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLayoutRowResponse {
	string api = 1;
	repeated LayoutRow items = 2;
}

// Request data to update LayoutRow
message UpdateLayoutRowRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LayoutRow entity to update
    LayoutRow item = 2;
}

// Contains status of update operation
message UpdateLayoutRowResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutRow
message DeleteLayoutRowRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LayoutRow to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLayoutRowResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ComponentImplementation {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
}

//Request and Response Message Types
message CreateComponentImplementationRequest {
	string api = 1;
	ComponentImplementation item = 2;
}

message CreateComponentImplementationResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetComponentImplementationRequest {
	string api = 1;
	int64 id = 2;
}

message GetComponentImplementationResponse {
	string api = 1;
	ComponentImplementation item = 2;
}

message ListComponentImplementationRequest {
	string api = 1;
	int64 limit = 2;
}

message ListComponentImplementationResponse {
	string api = 1;
	repeated ComponentImplementation items = 2;
}

// Request data to update ComponentImplementation
message UpdateComponentImplementationRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ComponentImplementation entity to update
    ComponentImplementation item = 2;
}

// Contains status of update operation
message UpdateComponentImplementationResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ComponentImplementation
message DeleteComponentImplementationRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ComponentImplementation to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteComponentImplementationResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ComponentType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateComponentTypeRequest {
	string api = 1;
	ComponentType item = 2;
}

message CreateComponentTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetComponentTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetComponentTypeResponse {
	string api = 1;
	ComponentType item = 2;
}

message ListComponentTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListComponentTypeResponse {
	string api = 1;
	repeated ComponentType items = 2;
}

// Request data to update ComponentType
message UpdateComponentTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ComponentType entity to update
    ComponentType item = 2;
}

// Contains status of update operation
message UpdateComponentTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ComponentType
message DeleteComponentTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ComponentType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteComponentTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LayoutColumn {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 LayoutRow = 3;
	
}

//Request and Response Message Types
message CreateLayoutColumnRequest {
	string api = 1;
	LayoutColumn item = 2;
}

message CreateLayoutColumnResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLayoutColumnRequest {
	string api = 1;
	int64 id = 2;
}

message GetLayoutColumnResponse {
	string api = 1;
	LayoutColumn item = 2;
}

message ListLayoutColumnRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLayoutColumnResponse {
	string api = 1;
	repeated LayoutColumn items = 2;
}

// Request data to update LayoutColumn
message UpdateLayoutColumnRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LayoutColumn entity to update
    LayoutColumn item = 2;
}

// Contains status of update operation
message UpdateLayoutColumnResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LayoutColumn
message DeleteLayoutColumnRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LayoutColumn to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLayoutColumnResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message FieldType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateFieldTypeRequest {
	string api = 1;
	FieldType item = 2;
}

message CreateFieldTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetFieldTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetFieldTypeResponse {
	string api = 1;
	FieldType item = 2;
}

message ListFieldTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListFieldTypeResponse {
	string api = 1;
	repeated FieldType items = 2;
}

// Request data to update FieldType
message UpdateFieldTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // FieldType entity to update
    FieldType item = 2;
}

// Contains status of update operation
message UpdateFieldTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete FieldType
message DeleteFieldTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the FieldType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteFieldTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Component {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 ComponentType = 3;
	
	sql.NullInt64 LayoutColumn = 4;
	
}

//Request and Response Message Types
message CreateComponentRequest {
	string api = 1;
	Component item = 2;
}

message CreateComponentResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetComponentRequest {
	string api = 1;
	int64 id = 2;
}

message GetComponentResponse {
	string api = 1;
	Component item = 2;
}

message ListComponentRequest {
	string api = 1;
	int64 limit = 2;
}

message ListComponentResponse {
	string api = 1;
	repeated Component items = 2;
}

// Request data to update Component
message UpdateComponentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Component entity to update
    Component item = 2;
}

// Contains status of update operation
message UpdateComponentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Component
message DeleteComponentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Component to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteComponentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Field {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 FieldType = 3;
	
	sql.NullInt64 Component = 4;
	
}

//Request and Response Message Types
message CreateFieldRequest {
	string api = 1;
	Field item = 2;
}

message CreateFieldResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetFieldRequest {
	string api = 1;
	int64 id = 2;
}

message GetFieldResponse {
	string api = 1;
	Field item = 2;
}

message ListFieldRequest {
	string api = 1;
	int64 limit = 2;
}

message ListFieldResponse {
	string api = 1;
	repeated Field items = 2;
}

// Request data to update Field
message UpdateFieldRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Field entity to update
    Field item = 2;
}

// Contains status of update operation
message UpdateFieldResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Field
message DeleteFieldRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Field to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteFieldResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Layout {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	sql.NullInt64 LayoutType = 3;
	
}

//Request and Response Message Types
message CreateLayoutRequest {
	string api = 1;
	Layout item = 2;
}

message CreateLayoutResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLayoutRequest {
	string api = 1;
	int64 id = 2;
}

message GetLayoutResponse {
	string api = 1;
	Layout item = 2;
}

message ListLayoutRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLayoutResponse {
	string api = 1;
	repeated Layout items = 2;
}

// Request data to update Layout
message UpdateLayoutRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Layout entity to update
    Layout item = 2;
}

// Contains status of update operation
message UpdateLayoutResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Layout
message DeleteLayoutRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Layout to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLayoutResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LandingPage {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	sql.NullInt64 Layout = 4;
	
}

//Request and Response Message Types
message CreateLandingPageRequest {
	string api = 1;
	LandingPage item = 2;
}

message CreateLandingPageResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLandingPageRequest {
	string api = 1;
	int64 id = 2;
}

message GetLandingPageResponse {
	string api = 1;
	LandingPage item = 2;
}

message ListLandingPageRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLandingPageResponse {
	string api = 1;
	repeated LandingPage items = 2;
}

// Request data to update LandingPage
message UpdateLandingPageRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LandingPage entity to update
    LandingPage item = 2;
}

// Contains status of update operation
message UpdateLandingPageResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LandingPage
message DeleteLandingPageRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LandingPage to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLandingPageResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Experiment {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	sql.NullInt64 LandingPage = 4;
	
}

//Request and Response Message Types
message CreateExperimentRequest {
	string api = 1;
	Experiment item = 2;
}

message CreateExperimentResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetExperimentRequest {
	string api = 1;
	int64 id = 2;
}

message GetExperimentResponse {
	string api = 1;
	Experiment item = 2;
}

message ListExperimentRequest {
	string api = 1;
	int64 limit = 2;
}

message ListExperimentResponse {
	string api = 1;
	repeated Experiment items = 2;
}

// Request data to update Experiment
message UpdateExperimentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Experiment entity to update
    Experiment item = 2;
}

// Contains status of update operation
message UpdateExperimentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Experiment
message DeleteExperimentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Experiment to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteExperimentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Issue {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	int64 Election = 4;
	
}

//Request and Response Message Types
message CreateIssueRequest {
	string api = 1;
	Issue item = 2;
}

message CreateIssueResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetIssueRequest {
	string api = 1;
	int64 id = 2;
}

message GetIssueResponse {
	string api = 1;
	Issue item = 2;
}

message ListIssueRequest {
	string api = 1;
	int64 limit = 2;
}

message ListIssueResponse {
	string api = 1;
	repeated Issue items = 2;
}

// Request data to update Issue
message UpdateIssueRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Issue entity to update
    Issue item = 2;
}

// Contains status of update operation
message UpdateIssueResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Issue
message DeleteIssueRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Issue to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteIssueResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Candidate {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Election = 3;
	
}

//Request and Response Message Types
message CreateCandidateRequest {
	string api = 1;
	Candidate item = 2;
}

message CreateCandidateResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetCandidateRequest {
	string api = 1;
	int64 id = 2;
}

message GetCandidateResponse {
	string api = 1;
	Candidate item = 2;
}

message ListCandidateRequest {
	string api = 1;
	int64 limit = 2;
}

message ListCandidateResponse {
	string api = 1;
	repeated Candidate items = 2;
}

// Request data to update Candidate
message UpdateCandidateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Candidate entity to update
    Candidate item = 2;
}

// Contains status of update operation
message UpdateCandidateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Candidate
message DeleteCandidateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Candidate to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteCandidateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DistrictType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateDistrictTypeRequest {
	string api = 1;
	DistrictType item = 2;
}

message CreateDistrictTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDistrictTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetDistrictTypeResponse {
	string api = 1;
	DistrictType item = 2;
}

message ListDistrictTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDistrictTypeResponse {
	string api = 1;
	repeated DistrictType items = 2;
}

// Request data to update DistrictType
message UpdateDistrictTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // DistrictType entity to update
    DistrictType item = 2;
}

// Contains status of update operation
message UpdateDistrictTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DistrictType
message DeleteDistrictTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the DistrictType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDistrictTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message District {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	 Geom = 3;
	
	string Title = 4;
	
	int64 DistrictType = 5;
	
}

//Request and Response Message Types
message CreateDistrictRequest {
	string api = 1;
	District item = 2;
}

message CreateDistrictResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDistrictRequest {
	string api = 1;
	int64 id = 2;
}

message GetDistrictResponse {
	string api = 1;
	District item = 2;
}

message ListDistrictRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDistrictResponse {
	string api = 1;
	repeated District items = 2;
}

// Request data to update District
message UpdateDistrictRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // District entity to update
    District item = 2;
}

// Contains status of update operation
message UpdateDistrictResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete District
message DeleteDistrictRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the District to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDistrictResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Office {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	sql.NullInt64 Election = 4;
	
}

//Request and Response Message Types
message CreateOfficeRequest {
	string api = 1;
	Office item = 2;
}

message CreateOfficeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetOfficeRequest {
	string api = 1;
	int64 id = 2;
}

message GetOfficeResponse {
	string api = 1;
	Office item = 2;
}

message ListOfficeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListOfficeResponse {
	string api = 1;
	repeated Office items = 2;
}

// Request data to update Office
message UpdateOfficeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Office entity to update
    Office item = 2;
}

// Contains status of update operation
message UpdateOfficeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Office
message DeleteOfficeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Office to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteOfficeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunityType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateVolunteerOpportunityTypeRequest {
	string api = 1;
	VolunteerOpportunityType item = 2;
}

message CreateVolunteerOpportunityTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetVolunteerOpportunityTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetVolunteerOpportunityTypeResponse {
	string api = 1;
	VolunteerOpportunityType item = 2;
}

message ListVolunteerOpportunityTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListVolunteerOpportunityTypeResponse {
	string api = 1;
	repeated VolunteerOpportunityType items = 2;
}

// Request data to update VolunteerOpportunityType
message UpdateVolunteerOpportunityTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // VolunteerOpportunityType entity to update
    VolunteerOpportunityType item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunityType
message DeleteVolunteerOpportunityTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the VolunteerOpportunityType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEventType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateLiveEventTypeRequest {
	string api = 1;
	LiveEventType item = 2;
}

message CreateLiveEventTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLiveEventTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetLiveEventTypeResponse {
	string api = 1;
	LiveEventType item = 2;
}

message ListLiveEventTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLiveEventTypeResponse {
	string api = 1;
	repeated LiveEventType items = 2;
}

// Request data to update LiveEventType
message UpdateLiveEventTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LiveEventType entity to update
    LiveEventType item = 2;
}

// Contains status of update operation
message UpdateLiveEventTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEventType
message DeleteLiveEventTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LiveEventType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLiveEventTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Company {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateCompanyRequest {
	string api = 1;
	Company item = 2;
}

message CreateCompanyResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetCompanyRequest {
	string api = 1;
	int64 id = 2;
}

message GetCompanyResponse {
	string api = 1;
	Company item = 2;
}

message ListCompanyRequest {
	string api = 1;
	int64 limit = 2;
}

message ListCompanyResponse {
	string api = 1;
	repeated Company items = 2;
}

// Request data to update Company
message UpdateCompanyRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Company entity to update
    Company item = 2;
}

// Contains status of update operation
message UpdateCompanyResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Company
message DeleteCompanyRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Company to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteCompanyResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ProductType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateProductTypeRequest {
	string api = 1;
	ProductType item = 2;
}

message CreateProductTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetProductTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetProductTypeResponse {
	string api = 1;
	ProductType item = 2;
}

message ListProductTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListProductTypeResponse {
	string api = 1;
	repeated ProductType items = 2;
}

// Request data to update ProductType
message UpdateProductTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ProductType entity to update
    ProductType item = 2;
}

// Contains status of update operation
message UpdateProductTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ProductType
message DeleteProductTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ProductType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteProductTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message CustomerCart {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	 CreatedAt = 1;
	
	 UpdatedAt = 2;
	
}

//Request and Response Message Types
message CreateCustomerCartRequest {
	string api = 1;
	CustomerCart item = 2;
}

message CreateCustomerCartResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetCustomerCartRequest {
	string api = 1;
	int64 id = 2;
}

message GetCustomerCartResponse {
	string api = 1;
	CustomerCart item = 2;
}

message ListCustomerCartRequest {
	string api = 1;
	int64 limit = 2;
}

message ListCustomerCartResponse {
	string api = 1;
	repeated CustomerCart items = 2;
}

// Request data to update CustomerCart
message UpdateCustomerCartRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // CustomerCart entity to update
    CustomerCart item = 2;
}

// Contains status of update operation
message UpdateCustomerCartResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete CustomerCart
message DeleteCustomerCartRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the CustomerCart to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteCustomerCartResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Payment {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 CustomerOrder = 3;
	
}

//Request and Response Message Types
message CreatePaymentRequest {
	string api = 1;
	Payment item = 2;
}

message CreatePaymentResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPaymentRequest {
	string api = 1;
	int64 id = 2;
}

message GetPaymentResponse {
	string api = 1;
	Payment item = 2;
}

message ListPaymentRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPaymentResponse {
	string api = 1;
	repeated Payment items = 2;
}

// Request data to update Payment
message UpdatePaymentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Payment entity to update
    Payment item = 2;
}

// Contains status of update operation
message UpdatePaymentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Payment
message DeletePaymentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Payment to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePaymentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Delivery {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	 CreatedAt = 1;
	
	 UpdatedAt = 2;
	
}

//Request and Response Message Types
message CreateDeliveryRequest {
	string api = 1;
	Delivery item = 2;
}

message CreateDeliveryResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDeliveryRequest {
	string api = 1;
	int64 id = 2;
}

message GetDeliveryResponse {
	string api = 1;
	Delivery item = 2;
}

message ListDeliveryRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDeliveryResponse {
	string api = 1;
	repeated Delivery items = 2;
}

// Request data to update Delivery
message UpdateDeliveryRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Delivery entity to update
    Delivery item = 2;
}

// Contains status of update operation
message UpdateDeliveryResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Delivery
message DeleteDeliveryRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Delivery to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDeliveryResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Boycott {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateBoycottRequest {
	string api = 1;
	Boycott item = 2;
}

message CreateBoycottResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetBoycottRequest {
	string api = 1;
	int64 id = 2;
}

message GetBoycottResponse {
	string api = 1;
	Boycott item = 2;
}

message ListBoycottRequest {
	string api = 1;
	int64 limit = 2;
}

message ListBoycottResponse {
	string api = 1;
	repeated Boycott items = 2;
}

// Request data to update Boycott
message UpdateBoycottRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Boycott entity to update
    Boycott item = 2;
}

// Contains status of update operation
message UpdateBoycottResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Boycott
message DeleteBoycottRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Boycott to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteBoycottResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message BoycottMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Boycott = 4;
	
}

//Request and Response Message Types
message CreateBoycottMembershipRequest {
	string api = 1;
	BoycottMembership item = 2;
}

message CreateBoycottMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetBoycottMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetBoycottMembershipResponse {
	string api = 1;
	BoycottMembership item = 2;
}

message ListBoycottMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListBoycottMembershipResponse {
	string api = 1;
	repeated BoycottMembership items = 2;
}

// Request data to update BoycottMembership
message UpdateBoycottMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // BoycottMembership entity to update
    BoycottMembership item = 2;
}

// Contains status of update operation
message UpdateBoycottMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete BoycottMembership
message DeleteBoycottMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the BoycottMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteBoycottMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Election {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateElectionRequest {
	string api = 1;
	Election item = 2;
}

message CreateElectionResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetElectionRequest {
	string api = 1;
	int64 id = 2;
}

message GetElectionResponse {
	string api = 1;
	Election item = 2;
}

message ListElectionRequest {
	string api = 1;
	int64 limit = 2;
}

message ListElectionResponse {
	string api = 1;
	repeated Election items = 2;
}

// Request data to update Election
message UpdateElectionRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Election entity to update
    Election item = 2;
}

// Contains status of update operation
message UpdateElectionResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Election
message DeleteElectionRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Election to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteElectionResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ElectionMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Election = 4;
	
}

//Request and Response Message Types
message CreateElectionMembershipRequest {
	string api = 1;
	ElectionMembership item = 2;
}

message CreateElectionMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetElectionMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetElectionMembershipResponse {
	string api = 1;
	ElectionMembership item = 2;
}

message ListElectionMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListElectionMembershipResponse {
	string api = 1;
	repeated ElectionMembership items = 2;
}

// Request data to update ElectionMembership
message UpdateElectionMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ElectionMembership entity to update
    ElectionMembership item = 2;
}

// Contains status of update operation
message UpdateElectionMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ElectionMembership
message DeleteElectionMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ElectionMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteElectionMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PetitionMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Petition = 4;
	
}

//Request and Response Message Types
message CreatePetitionMembershipRequest {
	string api = 1;
	PetitionMembership item = 2;
}

message CreatePetitionMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPetitionMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetPetitionMembershipResponse {
	string api = 1;
	PetitionMembership item = 2;
}

message ListPetitionMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPetitionMembershipResponse {
	string api = 1;
	repeated PetitionMembership items = 2;
}

// Request data to update PetitionMembership
message UpdatePetitionMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // PetitionMembership entity to update
    PetitionMembership item = 2;
}

// Contains status of update operation
message UpdatePetitionMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PetitionMembership
message DeletePetitionMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the PetitionMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePetitionMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PollMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Petition = 4;
	
}

//Request and Response Message Types
message CreatePollMembershipRequest {
	string api = 1;
	PollMembership item = 2;
}

message CreatePollMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPollMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetPollMembershipResponse {
	string api = 1;
	PollMembership item = 2;
}

message ListPollMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPollMembershipResponse {
	string api = 1;
	repeated PollMembership items = 2;
}

// Request data to update PollMembership
message UpdatePollMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // PollMembership entity to update
    PollMembership item = 2;
}

// Contains status of update operation
message UpdatePollMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PollMembership
message DeletePollMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the PollMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePollMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunityMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 VolunteerOpportunity = 4;
	
}

//Request and Response Message Types
message CreateVolunteerOpportunityMembershipRequest {
	string api = 1;
	VolunteerOpportunityMembership item = 2;
}

message CreateVolunteerOpportunityMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetVolunteerOpportunityMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetVolunteerOpportunityMembershipResponse {
	string api = 1;
	VolunteerOpportunityMembership item = 2;
}

message ListVolunteerOpportunityMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListVolunteerOpportunityMembershipResponse {
	string api = 1;
	repeated VolunteerOpportunityMembership items = 2;
}

// Request data to update VolunteerOpportunityMembership
message UpdateVolunteerOpportunityMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // VolunteerOpportunityMembership entity to update
    VolunteerOpportunityMembership item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunityMembership
message DeleteVolunteerOpportunityMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the VolunteerOpportunityMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEventMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 LiveEvent = 4;
	
}

//Request and Response Message Types
message CreateLiveEventMembershipRequest {
	string api = 1;
	LiveEventMembership item = 2;
}

message CreateLiveEventMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLiveEventMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetLiveEventMembershipResponse {
	string api = 1;
	LiveEventMembership item = 2;
}

message ListLiveEventMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLiveEventMembershipResponse {
	string api = 1;
	repeated LiveEventMembership items = 2;
}

// Request data to update LiveEventMembership
message UpdateLiveEventMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LiveEventMembership entity to update
    LiveEventMembership item = 2;
}

// Contains status of update operation
message UpdateLiveEventMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEventMembership
message DeleteLiveEventMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LiveEventMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLiveEventMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Product {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	int64 ProductType = 4;
	
}

//Request and Response Message Types
message CreateProductRequest {
	string api = 1;
	Product item = 2;
}

message CreateProductResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetProductRequest {
	string api = 1;
	int64 id = 2;
}

message GetProductResponse {
	string api = 1;
	Product item = 2;
}

message ListProductRequest {
	string api = 1;
	int64 limit = 2;
}

message ListProductResponse {
	string api = 1;
	repeated Product items = 2;
}

// Request data to update Product
message UpdateProductRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Product entity to update
    Product item = 2;
}

// Contains status of update operation
message UpdateProductResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Product
message DeleteProductRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Product to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteProductResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ProductMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Product = 4;
	
}

//Request and Response Message Types
message CreateProductMembershipRequest {
	string api = 1;
	ProductMembership item = 2;
}

message CreateProductMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetProductMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetProductMembershipResponse {
	string api = 1;
	ProductMembership item = 2;
}

message ListProductMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListProductMembershipResponse {
	string api = 1;
	repeated ProductMembership items = 2;
}

// Request data to update ProductMembership
message UpdateProductMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ProductMembership entity to update
    ProductMembership item = 2;
}

// Contains status of update operation
message UpdateProductMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ProductMembership
message DeleteProductMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ProductMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteProductMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DonationCampaign {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateDonationCampaignRequest {
	string api = 1;
	DonationCampaign item = 2;
}

message CreateDonationCampaignResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDonationCampaignRequest {
	string api = 1;
	int64 id = 2;
}

message GetDonationCampaignResponse {
	string api = 1;
	DonationCampaign item = 2;
}

message ListDonationCampaignRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDonationCampaignResponse {
	string api = 1;
	repeated DonationCampaign items = 2;
}

// Request data to update DonationCampaign
message UpdateDonationCampaignRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // DonationCampaign entity to update
    DonationCampaign item = 2;
}

// Contains status of update operation
message UpdateDonationCampaignResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DonationCampaign
message DeleteDonationCampaignRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the DonationCampaign to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDonationCampaignResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message DonationCampaignMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 DonationCampaign = 4;
	
}

//Request and Response Message Types
message CreateDonationCampaignMembershipRequest {
	string api = 1;
	DonationCampaignMembership item = 2;
}

message CreateDonationCampaignMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDonationCampaignMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetDonationCampaignMembershipResponse {
	string api = 1;
	DonationCampaignMembership item = 2;
}

message ListDonationCampaignMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDonationCampaignMembershipResponse {
	string api = 1;
	repeated DonationCampaignMembership items = 2;
}

// Request data to update DonationCampaignMembership
message UpdateDonationCampaignMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // DonationCampaignMembership entity to update
    DonationCampaignMembership item = 2;
}

// Contains status of update operation
message UpdateDonationCampaignMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete DonationCampaignMembership
message DeleteDonationCampaignMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the DonationCampaignMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDonationCampaignMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Petition {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreatePetitionRequest {
	string api = 1;
	Petition item = 2;
}

message CreatePetitionResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPetitionRequest {
	string api = 1;
	int64 id = 2;
}

message GetPetitionResponse {
	string api = 1;
	Petition item = 2;
}

message ListPetitionRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPetitionResponse {
	string api = 1;
	repeated Petition items = 2;
}

// Request data to update Petition
message UpdatePetitionRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Petition entity to update
    Petition item = 2;
}

// Contains status of update operation
message UpdatePetitionResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Petition
message DeletePetitionRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Petition to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePetitionResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PetitionSigner {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Petition = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreatePetitionSignerRequest {
	string api = 1;
	PetitionSigner item = 2;
}

message CreatePetitionSignerResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPetitionSignerRequest {
	string api = 1;
	int64 id = 2;
}

message GetPetitionSignerResponse {
	string api = 1;
	PetitionSigner item = 2;
}

message ListPetitionSignerRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPetitionSignerResponse {
	string api = 1;
	repeated PetitionSigner items = 2;
}

// Request data to update PetitionSigner
message UpdatePetitionSignerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // PetitionSigner entity to update
    PetitionSigner item = 2;
}

// Contains status of update operation
message UpdatePetitionSignerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PetitionSigner
message DeletePetitionSignerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the PetitionSigner to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePetitionSignerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Poll {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreatePollRequest {
	string api = 1;
	Poll item = 2;
}

message CreatePollResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPollRequest {
	string api = 1;
	int64 id = 2;
}

message GetPollResponse {
	string api = 1;
	Poll item = 2;
}

message ListPollRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPollResponse {
	string api = 1;
	repeated Poll items = 2;
}

// Request data to update Poll
message UpdatePollRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Poll entity to update
    Poll item = 2;
}

// Contains status of update operation
message UpdatePollResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Poll
message DeletePollRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Poll to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePollResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message PollRespondant {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Poll = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreatePollRespondantRequest {
	string api = 1;
	PollRespondant item = 2;
}

message CreatePollRespondantResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPollRespondantRequest {
	string api = 1;
	int64 id = 2;
}

message GetPollRespondantResponse {
	string api = 1;
	PollRespondant item = 2;
}

message ListPollRespondantRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPollRespondantResponse {
	string api = 1;
	repeated PollRespondant items = 2;
}

// Request data to update PollRespondant
message UpdatePollRespondantRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // PollRespondant entity to update
    PollRespondant item = 2;
}

// Contains status of update operation
message UpdatePollRespondantResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete PollRespondant
message DeletePollRespondantRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the PollRespondant to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePollRespondantResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Purchaser {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 CustomerOrder = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreatePurchaserRequest {
	string api = 1;
	Purchaser item = 2;
}

message CreatePurchaserResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetPurchaserRequest {
	string api = 1;
	int64 id = 2;
}

message GetPurchaserResponse {
	string api = 1;
	Purchaser item = 2;
}

message ListPurchaserRequest {
	string api = 1;
	int64 limit = 2;
}

message ListPurchaserResponse {
	string api = 1;
	repeated Purchaser items = 2;
}

// Request data to update Purchaser
message UpdatePurchaserRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Purchaser entity to update
    Purchaser item = 2;
}

// Contains status of update operation
message UpdatePurchaserResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Purchaser
message DeletePurchaserRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Purchaser to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeletePurchaserResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message CustomerOrder {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 CustomerCart = 3;
	
}

//Request and Response Message Types
message CreateCustomerOrderRequest {
	string api = 1;
	CustomerOrder item = 2;
}

message CreateCustomerOrderResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetCustomerOrderRequest {
	string api = 1;
	int64 id = 2;
}

message GetCustomerOrderResponse {
	string api = 1;
	CustomerOrder item = 2;
}

message ListCustomerOrderRequest {
	string api = 1;
	int64 limit = 2;
}

message ListCustomerOrderResponse {
	string api = 1;
	repeated CustomerOrder items = 2;
}

// Request data to update CustomerOrder
message UpdateCustomerOrderRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // CustomerOrder entity to update
    CustomerOrder item = 2;
}

// Contains status of update operation
message UpdateCustomerOrderResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete CustomerOrder
message DeleteCustomerOrderRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the CustomerOrder to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteCustomerOrderResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Donor {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 CustomerOrder = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreateDonorRequest {
	string api = 1;
	Donor item = 2;
}

message CreateDonorResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetDonorRequest {
	string api = 1;
	int64 id = 2;
}

message GetDonorResponse {
	string api = 1;
	Donor item = 2;
}

message ListDonorRequest {
	string api = 1;
	int64 limit = 2;
}

message ListDonorResponse {
	string api = 1;
	repeated Donor items = 2;
}

// Request data to update Donor
message UpdateDonorRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Donor entity to update
    Donor item = 2;
}

// Contains status of update operation
message UpdateDonorResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Donor
message DeleteDonorRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Donor to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteDonorResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message LiveEvent {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	int64 LiveEventType = 4;
	
}

//Request and Response Message Types
message CreateLiveEventRequest {
	string api = 1;
	LiveEvent item = 2;
}

message CreateLiveEventResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetLiveEventRequest {
	string api = 1;
	int64 id = 2;
}

message GetLiveEventResponse {
	string api = 1;
	LiveEvent item = 2;
}

message ListLiveEventRequest {
	string api = 1;
	int64 limit = 2;
}

message ListLiveEventResponse {
	string api = 1;
	repeated LiveEvent items = 2;
}

// Request data to update LiveEvent
message UpdateLiveEventRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // LiveEvent entity to update
    LiveEvent item = 2;
}

// Contains status of update operation
message UpdateLiveEventResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete LiveEvent
message DeleteLiveEventRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the LiveEvent to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteLiveEventResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message EventAttendee {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 LiveEvent = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreateEventAttendeeRequest {
	string api = 1;
	EventAttendee item = 2;
}

message CreateEventAttendeeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetEventAttendeeRequest {
	string api = 1;
	int64 id = 2;
}

message GetEventAttendeeResponse {
	string api = 1;
	EventAttendee item = 2;
}

message ListEventAttendeeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListEventAttendeeResponse {
	string api = 1;
	repeated EventAttendee items = 2;
}

// Request data to update EventAttendee
message UpdateEventAttendeeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // EventAttendee entity to update
    EventAttendee item = 2;
}

// Contains status of update operation
message UpdateEventAttendeeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete EventAttendee
message DeleteEventAttendeeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the EventAttendee to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteEventAttendeeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Voter {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Contact = 3;
	
	int64 Cause = 4;
	
}

//Request and Response Message Types
message CreateVoterRequest {
	string api = 1;
	Voter item = 2;
}

message CreateVoterResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetVoterRequest {
	string api = 1;
	int64 id = 2;
}

message GetVoterResponse {
	string api = 1;
	Voter item = 2;
}

message ListVoterRequest {
	string api = 1;
	int64 limit = 2;
}

message ListVoterResponse {
	string api = 1;
	repeated Voter items = 2;
}

// Request data to update Voter
message UpdateVoterRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Voter entity to update
    Voter item = 2;
}

// Contains status of update operation
message UpdateVoterResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Voter
message DeleteVoterRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Voter to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteVoterResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message VolunteerOpportunity {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	sql.NullInt64 ElectionType = 4;
	
}

//Request and Response Message Types
message CreateVolunteerOpportunityRequest {
	string api = 1;
	VolunteerOpportunity item = 2;
}

message CreateVolunteerOpportunityResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetVolunteerOpportunityRequest {
	string api = 1;
	int64 id = 2;
}

message GetVolunteerOpportunityResponse {
	string api = 1;
	VolunteerOpportunity item = 2;
}

message ListVolunteerOpportunityRequest {
	string api = 1;
	int64 limit = 2;
}

message ListVolunteerOpportunityResponse {
	string api = 1;
	repeated VolunteerOpportunity items = 2;
}

// Request data to update VolunteerOpportunity
message UpdateVolunteerOpportunityRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // VolunteerOpportunity entity to update
    VolunteerOpportunity item = 2;
}

// Contains status of update operation
message UpdateVolunteerOpportunityResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete VolunteerOpportunity
message DeleteVolunteerOpportunityRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the VolunteerOpportunity to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteVolunteerOpportunityResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Volunteer {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 VolunteerOpportunity = 3;
	
	int64 Contact = 4;
	
	int64 Cause = 5;
	
}

//Request and Response Message Types
message CreateVolunteerRequest {
	string api = 1;
	Volunteer item = 2;
}

message CreateVolunteerResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetVolunteerRequest {
	string api = 1;
	int64 id = 2;
}

message GetVolunteerResponse {
	string api = 1;
	Volunteer item = 2;
}

message ListVolunteerRequest {
	string api = 1;
	int64 limit = 2;
}

message ListVolunteerResponse {
	string api = 1;
	repeated Volunteer items = 2;
}

// Request data to update Volunteer
message UpdateVolunteerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Volunteer entity to update
    Volunteer item = 2;
}

// Contains status of update operation
message UpdateVolunteerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Volunteer
message DeleteVolunteerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Volunteer to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteVolunteerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Follower {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Contact = 3;
	
	int64 Cause = 4;
	
}

//Request and Response Message Types
message CreateFollowerRequest {
	string api = 1;
	Follower item = 2;
}

message CreateFollowerResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetFollowerRequest {
	string api = 1;
	int64 id = 2;
}

message GetFollowerResponse {
	string api = 1;
	Follower item = 2;
}

message ListFollowerRequest {
	string api = 1;
	int64 limit = 2;
}

message ListFollowerResponse {
	string api = 1;
	repeated Follower items = 2;
}

// Request data to update Follower
message UpdateFollowerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Follower entity to update
    Follower item = 2;
}

// Contains status of update operation
message UpdateFollowerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Follower
message DeleteFollowerRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Follower to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteFollowerResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Territory {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateTerritoryRequest {
	string api = 1;
	Territory item = 2;
}

message CreateTerritoryResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetTerritoryRequest {
	string api = 1;
	int64 id = 2;
}

message GetTerritoryResponse {
	string api = 1;
	Territory item = 2;
}

message ListTerritoryRequest {
	string api = 1;
	int64 limit = 2;
}

message ListTerritoryResponse {
	string api = 1;
	repeated Territory items = 2;
}

// Request data to update Territory
message UpdateTerritoryRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Territory entity to update
    Territory item = 2;
}

// Contains status of update operation
message UpdateTerritoryResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Territory
message DeleteTerritoryRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Territory to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteTerritoryResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ActivityType {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateActivityTypeRequest {
	string api = 1;
	ActivityType item = 2;
}

message CreateActivityTypeResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetActivityTypeRequest {
	string api = 1;
	int64 id = 2;
}

message GetActivityTypeResponse {
	string api = 1;
	ActivityType item = 2;
}

message ListActivityTypeRequest {
	string api = 1;
	int64 limit = 2;
}

message ListActivityTypeResponse {
	string api = 1;
	repeated ActivityType items = 2;
}

// Request data to update ActivityType
message UpdateActivityTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ActivityType entity to update
    ActivityType item = 2;
}

// Contains status of update operation
message UpdateActivityTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ActivityType
message DeleteActivityTypeRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ActivityType to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteActivityTypeResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Activity {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
	int64 ActivityType = 4;
	
	int64 Contact = 5;
	
	int64 Cause = 6;
	
}

//Request and Response Message Types
message CreateActivityRequest {
	string api = 1;
	Activity item = 2;
}

message CreateActivityResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetActivityRequest {
	string api = 1;
	int64 id = 2;
}

message GetActivityResponse {
	string api = 1;
	Activity item = 2;
}

message ListActivityRequest {
	string api = 1;
	int64 limit = 2;
}

message ListActivityResponse {
	string api = 1;
	repeated Activity items = 2;
}

// Request data to update Activity
message UpdateActivityRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Activity entity to update
    Activity item = 2;
}

// Contains status of update operation
message UpdateActivityResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Activity
message DeleteActivityRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Activity to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteActivityResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Note {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Contact = 3;
	
	int64 Cause = 4;
	
	sql.NullString Body = 5;
	
}

//Request and Response Message Types
message CreateNoteRequest {
	string api = 1;
	Note item = 2;
}

message CreateNoteResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetNoteRequest {
	string api = 1;
	int64 id = 2;
}

message GetNoteResponse {
	string api = 1;
	Note item = 2;
}

message ListNoteRequest {
	string api = 1;
	int64 limit = 2;
}

message ListNoteResponse {
	string api = 1;
	repeated Note items = 2;
}

// Request data to update Note
message UpdateNoteRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Note entity to update
    Note item = 2;
}

// Contains status of update operation
message UpdateNoteResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Note
message DeleteNoteRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Note to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteNoteResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Account {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Username = 3;
	
}

//Request and Response Message Types
message CreateAccountRequest {
	string api = 1;
	Account item = 2;
}

message CreateAccountResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetAccountRequest {
	string api = 1;
	int64 id = 2;
}

message GetAccountResponse {
	string api = 1;
	Account item = 2;
}

message ListAccountRequest {
	string api = 1;
	int64 limit = 2;
}

message ListAccountResponse {
	string api = 1;
	repeated Account items = 2;
}

// Request data to update Account
message UpdateAccountRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Account entity to update
    Account item = 2;
}

// Contains status of update operation
message UpdateAccountResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Account
message DeleteAccountRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Account to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteAccountResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message OwnerMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Account = 4;
	
}

//Request and Response Message Types
message CreateOwnerMembershipRequest {
	string api = 1;
	OwnerMembership item = 2;
}

message CreateOwnerMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetOwnerMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetOwnerMembershipResponse {
	string api = 1;
	OwnerMembership item = 2;
}

message ListOwnerMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListOwnerMembershipResponse {
	string api = 1;
	repeated OwnerMembership items = 2;
}

// Request data to update OwnerMembership
message UpdateOwnerMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // OwnerMembership entity to update
    OwnerMembership item = 2;
}

// Contains status of update operation
message UpdateOwnerMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete OwnerMembership
message DeleteOwnerMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the OwnerMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteOwnerMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Contact {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	 CreatedAt = 1;
	
	 UpdatedAt = 2;
	
}

//Request and Response Message Types
message CreateContactRequest {
	string api = 1;
	Contact item = 2;
}

message CreateContactResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetContactRequest {
	string api = 1;
	int64 id = 2;
}

message GetContactResponse {
	string api = 1;
	Contact item = 2;
}

message ListContactRequest {
	string api = 1;
	int64 limit = 2;
}

message ListContactResponse {
	string api = 1;
	repeated Contact items = 2;
}

// Request data to update Contact
message UpdateContactRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contact entity to update
    Contact item = 2;
}

// Contains status of update operation
message UpdateContactResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Contact
message DeleteContactRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Contact to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteContactResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ContactMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Contact = 4;
	
}

//Request and Response Message Types
message CreateContactMembershipRequest {
	string api = 1;
	ContactMembership item = 2;
}

message CreateContactMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetContactMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetContactMembershipResponse {
	string api = 1;
	ContactMembership item = 2;
}

message ListContactMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListContactMembershipResponse {
	string api = 1;
	repeated ContactMembership items = 2;
}

// Request data to update ContactMembership
message UpdateContactMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ContactMembership entity to update
    ContactMembership item = 2;
}

// Contains status of update operation
message UpdateContactMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete ContactMembership
message DeleteContactMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the ContactMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteContactMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Cause {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	string Title = 3;
	
}

//Request and Response Message Types
message CreateCauseRequest {
	string api = 1;
	Cause item = 2;
}

message CreateCauseResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetCauseRequest {
	string api = 1;
	int64 id = 2;
}

message GetCauseResponse {
	string api = 1;
	Cause item = 2;
}

message ListCauseRequest {
	string api = 1;
	int64 limit = 2;
}

message ListCauseResponse {
	string api = 1;
	repeated Cause items = 2;
}

// Request data to update Cause
message UpdateCauseRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Cause entity to update
    Cause item = 2;
}

// Contains status of update operation
message UpdateCauseResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Cause
message DeleteCauseRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Cause to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteCauseResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message Agent {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Account = 3;
	
}

//Request and Response Message Types
message CreateAgentRequest {
	string api = 1;
	Agent item = 2;
}

message CreateAgentResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetAgentRequest {
	string api = 1;
	int64 id = 2;
}

message GetAgentResponse {
	string api = 1;
	Agent item = 2;
}

message ListAgentRequest {
	string api = 1;
	int64 limit = 2;
}

message ListAgentResponse {
	string api = 1;
	repeated Agent items = 2;
}

// Request data to update Agent
message UpdateAgentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Agent entity to update
    Agent item = 2;
}

// Contains status of update operation
message UpdateAgentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete Agent
message DeleteAgentRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the Agent to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteAgentResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message AgentMembership {
	// Generated Types and Message Schema
    
	int64 ID = 0;
	
	google.protobuf.Timestamp CreatedAt = 1;
	
	google.protobuf.Timestamp UpdatedAt = 2;
	
	int64 Cause = 3;
	
	int64 Agent = 4;
	
}

//Request and Response Message Types
message CreateAgentMembershipRequest {
	string api = 1;
	AgentMembership item = 2;
}

message CreateAgentMembershipResponse {
	string api = 1;
	int64 id = 2;
	
}
message GetAgentMembershipRequest {
	string api = 1;
	int64 id = 2;
}

message GetAgentMembershipResponse {
	string api = 1;
	AgentMembership item = 2;
}

message ListAgentMembershipRequest {
	string api = 1;
	int64 limit = 2;
}

message ListAgentMembershipResponse {
	string api = 1;
	repeated AgentMembership items = 2;
}

// Request data to update AgentMembership
message UpdateAgentMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // AgentMembership entity to update
    AgentMembership item = 2;
}

// Contains status of update operation
message UpdateAgentMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete AgentMembership
message DeleteAgentMembershipRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the AgentMembership to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteAgentMembershipResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}


// Generated Shrike Service Definition
service ShrikeService {
	
	// CreateACL takes a ACL object to create.
	rpc CreateACL(CreateACLRequest) returns (CreateACLResponse) {
		option (google.api.http) ={
			post: "/v1/acl"
			body: "*"
		};
	}
    // GetACL takes an id and returns a single ACL.
	rpc GetACL(GetACLRequest) returns (GetACLResponse) {
		option (google.api.http) ={
			get: "/v1/acl/{id}"
		};
	}
    // List ACL, takes filters, limit, and cursor param.
	rpc ListACL(ListACLRequest) returns (ListACLResponse) {
	option (google.api.http) ={
		get: "/v1/acl"
	};
}
    // Update ACL
    rpc UpdateACL(UpdateACLRequest) returns (UpdateACLResponse){
        option (google.api.http) = {
            put: "/v1/acl/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/acl/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ACL
    rpc DeleteACL(DeleteACLRequest) returns (DeleteACLResponse){
        option (google.api.http) = {
            delete: "/v1/acl/{id}"
        };
    }
	
	// CreateMailingAddress takes a MailingAddress object to create.
	rpc CreateMailingAddress(CreateMailingAddressRequest) returns (CreateMailingAddressResponse) {
		option (google.api.http) ={
			post: "/v1/mailingaddress"
			body: "*"
		};
	}
    // GetMailingAddress takes an id and returns a single MailingAddress.
	rpc GetMailingAddress(GetMailingAddressRequest) returns (GetMailingAddressResponse) {
		option (google.api.http) ={
			get: "/v1/mailingaddress/{id}"
		};
	}
    // List MailingAddress, takes filters, limit, and cursor param.
	rpc ListMailingAddress(ListMailingAddressRequest) returns (ListMailingAddressResponse) {
	option (google.api.http) ={
		get: "/v1/mailingaddress"
	};
}
    // Update MailingAddress
    rpc UpdateMailingAddress(UpdateMailingAddressRequest) returns (UpdateMailingAddressResponse){
        option (google.api.http) = {
            put: "/v1/mailingaddress/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/mailingaddress/{item.id}"
                body: "*"
            }
        };
    }

    // Delete MailingAddress
    rpc DeleteMailingAddress(DeleteMailingAddressRequest) returns (DeleteMailingAddressResponse){
        option (google.api.http) = {
            delete: "/v1/mailingaddress/{id}"
        };
    }
	
	// CreatePhoneNumber takes a PhoneNumber object to create.
	rpc CreatePhoneNumber(CreatePhoneNumberRequest) returns (CreatePhoneNumberResponse) {
		option (google.api.http) ={
			post: "/v1/phonenumber"
			body: "*"
		};
	}
    // GetPhoneNumber takes an id and returns a single PhoneNumber.
	rpc GetPhoneNumber(GetPhoneNumberRequest) returns (GetPhoneNumberResponse) {
		option (google.api.http) ={
			get: "/v1/phonenumber/{id}"
		};
	}
    // List PhoneNumber, takes filters, limit, and cursor param.
	rpc ListPhoneNumber(ListPhoneNumberRequest) returns (ListPhoneNumberResponse) {
	option (google.api.http) ={
		get: "/v1/phonenumber"
	};
}
    // Update PhoneNumber
    rpc UpdatePhoneNumber(UpdatePhoneNumberRequest) returns (UpdatePhoneNumberResponse){
        option (google.api.http) = {
            put: "/v1/phonenumber/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/phonenumber/{item.id}"
                body: "*"
            }
        };
    }

    // Delete PhoneNumber
    rpc DeletePhoneNumber(DeletePhoneNumberRequest) returns (DeletePhoneNumberResponse){
        option (google.api.http) = {
            delete: "/v1/phonenumber/{id}"
        };
    }
	
	// CreateEmailAddress takes a EmailAddress object to create.
	rpc CreateEmailAddress(CreateEmailAddressRequest) returns (CreateEmailAddressResponse) {
		option (google.api.http) ={
			post: "/v1/emailaddress"
			body: "*"
		};
	}
    // GetEmailAddress takes an id and returns a single EmailAddress.
	rpc GetEmailAddress(GetEmailAddressRequest) returns (GetEmailAddressResponse) {
		option (google.api.http) ={
			get: "/v1/emailaddress/{id}"
		};
	}
    // List EmailAddress, takes filters, limit, and cursor param.
	rpc ListEmailAddress(ListEmailAddressRequest) returns (ListEmailAddressResponse) {
	option (google.api.http) ={
		get: "/v1/emailaddress"
	};
}
    // Update EmailAddress
    rpc UpdateEmailAddress(UpdateEmailAddressRequest) returns (UpdateEmailAddressResponse){
        option (google.api.http) = {
            put: "/v1/emailaddress/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/emailaddress/{item.id}"
                body: "*"
            }
        };
    }

    // Delete EmailAddress
    rpc DeleteEmailAddress(DeleteEmailAddressRequest) returns (DeleteEmailAddressResponse){
        option (google.api.http) = {
            delete: "/v1/emailaddress/{id}"
        };
    }
	
	// CreatePhoto takes a Photo object to create.
	rpc CreatePhoto(CreatePhotoRequest) returns (CreatePhotoResponse) {
		option (google.api.http) ={
			post: "/v1/photo"
			body: "*"
		};
	}
    // GetPhoto takes an id and returns a single Photo.
	rpc GetPhoto(GetPhotoRequest) returns (GetPhotoResponse) {
		option (google.api.http) ={
			get: "/v1/photo/{id}"
		};
	}
    // List Photo, takes filters, limit, and cursor param.
	rpc ListPhoto(ListPhotoRequest) returns (ListPhotoResponse) {
	option (google.api.http) ={
		get: "/v1/photo"
	};
}
    // Update Photo
    rpc UpdatePhoto(UpdatePhotoRequest) returns (UpdatePhotoResponse){
        option (google.api.http) = {
            put: "/v1/photo/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/photo/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Photo
    rpc DeletePhoto(DeletePhotoRequest) returns (DeletePhotoResponse){
        option (google.api.http) = {
            delete: "/v1/photo/{id}"
        };
    }
	
	// CreateLayoutType takes a LayoutType object to create.
	rpc CreateLayoutType(CreateLayoutTypeRequest) returns (CreateLayoutTypeResponse) {
		option (google.api.http) ={
			post: "/v1/layouttype"
			body: "*"
		};
	}
    // GetLayoutType takes an id and returns a single LayoutType.
	rpc GetLayoutType(GetLayoutTypeRequest) returns (GetLayoutTypeResponse) {
		option (google.api.http) ={
			get: "/v1/layouttype/{id}"
		};
	}
    // List LayoutType, takes filters, limit, and cursor param.
	rpc ListLayoutType(ListLayoutTypeRequest) returns (ListLayoutTypeResponse) {
	option (google.api.http) ={
		get: "/v1/layouttype"
	};
}
    // Update LayoutType
    rpc UpdateLayoutType(UpdateLayoutTypeRequest) returns (UpdateLayoutTypeResponse){
        option (google.api.http) = {
            put: "/v1/layouttype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/layouttype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LayoutType
    rpc DeleteLayoutType(DeleteLayoutTypeRequest) returns (DeleteLayoutTypeResponse){
        option (google.api.http) = {
            delete: "/v1/layouttype/{id}"
        };
    }
	
	// CreateLayoutRow takes a LayoutRow object to create.
	rpc CreateLayoutRow(CreateLayoutRowRequest) returns (CreateLayoutRowResponse) {
		option (google.api.http) ={
			post: "/v1/layoutrow"
			body: "*"
		};
	}
    // GetLayoutRow takes an id and returns a single LayoutRow.
	rpc GetLayoutRow(GetLayoutRowRequest) returns (GetLayoutRowResponse) {
		option (google.api.http) ={
			get: "/v1/layoutrow/{id}"
		};
	}
    // List LayoutRow, takes filters, limit, and cursor param.
	rpc ListLayoutRow(ListLayoutRowRequest) returns (ListLayoutRowResponse) {
	option (google.api.http) ={
		get: "/v1/layoutrow"
	};
}
    // Update LayoutRow
    rpc UpdateLayoutRow(UpdateLayoutRowRequest) returns (UpdateLayoutRowResponse){
        option (google.api.http) = {
            put: "/v1/layoutrow/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/layoutrow/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LayoutRow
    rpc DeleteLayoutRow(DeleteLayoutRowRequest) returns (DeleteLayoutRowResponse){
        option (google.api.http) = {
            delete: "/v1/layoutrow/{id}"
        };
    }
	
	// CreateComponentImplementation takes a ComponentImplementation object to create.
	rpc CreateComponentImplementation(CreateComponentImplementationRequest) returns (CreateComponentImplementationResponse) {
		option (google.api.http) ={
			post: "/v1/componentimplementation"
			body: "*"
		};
	}
    // GetComponentImplementation takes an id and returns a single ComponentImplementation.
	rpc GetComponentImplementation(GetComponentImplementationRequest) returns (GetComponentImplementationResponse) {
		option (google.api.http) ={
			get: "/v1/componentimplementation/{id}"
		};
	}
    // List ComponentImplementation, takes filters, limit, and cursor param.
	rpc ListComponentImplementation(ListComponentImplementationRequest) returns (ListComponentImplementationResponse) {
	option (google.api.http) ={
		get: "/v1/componentimplementation"
	};
}
    // Update ComponentImplementation
    rpc UpdateComponentImplementation(UpdateComponentImplementationRequest) returns (UpdateComponentImplementationResponse){
        option (google.api.http) = {
            put: "/v1/componentimplementation/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/componentimplementation/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ComponentImplementation
    rpc DeleteComponentImplementation(DeleteComponentImplementationRequest) returns (DeleteComponentImplementationResponse){
        option (google.api.http) = {
            delete: "/v1/componentimplementation/{id}"
        };
    }
	
	// CreateComponentType takes a ComponentType object to create.
	rpc CreateComponentType(CreateComponentTypeRequest) returns (CreateComponentTypeResponse) {
		option (google.api.http) ={
			post: "/v1/componenttype"
			body: "*"
		};
	}
    // GetComponentType takes an id and returns a single ComponentType.
	rpc GetComponentType(GetComponentTypeRequest) returns (GetComponentTypeResponse) {
		option (google.api.http) ={
			get: "/v1/componenttype/{id}"
		};
	}
    // List ComponentType, takes filters, limit, and cursor param.
	rpc ListComponentType(ListComponentTypeRequest) returns (ListComponentTypeResponse) {
	option (google.api.http) ={
		get: "/v1/componenttype"
	};
}
    // Update ComponentType
    rpc UpdateComponentType(UpdateComponentTypeRequest) returns (UpdateComponentTypeResponse){
        option (google.api.http) = {
            put: "/v1/componenttype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/componenttype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ComponentType
    rpc DeleteComponentType(DeleteComponentTypeRequest) returns (DeleteComponentTypeResponse){
        option (google.api.http) = {
            delete: "/v1/componenttype/{id}"
        };
    }
	
	// CreateLayoutColumn takes a LayoutColumn object to create.
	rpc CreateLayoutColumn(CreateLayoutColumnRequest) returns (CreateLayoutColumnResponse) {
		option (google.api.http) ={
			post: "/v1/layoutcolumn"
			body: "*"
		};
	}
    // GetLayoutColumn takes an id and returns a single LayoutColumn.
	rpc GetLayoutColumn(GetLayoutColumnRequest) returns (GetLayoutColumnResponse) {
		option (google.api.http) ={
			get: "/v1/layoutcolumn/{id}"
		};
	}
    // List LayoutColumn, takes filters, limit, and cursor param.
	rpc ListLayoutColumn(ListLayoutColumnRequest) returns (ListLayoutColumnResponse) {
	option (google.api.http) ={
		get: "/v1/layoutcolumn"
	};
}
    // Update LayoutColumn
    rpc UpdateLayoutColumn(UpdateLayoutColumnRequest) returns (UpdateLayoutColumnResponse){
        option (google.api.http) = {
            put: "/v1/layoutcolumn/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/layoutcolumn/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LayoutColumn
    rpc DeleteLayoutColumn(DeleteLayoutColumnRequest) returns (DeleteLayoutColumnResponse){
        option (google.api.http) = {
            delete: "/v1/layoutcolumn/{id}"
        };
    }
	
	// CreateFieldType takes a FieldType object to create.
	rpc CreateFieldType(CreateFieldTypeRequest) returns (CreateFieldTypeResponse) {
		option (google.api.http) ={
			post: "/v1/fieldtype"
			body: "*"
		};
	}
    // GetFieldType takes an id and returns a single FieldType.
	rpc GetFieldType(GetFieldTypeRequest) returns (GetFieldTypeResponse) {
		option (google.api.http) ={
			get: "/v1/fieldtype/{id}"
		};
	}
    // List FieldType, takes filters, limit, and cursor param.
	rpc ListFieldType(ListFieldTypeRequest) returns (ListFieldTypeResponse) {
	option (google.api.http) ={
		get: "/v1/fieldtype"
	};
}
    // Update FieldType
    rpc UpdateFieldType(UpdateFieldTypeRequest) returns (UpdateFieldTypeResponse){
        option (google.api.http) = {
            put: "/v1/fieldtype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/fieldtype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete FieldType
    rpc DeleteFieldType(DeleteFieldTypeRequest) returns (DeleteFieldTypeResponse){
        option (google.api.http) = {
            delete: "/v1/fieldtype/{id}"
        };
    }
	
	// CreateComponent takes a Component object to create.
	rpc CreateComponent(CreateComponentRequest) returns (CreateComponentResponse) {
		option (google.api.http) ={
			post: "/v1/component"
			body: "*"
		};
	}
    // GetComponent takes an id and returns a single Component.
	rpc GetComponent(GetComponentRequest) returns (GetComponentResponse) {
		option (google.api.http) ={
			get: "/v1/component/{id}"
		};
	}
    // List Component, takes filters, limit, and cursor param.
	rpc ListComponent(ListComponentRequest) returns (ListComponentResponse) {
	option (google.api.http) ={
		get: "/v1/component"
	};
}
    // Update Component
    rpc UpdateComponent(UpdateComponentRequest) returns (UpdateComponentResponse){
        option (google.api.http) = {
            put: "/v1/component/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/component/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Component
    rpc DeleteComponent(DeleteComponentRequest) returns (DeleteComponentResponse){
        option (google.api.http) = {
            delete: "/v1/component/{id}"
        };
    }
	
	// CreateField takes a Field object to create.
	rpc CreateField(CreateFieldRequest) returns (CreateFieldResponse) {
		option (google.api.http) ={
			post: "/v1/field"
			body: "*"
		};
	}
    // GetField takes an id and returns a single Field.
	rpc GetField(GetFieldRequest) returns (GetFieldResponse) {
		option (google.api.http) ={
			get: "/v1/field/{id}"
		};
	}
    // List Field, takes filters, limit, and cursor param.
	rpc ListField(ListFieldRequest) returns (ListFieldResponse) {
	option (google.api.http) ={
		get: "/v1/field"
	};
}
    // Update Field
    rpc UpdateField(UpdateFieldRequest) returns (UpdateFieldResponse){
        option (google.api.http) = {
            put: "/v1/field/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/field/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Field
    rpc DeleteField(DeleteFieldRequest) returns (DeleteFieldResponse){
        option (google.api.http) = {
            delete: "/v1/field/{id}"
        };
    }
	
	// CreateLayout takes a Layout object to create.
	rpc CreateLayout(CreateLayoutRequest) returns (CreateLayoutResponse) {
		option (google.api.http) ={
			post: "/v1/layout"
			body: "*"
		};
	}
    // GetLayout takes an id and returns a single Layout.
	rpc GetLayout(GetLayoutRequest) returns (GetLayoutResponse) {
		option (google.api.http) ={
			get: "/v1/layout/{id}"
		};
	}
    // List Layout, takes filters, limit, and cursor param.
	rpc ListLayout(ListLayoutRequest) returns (ListLayoutResponse) {
	option (google.api.http) ={
		get: "/v1/layout"
	};
}
    // Update Layout
    rpc UpdateLayout(UpdateLayoutRequest) returns (UpdateLayoutResponse){
        option (google.api.http) = {
            put: "/v1/layout/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/layout/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Layout
    rpc DeleteLayout(DeleteLayoutRequest) returns (DeleteLayoutResponse){
        option (google.api.http) = {
            delete: "/v1/layout/{id}"
        };
    }
	
	// CreateLandingPage takes a LandingPage object to create.
	rpc CreateLandingPage(CreateLandingPageRequest) returns (CreateLandingPageResponse) {
		option (google.api.http) ={
			post: "/v1/landingpage"
			body: "*"
		};
	}
    // GetLandingPage takes an id and returns a single LandingPage.
	rpc GetLandingPage(GetLandingPageRequest) returns (GetLandingPageResponse) {
		option (google.api.http) ={
			get: "/v1/landingpage/{id}"
		};
	}
    // List LandingPage, takes filters, limit, and cursor param.
	rpc ListLandingPage(ListLandingPageRequest) returns (ListLandingPageResponse) {
	option (google.api.http) ={
		get: "/v1/landingpage"
	};
}
    // Update LandingPage
    rpc UpdateLandingPage(UpdateLandingPageRequest) returns (UpdateLandingPageResponse){
        option (google.api.http) = {
            put: "/v1/landingpage/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/landingpage/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LandingPage
    rpc DeleteLandingPage(DeleteLandingPageRequest) returns (DeleteLandingPageResponse){
        option (google.api.http) = {
            delete: "/v1/landingpage/{id}"
        };
    }
	
	// CreateExperiment takes a Experiment object to create.
	rpc CreateExperiment(CreateExperimentRequest) returns (CreateExperimentResponse) {
		option (google.api.http) ={
			post: "/v1/experiment"
			body: "*"
		};
	}
    // GetExperiment takes an id and returns a single Experiment.
	rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse) {
		option (google.api.http) ={
			get: "/v1/experiment/{id}"
		};
	}
    // List Experiment, takes filters, limit, and cursor param.
	rpc ListExperiment(ListExperimentRequest) returns (ListExperimentResponse) {
	option (google.api.http) ={
		get: "/v1/experiment"
	};
}
    // Update Experiment
    rpc UpdateExperiment(UpdateExperimentRequest) returns (UpdateExperimentResponse){
        option (google.api.http) = {
            put: "/v1/experiment/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/experiment/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Experiment
    rpc DeleteExperiment(DeleteExperimentRequest) returns (DeleteExperimentResponse){
        option (google.api.http) = {
            delete: "/v1/experiment/{id}"
        };
    }
	
	// CreateIssue takes a Issue object to create.
	rpc CreateIssue(CreateIssueRequest) returns (CreateIssueResponse) {
		option (google.api.http) ={
			post: "/v1/issue"
			body: "*"
		};
	}
    // GetIssue takes an id and returns a single Issue.
	rpc GetIssue(GetIssueRequest) returns (GetIssueResponse) {
		option (google.api.http) ={
			get: "/v1/issue/{id}"
		};
	}
    // List Issue, takes filters, limit, and cursor param.
	rpc ListIssue(ListIssueRequest) returns (ListIssueResponse) {
	option (google.api.http) ={
		get: "/v1/issue"
	};
}
    // Update Issue
    rpc UpdateIssue(UpdateIssueRequest) returns (UpdateIssueResponse){
        option (google.api.http) = {
            put: "/v1/issue/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/issue/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Issue
    rpc DeleteIssue(DeleteIssueRequest) returns (DeleteIssueResponse){
        option (google.api.http) = {
            delete: "/v1/issue/{id}"
        };
    }
	
	// CreateCandidate takes a Candidate object to create.
	rpc CreateCandidate(CreateCandidateRequest) returns (CreateCandidateResponse) {
		option (google.api.http) ={
			post: "/v1/candidate"
			body: "*"
		};
	}
    // GetCandidate takes an id and returns a single Candidate.
	rpc GetCandidate(GetCandidateRequest) returns (GetCandidateResponse) {
		option (google.api.http) ={
			get: "/v1/candidate/{id}"
		};
	}
    // List Candidate, takes filters, limit, and cursor param.
	rpc ListCandidate(ListCandidateRequest) returns (ListCandidateResponse) {
	option (google.api.http) ={
		get: "/v1/candidate"
	};
}
    // Update Candidate
    rpc UpdateCandidate(UpdateCandidateRequest) returns (UpdateCandidateResponse){
        option (google.api.http) = {
            put: "/v1/candidate/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/candidate/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Candidate
    rpc DeleteCandidate(DeleteCandidateRequest) returns (DeleteCandidateResponse){
        option (google.api.http) = {
            delete: "/v1/candidate/{id}"
        };
    }
	
	// CreateDistrictType takes a DistrictType object to create.
	rpc CreateDistrictType(CreateDistrictTypeRequest) returns (CreateDistrictTypeResponse) {
		option (google.api.http) ={
			post: "/v1/districttype"
			body: "*"
		};
	}
    // GetDistrictType takes an id and returns a single DistrictType.
	rpc GetDistrictType(GetDistrictTypeRequest) returns (GetDistrictTypeResponse) {
		option (google.api.http) ={
			get: "/v1/districttype/{id}"
		};
	}
    // List DistrictType, takes filters, limit, and cursor param.
	rpc ListDistrictType(ListDistrictTypeRequest) returns (ListDistrictTypeResponse) {
	option (google.api.http) ={
		get: "/v1/districttype"
	};
}
    // Update DistrictType
    rpc UpdateDistrictType(UpdateDistrictTypeRequest) returns (UpdateDistrictTypeResponse){
        option (google.api.http) = {
            put: "/v1/districttype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/districttype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete DistrictType
    rpc DeleteDistrictType(DeleteDistrictTypeRequest) returns (DeleteDistrictTypeResponse){
        option (google.api.http) = {
            delete: "/v1/districttype/{id}"
        };
    }
	
	// CreateDistrict takes a District object to create.
	rpc CreateDistrict(CreateDistrictRequest) returns (CreateDistrictResponse) {
		option (google.api.http) ={
			post: "/v1/district"
			body: "*"
		};
	}
    // GetDistrict takes an id and returns a single District.
	rpc GetDistrict(GetDistrictRequest) returns (GetDistrictResponse) {
		option (google.api.http) ={
			get: "/v1/district/{id}"
		};
	}
    // List District, takes filters, limit, and cursor param.
	rpc ListDistrict(ListDistrictRequest) returns (ListDistrictResponse) {
	option (google.api.http) ={
		get: "/v1/district"
	};
}
    // Update District
    rpc UpdateDistrict(UpdateDistrictRequest) returns (UpdateDistrictResponse){
        option (google.api.http) = {
            put: "/v1/district/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/district/{item.id}"
                body: "*"
            }
        };
    }

    // Delete District
    rpc DeleteDistrict(DeleteDistrictRequest) returns (DeleteDistrictResponse){
        option (google.api.http) = {
            delete: "/v1/district/{id}"
        };
    }
	
	// CreateOffice takes a Office object to create.
	rpc CreateOffice(CreateOfficeRequest) returns (CreateOfficeResponse) {
		option (google.api.http) ={
			post: "/v1/office"
			body: "*"
		};
	}
    // GetOffice takes an id and returns a single Office.
	rpc GetOffice(GetOfficeRequest) returns (GetOfficeResponse) {
		option (google.api.http) ={
			get: "/v1/office/{id}"
		};
	}
    // List Office, takes filters, limit, and cursor param.
	rpc ListOffice(ListOfficeRequest) returns (ListOfficeResponse) {
	option (google.api.http) ={
		get: "/v1/office"
	};
}
    // Update Office
    rpc UpdateOffice(UpdateOfficeRequest) returns (UpdateOfficeResponse){
        option (google.api.http) = {
            put: "/v1/office/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/office/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Office
    rpc DeleteOffice(DeleteOfficeRequest) returns (DeleteOfficeResponse){
        option (google.api.http) = {
            delete: "/v1/office/{id}"
        };
    }
	
	// CreateVolunteerOpportunityType takes a VolunteerOpportunityType object to create.
	rpc CreateVolunteerOpportunityType(CreateVolunteerOpportunityTypeRequest) returns (CreateVolunteerOpportunityTypeResponse) {
		option (google.api.http) ={
			post: "/v1/volunteeropportunitytype"
			body: "*"
		};
	}
    // GetVolunteerOpportunityType takes an id and returns a single VolunteerOpportunityType.
	rpc GetVolunteerOpportunityType(GetVolunteerOpportunityTypeRequest) returns (GetVolunteerOpportunityTypeResponse) {
		option (google.api.http) ={
			get: "/v1/volunteeropportunitytype/{id}"
		};
	}
    // List VolunteerOpportunityType, takes filters, limit, and cursor param.
	rpc ListVolunteerOpportunityType(ListVolunteerOpportunityTypeRequest) returns (ListVolunteerOpportunityTypeResponse) {
	option (google.api.http) ={
		get: "/v1/volunteeropportunitytype"
	};
}
    // Update VolunteerOpportunityType
    rpc UpdateVolunteerOpportunityType(UpdateVolunteerOpportunityTypeRequest) returns (UpdateVolunteerOpportunityTypeResponse){
        option (google.api.http) = {
            put: "/v1/volunteeropportunitytype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunitytype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunityType
    rpc DeleteVolunteerOpportunityType(DeleteVolunteerOpportunityTypeRequest) returns (DeleteVolunteerOpportunityTypeResponse){
        option (google.api.http) = {
            delete: "/v1/volunteeropportunitytype/{id}"
        };
    }
	
	// CreateLiveEventType takes a LiveEventType object to create.
	rpc CreateLiveEventType(CreateLiveEventTypeRequest) returns (CreateLiveEventTypeResponse) {
		option (google.api.http) ={
			post: "/v1/liveeventtype"
			body: "*"
		};
	}
    // GetLiveEventType takes an id and returns a single LiveEventType.
	rpc GetLiveEventType(GetLiveEventTypeRequest) returns (GetLiveEventTypeResponse) {
		option (google.api.http) ={
			get: "/v1/liveeventtype/{id}"
		};
	}
    // List LiveEventType, takes filters, limit, and cursor param.
	rpc ListLiveEventType(ListLiveEventTypeRequest) returns (ListLiveEventTypeResponse) {
	option (google.api.http) ={
		get: "/v1/liveeventtype"
	};
}
    // Update LiveEventType
    rpc UpdateLiveEventType(UpdateLiveEventTypeRequest) returns (UpdateLiveEventTypeResponse){
        option (google.api.http) = {
            put: "/v1/liveeventtype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveeventtype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LiveEventType
    rpc DeleteLiveEventType(DeleteLiveEventTypeRequest) returns (DeleteLiveEventTypeResponse){
        option (google.api.http) = {
            delete: "/v1/liveeventtype/{id}"
        };
    }
	
	// CreateCompany takes a Company object to create.
	rpc CreateCompany(CreateCompanyRequest) returns (CreateCompanyResponse) {
		option (google.api.http) ={
			post: "/v1/company"
			body: "*"
		};
	}
    // GetCompany takes an id and returns a single Company.
	rpc GetCompany(GetCompanyRequest) returns (GetCompanyResponse) {
		option (google.api.http) ={
			get: "/v1/company/{id}"
		};
	}
    // List Company, takes filters, limit, and cursor param.
	rpc ListCompany(ListCompanyRequest) returns (ListCompanyResponse) {
	option (google.api.http) ={
		get: "/v1/company"
	};
}
    // Update Company
    rpc UpdateCompany(UpdateCompanyRequest) returns (UpdateCompanyResponse){
        option (google.api.http) = {
            put: "/v1/company/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/company/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Company
    rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse){
        option (google.api.http) = {
            delete: "/v1/company/{id}"
        };
    }
	
	// CreateProductType takes a ProductType object to create.
	rpc CreateProductType(CreateProductTypeRequest) returns (CreateProductTypeResponse) {
		option (google.api.http) ={
			post: "/v1/producttype"
			body: "*"
		};
	}
    // GetProductType takes an id and returns a single ProductType.
	rpc GetProductType(GetProductTypeRequest) returns (GetProductTypeResponse) {
		option (google.api.http) ={
			get: "/v1/producttype/{id}"
		};
	}
    // List ProductType, takes filters, limit, and cursor param.
	rpc ListProductType(ListProductTypeRequest) returns (ListProductTypeResponse) {
	option (google.api.http) ={
		get: "/v1/producttype"
	};
}
    // Update ProductType
    rpc UpdateProductType(UpdateProductTypeRequest) returns (UpdateProductTypeResponse){
        option (google.api.http) = {
            put: "/v1/producttype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/producttype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ProductType
    rpc DeleteProductType(DeleteProductTypeRequest) returns (DeleteProductTypeResponse){
        option (google.api.http) = {
            delete: "/v1/producttype/{id}"
        };
    }
	
	// CreateCustomerCart takes a CustomerCart object to create.
	rpc CreateCustomerCart(CreateCustomerCartRequest) returns (CreateCustomerCartResponse) {
		option (google.api.http) ={
			post: "/v1/customercart"
			body: "*"
		};
	}
    // GetCustomerCart takes an id and returns a single CustomerCart.
	rpc GetCustomerCart(GetCustomerCartRequest) returns (GetCustomerCartResponse) {
		option (google.api.http) ={
			get: "/v1/customercart/{id}"
		};
	}
    // List CustomerCart, takes filters, limit, and cursor param.
	rpc ListCustomerCart(ListCustomerCartRequest) returns (ListCustomerCartResponse) {
	option (google.api.http) ={
		get: "/v1/customercart"
	};
}
    // Update CustomerCart
    rpc UpdateCustomerCart(UpdateCustomerCartRequest) returns (UpdateCustomerCartResponse){
        option (google.api.http) = {
            put: "/v1/customercart/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/customercart/{item.id}"
                body: "*"
            }
        };
    }

    // Delete CustomerCart
    rpc DeleteCustomerCart(DeleteCustomerCartRequest) returns (DeleteCustomerCartResponse){
        option (google.api.http) = {
            delete: "/v1/customercart/{id}"
        };
    }
	
	// CreatePayment takes a Payment object to create.
	rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
		option (google.api.http) ={
			post: "/v1/payment"
			body: "*"
		};
	}
    // GetPayment takes an id and returns a single Payment.
	rpc GetPayment(GetPaymentRequest) returns (GetPaymentResponse) {
		option (google.api.http) ={
			get: "/v1/payment/{id}"
		};
	}
    // List Payment, takes filters, limit, and cursor param.
	rpc ListPayment(ListPaymentRequest) returns (ListPaymentResponse) {
	option (google.api.http) ={
		get: "/v1/payment"
	};
}
    // Update Payment
    rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse){
        option (google.api.http) = {
            put: "/v1/payment/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/payment/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Payment
    rpc DeletePayment(DeletePaymentRequest) returns (DeletePaymentResponse){
        option (google.api.http) = {
            delete: "/v1/payment/{id}"
        };
    }
	
	// CreateDelivery takes a Delivery object to create.
	rpc CreateDelivery(CreateDeliveryRequest) returns (CreateDeliveryResponse) {
		option (google.api.http) ={
			post: "/v1/delivery"
			body: "*"
		};
	}
    // GetDelivery takes an id and returns a single Delivery.
	rpc GetDelivery(GetDeliveryRequest) returns (GetDeliveryResponse) {
		option (google.api.http) ={
			get: "/v1/delivery/{id}"
		};
	}
    // List Delivery, takes filters, limit, and cursor param.
	rpc ListDelivery(ListDeliveryRequest) returns (ListDeliveryResponse) {
	option (google.api.http) ={
		get: "/v1/delivery"
	};
}
    // Update Delivery
    rpc UpdateDelivery(UpdateDeliveryRequest) returns (UpdateDeliveryResponse){
        option (google.api.http) = {
            put: "/v1/delivery/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/delivery/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Delivery
    rpc DeleteDelivery(DeleteDeliveryRequest) returns (DeleteDeliveryResponse){
        option (google.api.http) = {
            delete: "/v1/delivery/{id}"
        };
    }
	
	// CreateBoycott takes a Boycott object to create.
	rpc CreateBoycott(CreateBoycottRequest) returns (CreateBoycottResponse) {
		option (google.api.http) ={
			post: "/v1/boycott"
			body: "*"
		};
	}
    // GetBoycott takes an id and returns a single Boycott.
	rpc GetBoycott(GetBoycottRequest) returns (GetBoycottResponse) {
		option (google.api.http) ={
			get: "/v1/boycott/{id}"
		};
	}
    // List Boycott, takes filters, limit, and cursor param.
	rpc ListBoycott(ListBoycottRequest) returns (ListBoycottResponse) {
	option (google.api.http) ={
		get: "/v1/boycott"
	};
}
    // Update Boycott
    rpc UpdateBoycott(UpdateBoycottRequest) returns (UpdateBoycottResponse){
        option (google.api.http) = {
            put: "/v1/boycott/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/boycott/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Boycott
    rpc DeleteBoycott(DeleteBoycottRequest) returns (DeleteBoycottResponse){
        option (google.api.http) = {
            delete: "/v1/boycott/{id}"
        };
    }
	
	// CreateBoycottMembership takes a BoycottMembership object to create.
	rpc CreateBoycottMembership(CreateBoycottMembershipRequest) returns (CreateBoycottMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/boycottmembership"
			body: "*"
		};
	}
    // GetBoycottMembership takes an id and returns a single BoycottMembership.
	rpc GetBoycottMembership(GetBoycottMembershipRequest) returns (GetBoycottMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/boycottmembership/{id}"
		};
	}
    // List BoycottMembership, takes filters, limit, and cursor param.
	rpc ListBoycottMembership(ListBoycottMembershipRequest) returns (ListBoycottMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/boycottmembership"
	};
}
    // Update BoycottMembership
    rpc UpdateBoycottMembership(UpdateBoycottMembershipRequest) returns (UpdateBoycottMembershipResponse){
        option (google.api.http) = {
            put: "/v1/boycottmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/boycottmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete BoycottMembership
    rpc DeleteBoycottMembership(DeleteBoycottMembershipRequest) returns (DeleteBoycottMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/boycottmembership/{id}"
        };
    }
	
	// CreateElection takes a Election object to create.
	rpc CreateElection(CreateElectionRequest) returns (CreateElectionResponse) {
		option (google.api.http) ={
			post: "/v1/election"
			body: "*"
		};
	}
    // GetElection takes an id and returns a single Election.
	rpc GetElection(GetElectionRequest) returns (GetElectionResponse) {
		option (google.api.http) ={
			get: "/v1/election/{id}"
		};
	}
    // List Election, takes filters, limit, and cursor param.
	rpc ListElection(ListElectionRequest) returns (ListElectionResponse) {
	option (google.api.http) ={
		get: "/v1/election"
	};
}
    // Update Election
    rpc UpdateElection(UpdateElectionRequest) returns (UpdateElectionResponse){
        option (google.api.http) = {
            put: "/v1/election/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/election/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Election
    rpc DeleteElection(DeleteElectionRequest) returns (DeleteElectionResponse){
        option (google.api.http) = {
            delete: "/v1/election/{id}"
        };
    }
	
	// CreateElectionMembership takes a ElectionMembership object to create.
	rpc CreateElectionMembership(CreateElectionMembershipRequest) returns (CreateElectionMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/electionmembership"
			body: "*"
		};
	}
    // GetElectionMembership takes an id and returns a single ElectionMembership.
	rpc GetElectionMembership(GetElectionMembershipRequest) returns (GetElectionMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/electionmembership/{id}"
		};
	}
    // List ElectionMembership, takes filters, limit, and cursor param.
	rpc ListElectionMembership(ListElectionMembershipRequest) returns (ListElectionMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/electionmembership"
	};
}
    // Update ElectionMembership
    rpc UpdateElectionMembership(UpdateElectionMembershipRequest) returns (UpdateElectionMembershipResponse){
        option (google.api.http) = {
            put: "/v1/electionmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/electionmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ElectionMembership
    rpc DeleteElectionMembership(DeleteElectionMembershipRequest) returns (DeleteElectionMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/electionmembership/{id}"
        };
    }
	
	// CreatePetitionMembership takes a PetitionMembership object to create.
	rpc CreatePetitionMembership(CreatePetitionMembershipRequest) returns (CreatePetitionMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/petitionmembership"
			body: "*"
		};
	}
    // GetPetitionMembership takes an id and returns a single PetitionMembership.
	rpc GetPetitionMembership(GetPetitionMembershipRequest) returns (GetPetitionMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/petitionmembership/{id}"
		};
	}
    // List PetitionMembership, takes filters, limit, and cursor param.
	rpc ListPetitionMembership(ListPetitionMembershipRequest) returns (ListPetitionMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/petitionmembership"
	};
}
    // Update PetitionMembership
    rpc UpdatePetitionMembership(UpdatePetitionMembershipRequest) returns (UpdatePetitionMembershipResponse){
        option (google.api.http) = {
            put: "/v1/petitionmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/petitionmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete PetitionMembership
    rpc DeletePetitionMembership(DeletePetitionMembershipRequest) returns (DeletePetitionMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/petitionmembership/{id}"
        };
    }
	
	// CreatePollMembership takes a PollMembership object to create.
	rpc CreatePollMembership(CreatePollMembershipRequest) returns (CreatePollMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/pollmembership"
			body: "*"
		};
	}
    // GetPollMembership takes an id and returns a single PollMembership.
	rpc GetPollMembership(GetPollMembershipRequest) returns (GetPollMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/pollmembership/{id}"
		};
	}
    // List PollMembership, takes filters, limit, and cursor param.
	rpc ListPollMembership(ListPollMembershipRequest) returns (ListPollMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/pollmembership"
	};
}
    // Update PollMembership
    rpc UpdatePollMembership(UpdatePollMembershipRequest) returns (UpdatePollMembershipResponse){
        option (google.api.http) = {
            put: "/v1/pollmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/pollmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete PollMembership
    rpc DeletePollMembership(DeletePollMembershipRequest) returns (DeletePollMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/pollmembership/{id}"
        };
    }
	
	// CreateVolunteerOpportunityMembership takes a VolunteerOpportunityMembership object to create.
	rpc CreateVolunteerOpportunityMembership(CreateVolunteerOpportunityMembershipRequest) returns (CreateVolunteerOpportunityMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/volunteeropportunitymembership"
			body: "*"
		};
	}
    // GetVolunteerOpportunityMembership takes an id and returns a single VolunteerOpportunityMembership.
	rpc GetVolunteerOpportunityMembership(GetVolunteerOpportunityMembershipRequest) returns (GetVolunteerOpportunityMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/volunteeropportunitymembership/{id}"
		};
	}
    // List VolunteerOpportunityMembership, takes filters, limit, and cursor param.
	rpc ListVolunteerOpportunityMembership(ListVolunteerOpportunityMembershipRequest) returns (ListVolunteerOpportunityMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/volunteeropportunitymembership"
	};
}
    // Update VolunteerOpportunityMembership
    rpc UpdateVolunteerOpportunityMembership(UpdateVolunteerOpportunityMembershipRequest) returns (UpdateVolunteerOpportunityMembershipResponse){
        option (google.api.http) = {
            put: "/v1/volunteeropportunitymembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunitymembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunityMembership
    rpc DeleteVolunteerOpportunityMembership(DeleteVolunteerOpportunityMembershipRequest) returns (DeleteVolunteerOpportunityMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/volunteeropportunitymembership/{id}"
        };
    }
	
	// CreateLiveEventMembership takes a LiveEventMembership object to create.
	rpc CreateLiveEventMembership(CreateLiveEventMembershipRequest) returns (CreateLiveEventMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/liveeventmembership"
			body: "*"
		};
	}
    // GetLiveEventMembership takes an id and returns a single LiveEventMembership.
	rpc GetLiveEventMembership(GetLiveEventMembershipRequest) returns (GetLiveEventMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/liveeventmembership/{id}"
		};
	}
    // List LiveEventMembership, takes filters, limit, and cursor param.
	rpc ListLiveEventMembership(ListLiveEventMembershipRequest) returns (ListLiveEventMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/liveeventmembership"
	};
}
    // Update LiveEventMembership
    rpc UpdateLiveEventMembership(UpdateLiveEventMembershipRequest) returns (UpdateLiveEventMembershipResponse){
        option (google.api.http) = {
            put: "/v1/liveeventmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveeventmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LiveEventMembership
    rpc DeleteLiveEventMembership(DeleteLiveEventMembershipRequest) returns (DeleteLiveEventMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/liveeventmembership/{id}"
        };
    }
	
	// CreateProduct takes a Product object to create.
	rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
		option (google.api.http) ={
			post: "/v1/product"
			body: "*"
		};
	}
    // GetProduct takes an id and returns a single Product.
	rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
		option (google.api.http) ={
			get: "/v1/product/{id}"
		};
	}
    // List Product, takes filters, limit, and cursor param.
	rpc ListProduct(ListProductRequest) returns (ListProductResponse) {
	option (google.api.http) ={
		get: "/v1/product"
	};
}
    // Update Product
    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse){
        option (google.api.http) = {
            put: "/v1/product/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/product/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Product
    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse){
        option (google.api.http) = {
            delete: "/v1/product/{id}"
        };
    }
	
	// CreateProductMembership takes a ProductMembership object to create.
	rpc CreateProductMembership(CreateProductMembershipRequest) returns (CreateProductMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/productmembership"
			body: "*"
		};
	}
    // GetProductMembership takes an id and returns a single ProductMembership.
	rpc GetProductMembership(GetProductMembershipRequest) returns (GetProductMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/productmembership/{id}"
		};
	}
    // List ProductMembership, takes filters, limit, and cursor param.
	rpc ListProductMembership(ListProductMembershipRequest) returns (ListProductMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/productmembership"
	};
}
    // Update ProductMembership
    rpc UpdateProductMembership(UpdateProductMembershipRequest) returns (UpdateProductMembershipResponse){
        option (google.api.http) = {
            put: "/v1/productmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/productmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ProductMembership
    rpc DeleteProductMembership(DeleteProductMembershipRequest) returns (DeleteProductMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/productmembership/{id}"
        };
    }
	
	// CreateDonationCampaign takes a DonationCampaign object to create.
	rpc CreateDonationCampaign(CreateDonationCampaignRequest) returns (CreateDonationCampaignResponse) {
		option (google.api.http) ={
			post: "/v1/donationcampaign"
			body: "*"
		};
	}
    // GetDonationCampaign takes an id and returns a single DonationCampaign.
	rpc GetDonationCampaign(GetDonationCampaignRequest) returns (GetDonationCampaignResponse) {
		option (google.api.http) ={
			get: "/v1/donationcampaign/{id}"
		};
	}
    // List DonationCampaign, takes filters, limit, and cursor param.
	rpc ListDonationCampaign(ListDonationCampaignRequest) returns (ListDonationCampaignResponse) {
	option (google.api.http) ={
		get: "/v1/donationcampaign"
	};
}
    // Update DonationCampaign
    rpc UpdateDonationCampaign(UpdateDonationCampaignRequest) returns (UpdateDonationCampaignResponse){
        option (google.api.http) = {
            put: "/v1/donationcampaign/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/donationcampaign/{item.id}"
                body: "*"
            }
        };
    }

    // Delete DonationCampaign
    rpc DeleteDonationCampaign(DeleteDonationCampaignRequest) returns (DeleteDonationCampaignResponse){
        option (google.api.http) = {
            delete: "/v1/donationcampaign/{id}"
        };
    }
	
	// CreateDonationCampaignMembership takes a DonationCampaignMembership object to create.
	rpc CreateDonationCampaignMembership(CreateDonationCampaignMembershipRequest) returns (CreateDonationCampaignMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/donationcampaignmembership"
			body: "*"
		};
	}
    // GetDonationCampaignMembership takes an id and returns a single DonationCampaignMembership.
	rpc GetDonationCampaignMembership(GetDonationCampaignMembershipRequest) returns (GetDonationCampaignMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/donationcampaignmembership/{id}"
		};
	}
    // List DonationCampaignMembership, takes filters, limit, and cursor param.
	rpc ListDonationCampaignMembership(ListDonationCampaignMembershipRequest) returns (ListDonationCampaignMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/donationcampaignmembership"
	};
}
    // Update DonationCampaignMembership
    rpc UpdateDonationCampaignMembership(UpdateDonationCampaignMembershipRequest) returns (UpdateDonationCampaignMembershipResponse){
        option (google.api.http) = {
            put: "/v1/donationcampaignmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/donationcampaignmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete DonationCampaignMembership
    rpc DeleteDonationCampaignMembership(DeleteDonationCampaignMembershipRequest) returns (DeleteDonationCampaignMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/donationcampaignmembership/{id}"
        };
    }
	
	// CreatePetition takes a Petition object to create.
	rpc CreatePetition(CreatePetitionRequest) returns (CreatePetitionResponse) {
		option (google.api.http) ={
			post: "/v1/petition"
			body: "*"
		};
	}
    // GetPetition takes an id and returns a single Petition.
	rpc GetPetition(GetPetitionRequest) returns (GetPetitionResponse) {
		option (google.api.http) ={
			get: "/v1/petition/{id}"
		};
	}
    // List Petition, takes filters, limit, and cursor param.
	rpc ListPetition(ListPetitionRequest) returns (ListPetitionResponse) {
	option (google.api.http) ={
		get: "/v1/petition"
	};
}
    // Update Petition
    rpc UpdatePetition(UpdatePetitionRequest) returns (UpdatePetitionResponse){
        option (google.api.http) = {
            put: "/v1/petition/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/petition/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Petition
    rpc DeletePetition(DeletePetitionRequest) returns (DeletePetitionResponse){
        option (google.api.http) = {
            delete: "/v1/petition/{id}"
        };
    }
	
	// CreatePetitionSigner takes a PetitionSigner object to create.
	rpc CreatePetitionSigner(CreatePetitionSignerRequest) returns (CreatePetitionSignerResponse) {
		option (google.api.http) ={
			post: "/v1/petitionsigner"
			body: "*"
		};
	}
    // GetPetitionSigner takes an id and returns a single PetitionSigner.
	rpc GetPetitionSigner(GetPetitionSignerRequest) returns (GetPetitionSignerResponse) {
		option (google.api.http) ={
			get: "/v1/petitionsigner/{id}"
		};
	}
    // List PetitionSigner, takes filters, limit, and cursor param.
	rpc ListPetitionSigner(ListPetitionSignerRequest) returns (ListPetitionSignerResponse) {
	option (google.api.http) ={
		get: "/v1/petitionsigner"
	};
}
    // Update PetitionSigner
    rpc UpdatePetitionSigner(UpdatePetitionSignerRequest) returns (UpdatePetitionSignerResponse){
        option (google.api.http) = {
            put: "/v1/petitionsigner/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/petitionsigner/{item.id}"
                body: "*"
            }
        };
    }

    // Delete PetitionSigner
    rpc DeletePetitionSigner(DeletePetitionSignerRequest) returns (DeletePetitionSignerResponse){
        option (google.api.http) = {
            delete: "/v1/petitionsigner/{id}"
        };
    }
	
	// CreatePoll takes a Poll object to create.
	rpc CreatePoll(CreatePollRequest) returns (CreatePollResponse) {
		option (google.api.http) ={
			post: "/v1/poll"
			body: "*"
		};
	}
    // GetPoll takes an id and returns a single Poll.
	rpc GetPoll(GetPollRequest) returns (GetPollResponse) {
		option (google.api.http) ={
			get: "/v1/poll/{id}"
		};
	}
    // List Poll, takes filters, limit, and cursor param.
	rpc ListPoll(ListPollRequest) returns (ListPollResponse) {
	option (google.api.http) ={
		get: "/v1/poll"
	};
}
    // Update Poll
    rpc UpdatePoll(UpdatePollRequest) returns (UpdatePollResponse){
        option (google.api.http) = {
            put: "/v1/poll/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/poll/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Poll
    rpc DeletePoll(DeletePollRequest) returns (DeletePollResponse){
        option (google.api.http) = {
            delete: "/v1/poll/{id}"
        };
    }
	
	// CreatePollRespondant takes a PollRespondant object to create.
	rpc CreatePollRespondant(CreatePollRespondantRequest) returns (CreatePollRespondantResponse) {
		option (google.api.http) ={
			post: "/v1/pollrespondant"
			body: "*"
		};
	}
    // GetPollRespondant takes an id and returns a single PollRespondant.
	rpc GetPollRespondant(GetPollRespondantRequest) returns (GetPollRespondantResponse) {
		option (google.api.http) ={
			get: "/v1/pollrespondant/{id}"
		};
	}
    // List PollRespondant, takes filters, limit, and cursor param.
	rpc ListPollRespondant(ListPollRespondantRequest) returns (ListPollRespondantResponse) {
	option (google.api.http) ={
		get: "/v1/pollrespondant"
	};
}
    // Update PollRespondant
    rpc UpdatePollRespondant(UpdatePollRespondantRequest) returns (UpdatePollRespondantResponse){
        option (google.api.http) = {
            put: "/v1/pollrespondant/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/pollrespondant/{item.id}"
                body: "*"
            }
        };
    }

    // Delete PollRespondant
    rpc DeletePollRespondant(DeletePollRespondantRequest) returns (DeletePollRespondantResponse){
        option (google.api.http) = {
            delete: "/v1/pollrespondant/{id}"
        };
    }
	
	// CreatePurchaser takes a Purchaser object to create.
	rpc CreatePurchaser(CreatePurchaserRequest) returns (CreatePurchaserResponse) {
		option (google.api.http) ={
			post: "/v1/purchaser"
			body: "*"
		};
	}
    // GetPurchaser takes an id and returns a single Purchaser.
	rpc GetPurchaser(GetPurchaserRequest) returns (GetPurchaserResponse) {
		option (google.api.http) ={
			get: "/v1/purchaser/{id}"
		};
	}
    // List Purchaser, takes filters, limit, and cursor param.
	rpc ListPurchaser(ListPurchaserRequest) returns (ListPurchaserResponse) {
	option (google.api.http) ={
		get: "/v1/purchaser"
	};
}
    // Update Purchaser
    rpc UpdatePurchaser(UpdatePurchaserRequest) returns (UpdatePurchaserResponse){
        option (google.api.http) = {
            put: "/v1/purchaser/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/purchaser/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Purchaser
    rpc DeletePurchaser(DeletePurchaserRequest) returns (DeletePurchaserResponse){
        option (google.api.http) = {
            delete: "/v1/purchaser/{id}"
        };
    }
	
	// CreateCustomerOrder takes a CustomerOrder object to create.
	rpc CreateCustomerOrder(CreateCustomerOrderRequest) returns (CreateCustomerOrderResponse) {
		option (google.api.http) ={
			post: "/v1/customerorder"
			body: "*"
		};
	}
    // GetCustomerOrder takes an id and returns a single CustomerOrder.
	rpc GetCustomerOrder(GetCustomerOrderRequest) returns (GetCustomerOrderResponse) {
		option (google.api.http) ={
			get: "/v1/customerorder/{id}"
		};
	}
    // List CustomerOrder, takes filters, limit, and cursor param.
	rpc ListCustomerOrder(ListCustomerOrderRequest) returns (ListCustomerOrderResponse) {
	option (google.api.http) ={
		get: "/v1/customerorder"
	};
}
    // Update CustomerOrder
    rpc UpdateCustomerOrder(UpdateCustomerOrderRequest) returns (UpdateCustomerOrderResponse){
        option (google.api.http) = {
            put: "/v1/customerorder/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/customerorder/{item.id}"
                body: "*"
            }
        };
    }

    // Delete CustomerOrder
    rpc DeleteCustomerOrder(DeleteCustomerOrderRequest) returns (DeleteCustomerOrderResponse){
        option (google.api.http) = {
            delete: "/v1/customerorder/{id}"
        };
    }
	
	// CreateDonor takes a Donor object to create.
	rpc CreateDonor(CreateDonorRequest) returns (CreateDonorResponse) {
		option (google.api.http) ={
			post: "/v1/donor"
			body: "*"
		};
	}
    // GetDonor takes an id and returns a single Donor.
	rpc GetDonor(GetDonorRequest) returns (GetDonorResponse) {
		option (google.api.http) ={
			get: "/v1/donor/{id}"
		};
	}
    // List Donor, takes filters, limit, and cursor param.
	rpc ListDonor(ListDonorRequest) returns (ListDonorResponse) {
	option (google.api.http) ={
		get: "/v1/donor"
	};
}
    // Update Donor
    rpc UpdateDonor(UpdateDonorRequest) returns (UpdateDonorResponse){
        option (google.api.http) = {
            put: "/v1/donor/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/donor/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Donor
    rpc DeleteDonor(DeleteDonorRequest) returns (DeleteDonorResponse){
        option (google.api.http) = {
            delete: "/v1/donor/{id}"
        };
    }
	
	// CreateLiveEvent takes a LiveEvent object to create.
	rpc CreateLiveEvent(CreateLiveEventRequest) returns (CreateLiveEventResponse) {
		option (google.api.http) ={
			post: "/v1/liveevent"
			body: "*"
		};
	}
    // GetLiveEvent takes an id and returns a single LiveEvent.
	rpc GetLiveEvent(GetLiveEventRequest) returns (GetLiveEventResponse) {
		option (google.api.http) ={
			get: "/v1/liveevent/{id}"
		};
	}
    // List LiveEvent, takes filters, limit, and cursor param.
	rpc ListLiveEvent(ListLiveEventRequest) returns (ListLiveEventResponse) {
	option (google.api.http) ={
		get: "/v1/liveevent"
	};
}
    // Update LiveEvent
    rpc UpdateLiveEvent(UpdateLiveEventRequest) returns (UpdateLiveEventResponse){
        option (google.api.http) = {
            put: "/v1/liveevent/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/liveevent/{item.id}"
                body: "*"
            }
        };
    }

    // Delete LiveEvent
    rpc DeleteLiveEvent(DeleteLiveEventRequest) returns (DeleteLiveEventResponse){
        option (google.api.http) = {
            delete: "/v1/liveevent/{id}"
        };
    }
	
	// CreateEventAttendee takes a EventAttendee object to create.
	rpc CreateEventAttendee(CreateEventAttendeeRequest) returns (CreateEventAttendeeResponse) {
		option (google.api.http) ={
			post: "/v1/eventattendee"
			body: "*"
		};
	}
    // GetEventAttendee takes an id and returns a single EventAttendee.
	rpc GetEventAttendee(GetEventAttendeeRequest) returns (GetEventAttendeeResponse) {
		option (google.api.http) ={
			get: "/v1/eventattendee/{id}"
		};
	}
    // List EventAttendee, takes filters, limit, and cursor param.
	rpc ListEventAttendee(ListEventAttendeeRequest) returns (ListEventAttendeeResponse) {
	option (google.api.http) ={
		get: "/v1/eventattendee"
	};
}
    // Update EventAttendee
    rpc UpdateEventAttendee(UpdateEventAttendeeRequest) returns (UpdateEventAttendeeResponse){
        option (google.api.http) = {
            put: "/v1/eventattendee/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/eventattendee/{item.id}"
                body: "*"
            }
        };
    }

    // Delete EventAttendee
    rpc DeleteEventAttendee(DeleteEventAttendeeRequest) returns (DeleteEventAttendeeResponse){
        option (google.api.http) = {
            delete: "/v1/eventattendee/{id}"
        };
    }
	
	// CreateVoter takes a Voter object to create.
	rpc CreateVoter(CreateVoterRequest) returns (CreateVoterResponse) {
		option (google.api.http) ={
			post: "/v1/voter"
			body: "*"
		};
	}
    // GetVoter takes an id and returns a single Voter.
	rpc GetVoter(GetVoterRequest) returns (GetVoterResponse) {
		option (google.api.http) ={
			get: "/v1/voter/{id}"
		};
	}
    // List Voter, takes filters, limit, and cursor param.
	rpc ListVoter(ListVoterRequest) returns (ListVoterResponse) {
	option (google.api.http) ={
		get: "/v1/voter"
	};
}
    // Update Voter
    rpc UpdateVoter(UpdateVoterRequest) returns (UpdateVoterResponse){
        option (google.api.http) = {
            put: "/v1/voter/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/voter/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Voter
    rpc DeleteVoter(DeleteVoterRequest) returns (DeleteVoterResponse){
        option (google.api.http) = {
            delete: "/v1/voter/{id}"
        };
    }
	
	// CreateVolunteerOpportunity takes a VolunteerOpportunity object to create.
	rpc CreateVolunteerOpportunity(CreateVolunteerOpportunityRequest) returns (CreateVolunteerOpportunityResponse) {
		option (google.api.http) ={
			post: "/v1/volunteeropportunity"
			body: "*"
		};
	}
    // GetVolunteerOpportunity takes an id and returns a single VolunteerOpportunity.
	rpc GetVolunteerOpportunity(GetVolunteerOpportunityRequest) returns (GetVolunteerOpportunityResponse) {
		option (google.api.http) ={
			get: "/v1/volunteeropportunity/{id}"
		};
	}
    // List VolunteerOpportunity, takes filters, limit, and cursor param.
	rpc ListVolunteerOpportunity(ListVolunteerOpportunityRequest) returns (ListVolunteerOpportunityResponse) {
	option (google.api.http) ={
		get: "/v1/volunteeropportunity"
	};
}
    // Update VolunteerOpportunity
    rpc UpdateVolunteerOpportunity(UpdateVolunteerOpportunityRequest) returns (UpdateVolunteerOpportunityResponse){
        option (google.api.http) = {
            put: "/v1/volunteeropportunity/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteeropportunity/{item.id}"
                body: "*"
            }
        };
    }

    // Delete VolunteerOpportunity
    rpc DeleteVolunteerOpportunity(DeleteVolunteerOpportunityRequest) returns (DeleteVolunteerOpportunityResponse){
        option (google.api.http) = {
            delete: "/v1/volunteeropportunity/{id}"
        };
    }
	
	// CreateVolunteer takes a Volunteer object to create.
	rpc CreateVolunteer(CreateVolunteerRequest) returns (CreateVolunteerResponse) {
		option (google.api.http) ={
			post: "/v1/volunteer"
			body: "*"
		};
	}
    // GetVolunteer takes an id and returns a single Volunteer.
	rpc GetVolunteer(GetVolunteerRequest) returns (GetVolunteerResponse) {
		option (google.api.http) ={
			get: "/v1/volunteer/{id}"
		};
	}
    // List Volunteer, takes filters, limit, and cursor param.
	rpc ListVolunteer(ListVolunteerRequest) returns (ListVolunteerResponse) {
	option (google.api.http) ={
		get: "/v1/volunteer"
	};
}
    // Update Volunteer
    rpc UpdateVolunteer(UpdateVolunteerRequest) returns (UpdateVolunteerResponse){
        option (google.api.http) = {
            put: "/v1/volunteer/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/volunteer/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Volunteer
    rpc DeleteVolunteer(DeleteVolunteerRequest) returns (DeleteVolunteerResponse){
        option (google.api.http) = {
            delete: "/v1/volunteer/{id}"
        };
    }
	
	// CreateFollower takes a Follower object to create.
	rpc CreateFollower(CreateFollowerRequest) returns (CreateFollowerResponse) {
		option (google.api.http) ={
			post: "/v1/follower"
			body: "*"
		};
	}
    // GetFollower takes an id and returns a single Follower.
	rpc GetFollower(GetFollowerRequest) returns (GetFollowerResponse) {
		option (google.api.http) ={
			get: "/v1/follower/{id}"
		};
	}
    // List Follower, takes filters, limit, and cursor param.
	rpc ListFollower(ListFollowerRequest) returns (ListFollowerResponse) {
	option (google.api.http) ={
		get: "/v1/follower"
	};
}
    // Update Follower
    rpc UpdateFollower(UpdateFollowerRequest) returns (UpdateFollowerResponse){
        option (google.api.http) = {
            put: "/v1/follower/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/follower/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Follower
    rpc DeleteFollower(DeleteFollowerRequest) returns (DeleteFollowerResponse){
        option (google.api.http) = {
            delete: "/v1/follower/{id}"
        };
    }
	
	// CreateTerritory takes a Territory object to create.
	rpc CreateTerritory(CreateTerritoryRequest) returns (CreateTerritoryResponse) {
		option (google.api.http) ={
			post: "/v1/territory"
			body: "*"
		};
	}
    // GetTerritory takes an id and returns a single Territory.
	rpc GetTerritory(GetTerritoryRequest) returns (GetTerritoryResponse) {
		option (google.api.http) ={
			get: "/v1/territory/{id}"
		};
	}
    // List Territory, takes filters, limit, and cursor param.
	rpc ListTerritory(ListTerritoryRequest) returns (ListTerritoryResponse) {
	option (google.api.http) ={
		get: "/v1/territory"
	};
}
    // Update Territory
    rpc UpdateTerritory(UpdateTerritoryRequest) returns (UpdateTerritoryResponse){
        option (google.api.http) = {
            put: "/v1/territory/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/territory/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Territory
    rpc DeleteTerritory(DeleteTerritoryRequest) returns (DeleteTerritoryResponse){
        option (google.api.http) = {
            delete: "/v1/territory/{id}"
        };
    }
	
	// CreateActivityType takes a ActivityType object to create.
	rpc CreateActivityType(CreateActivityTypeRequest) returns (CreateActivityTypeResponse) {
		option (google.api.http) ={
			post: "/v1/activitytype"
			body: "*"
		};
	}
    // GetActivityType takes an id and returns a single ActivityType.
	rpc GetActivityType(GetActivityTypeRequest) returns (GetActivityTypeResponse) {
		option (google.api.http) ={
			get: "/v1/activitytype/{id}"
		};
	}
    // List ActivityType, takes filters, limit, and cursor param.
	rpc ListActivityType(ListActivityTypeRequest) returns (ListActivityTypeResponse) {
	option (google.api.http) ={
		get: "/v1/activitytype"
	};
}
    // Update ActivityType
    rpc UpdateActivityType(UpdateActivityTypeRequest) returns (UpdateActivityTypeResponse){
        option (google.api.http) = {
            put: "/v1/activitytype/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/activitytype/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ActivityType
    rpc DeleteActivityType(DeleteActivityTypeRequest) returns (DeleteActivityTypeResponse){
        option (google.api.http) = {
            delete: "/v1/activitytype/{id}"
        };
    }
	
	// CreateActivity takes a Activity object to create.
	rpc CreateActivity(CreateActivityRequest) returns (CreateActivityResponse) {
		option (google.api.http) ={
			post: "/v1/activity"
			body: "*"
		};
	}
    // GetActivity takes an id and returns a single Activity.
	rpc GetActivity(GetActivityRequest) returns (GetActivityResponse) {
		option (google.api.http) ={
			get: "/v1/activity/{id}"
		};
	}
    // List Activity, takes filters, limit, and cursor param.
	rpc ListActivity(ListActivityRequest) returns (ListActivityResponse) {
	option (google.api.http) ={
		get: "/v1/activity"
	};
}
    // Update Activity
    rpc UpdateActivity(UpdateActivityRequest) returns (UpdateActivityResponse){
        option (google.api.http) = {
            put: "/v1/activity/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/activity/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Activity
    rpc DeleteActivity(DeleteActivityRequest) returns (DeleteActivityResponse){
        option (google.api.http) = {
            delete: "/v1/activity/{id}"
        };
    }
	
	// CreateNote takes a Note object to create.
	rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse) {
		option (google.api.http) ={
			post: "/v1/note"
			body: "*"
		};
	}
    // GetNote takes an id and returns a single Note.
	rpc GetNote(GetNoteRequest) returns (GetNoteResponse) {
		option (google.api.http) ={
			get: "/v1/note/{id}"
		};
	}
    // List Note, takes filters, limit, and cursor param.
	rpc ListNote(ListNoteRequest) returns (ListNoteResponse) {
	option (google.api.http) ={
		get: "/v1/note"
	};
}
    // Update Note
    rpc UpdateNote(UpdateNoteRequest) returns (UpdateNoteResponse){
        option (google.api.http) = {
            put: "/v1/note/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/note/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Note
    rpc DeleteNote(DeleteNoteRequest) returns (DeleteNoteResponse){
        option (google.api.http) = {
            delete: "/v1/note/{id}"
        };
    }
	
	// CreateAccount takes a Account object to create.
	rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
		option (google.api.http) ={
			post: "/v1/account"
			body: "*"
		};
	}
    // GetAccount takes an id and returns a single Account.
	rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
		option (google.api.http) ={
			get: "/v1/account/{id}"
		};
	}
    // List Account, takes filters, limit, and cursor param.
	rpc ListAccount(ListAccountRequest) returns (ListAccountResponse) {
	option (google.api.http) ={
		get: "/v1/account"
	};
}
    // Update Account
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse){
        option (google.api.http) = {
            put: "/v1/account/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/account/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Account
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse){
        option (google.api.http) = {
            delete: "/v1/account/{id}"
        };
    }
	
	// CreateOwnerMembership takes a OwnerMembership object to create.
	rpc CreateOwnerMembership(CreateOwnerMembershipRequest) returns (CreateOwnerMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/ownermembership"
			body: "*"
		};
	}
    // GetOwnerMembership takes an id and returns a single OwnerMembership.
	rpc GetOwnerMembership(GetOwnerMembershipRequest) returns (GetOwnerMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/ownermembership/{id}"
		};
	}
    // List OwnerMembership, takes filters, limit, and cursor param.
	rpc ListOwnerMembership(ListOwnerMembershipRequest) returns (ListOwnerMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/ownermembership"
	};
}
    // Update OwnerMembership
    rpc UpdateOwnerMembership(UpdateOwnerMembershipRequest) returns (UpdateOwnerMembershipResponse){
        option (google.api.http) = {
            put: "/v1/ownermembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/ownermembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete OwnerMembership
    rpc DeleteOwnerMembership(DeleteOwnerMembershipRequest) returns (DeleteOwnerMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/ownermembership/{id}"
        };
    }
	
	// CreateContact takes a Contact object to create.
	rpc CreateContact(CreateContactRequest) returns (CreateContactResponse) {
		option (google.api.http) ={
			post: "/v1/contact"
			body: "*"
		};
	}
    // GetContact takes an id and returns a single Contact.
	rpc GetContact(GetContactRequest) returns (GetContactResponse) {
		option (google.api.http) ={
			get: "/v1/contact/{id}"
		};
	}
    // List Contact, takes filters, limit, and cursor param.
	rpc ListContact(ListContactRequest) returns (ListContactResponse) {
	option (google.api.http) ={
		get: "/v1/contact"
	};
}
    // Update Contact
    rpc UpdateContact(UpdateContactRequest) returns (UpdateContactResponse){
        option (google.api.http) = {
            put: "/v1/contact/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/contact/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Contact
    rpc DeleteContact(DeleteContactRequest) returns (DeleteContactResponse){
        option (google.api.http) = {
            delete: "/v1/contact/{id}"
        };
    }
	
	// CreateContactMembership takes a ContactMembership object to create.
	rpc CreateContactMembership(CreateContactMembershipRequest) returns (CreateContactMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/contactmembership"
			body: "*"
		};
	}
    // GetContactMembership takes an id and returns a single ContactMembership.
	rpc GetContactMembership(GetContactMembershipRequest) returns (GetContactMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/contactmembership/{id}"
		};
	}
    // List ContactMembership, takes filters, limit, and cursor param.
	rpc ListContactMembership(ListContactMembershipRequest) returns (ListContactMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/contactmembership"
	};
}
    // Update ContactMembership
    rpc UpdateContactMembership(UpdateContactMembershipRequest) returns (UpdateContactMembershipResponse){
        option (google.api.http) = {
            put: "/v1/contactmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/contactmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete ContactMembership
    rpc DeleteContactMembership(DeleteContactMembershipRequest) returns (DeleteContactMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/contactmembership/{id}"
        };
    }
	
	// CreateCause takes a Cause object to create.
	rpc CreateCause(CreateCauseRequest) returns (CreateCauseResponse) {
		option (google.api.http) ={
			post: "/v1/cause"
			body: "*"
		};
	}
    // GetCause takes an id and returns a single Cause.
	rpc GetCause(GetCauseRequest) returns (GetCauseResponse) {
		option (google.api.http) ={
			get: "/v1/cause/{id}"
		};
	}
    // List Cause, takes filters, limit, and cursor param.
	rpc ListCause(ListCauseRequest) returns (ListCauseResponse) {
	option (google.api.http) ={
		get: "/v1/cause"
	};
}
    // Update Cause
    rpc UpdateCause(UpdateCauseRequest) returns (UpdateCauseResponse){
        option (google.api.http) = {
            put: "/v1/cause/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/cause/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Cause
    rpc DeleteCause(DeleteCauseRequest) returns (DeleteCauseResponse){
        option (google.api.http) = {
            delete: "/v1/cause/{id}"
        };
    }
	
	// CreateAgent takes a Agent object to create.
	rpc CreateAgent(CreateAgentRequest) returns (CreateAgentResponse) {
		option (google.api.http) ={
			post: "/v1/agent"
			body: "*"
		};
	}
    // GetAgent takes an id and returns a single Agent.
	rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
		option (google.api.http) ={
			get: "/v1/agent/{id}"
		};
	}
    // List Agent, takes filters, limit, and cursor param.
	rpc ListAgent(ListAgentRequest) returns (ListAgentResponse) {
	option (google.api.http) ={
		get: "/v1/agent"
	};
}
    // Update Agent
    rpc UpdateAgent(UpdateAgentRequest) returns (UpdateAgentResponse){
        option (google.api.http) = {
            put: "/v1/agent/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/agent/{item.id}"
                body: "*"
            }
        };
    }

    // Delete Agent
    rpc DeleteAgent(DeleteAgentRequest) returns (DeleteAgentResponse){
        option (google.api.http) = {
            delete: "/v1/agent/{id}"
        };
    }
	
	// CreateAgentMembership takes a AgentMembership object to create.
	rpc CreateAgentMembership(CreateAgentMembershipRequest) returns (CreateAgentMembershipResponse) {
		option (google.api.http) ={
			post: "/v1/agentmembership"
			body: "*"
		};
	}
    // GetAgentMembership takes an id and returns a single AgentMembership.
	rpc GetAgentMembership(GetAgentMembershipRequest) returns (GetAgentMembershipResponse) {
		option (google.api.http) ={
			get: "/v1/agentmembership/{id}"
		};
	}
    // List AgentMembership, takes filters, limit, and cursor param.
	rpc ListAgentMembership(ListAgentMembershipRequest) returns (ListAgentMembershipResponse) {
	option (google.api.http) ={
		get: "/v1/agentmembership"
	};
}
    // Update AgentMembership
    rpc UpdateAgentMembership(UpdateAgentMembershipRequest) returns (UpdateAgentMembershipResponse){
        option (google.api.http) = {
            put: "/v1/agentmembership/{item.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/agentmembership/{item.id}"
                body: "*"
            }
        };
    }

    // Delete AgentMembership
    rpc DeleteAgentMembership(DeleteAgentMembershipRequest) returns (DeleteAgentMembershipResponse){
        option (google.api.http) = {
            delete: "/v1/agentmembership/{id}"
        };
    }
	
}