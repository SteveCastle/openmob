package v1

import (
	"context"
	"fmt"
	"time"

	v1 "github.com/SteveCastle/openmob/packages/shrike/src/pkg/api/v1"
	"github.com/golang/protobuf/ptypes"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Create new {{.Table.Name}}
func (s *shrikeServiceServer) Create{{.Table.Name}}(ctx context.Context, req *v1.Create{{.Table.Name}}Request) (*v1.Create{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()
	var id string
	// insert {{.Table.Name}} entity data
	err = c.QueryRowContext(ctx, "INSERT INTO {{snake .Table.Name}} ({{range $index, $value := .Table.Columns}}{{if gt $index 2}}{{if gt $index 3}}, {{end}}{{.DBName}}{{end}}{{end}}) VALUES({{range $index, $value := .Table.Columns}}{{if gt $index 2}}{{if gt $index 3}}, {{end}}${{dec (dec $index)}}{{end}}{{end}})  RETURNING id;",
		{{range $index, $value := .Table.Columns}}{{if gt $index 2}}{{if gt $index 3}}, {{end}}req.Item.{{.Name}}{{end}}{{end}}).Scan(&id)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to insert into {{.Table.Name}}-> "+err.Error())
	}

	// get ID of creates {{.Table.Name}}
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve id for created {{.Table.Name}}-> "+err.Error())
	}

	return &v1.Create{{.Table.Name}}Response{
		Api: apiVersion,
		ID:  id,
	}, nil
}

// Get {{snake .Table.Name}} by id.
func (s *shrikeServiceServer) Get{{.Table.Name}}(ctx context.Context, req *v1.Get{{.Table.Name}}Request) (*v1.Get{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// query {{.Table.Name}} by ID
	rows, err := c.QueryContext(ctx, "SELECT {{range $index, $value := .Table.Columns}}{{if $index}}, {{end}}{{.DBName}}{{end}} FROM {{snake .Table.Name}} WHERE id=$1",
		req.ID)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to select from {{.Table.Name}}-> "+err.Error())
	}
	defer rows.Close()

	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, status.Error(codes.Unknown, "failed to retrieve data from {{.Table.Name}}-> "+err.Error())
		}
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%s' is not found",
			req.ID))
	}

	// scan {{.Table.Name}} data into protobuf model
	var {{toLower .Table.Name}} v1.{{.Table.Name}}
	var createdAt time.Time
	var updatedAt time.Time

	if err := rows.Scan({{range .Table.Columns}}{{if eq .Type "google.protobuf.Timestamp"}}&{{camel .Name}}{{end}}{{if ne .Type "google.protobuf.Timestamp"}}&{{toLower .Table.Name}}.{{.Name}}{{end}}, {{end}}); err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve field values from {{.Table.Name}} row-> "+err.Error())
	}

	// Convert time.Time from database into proto timestamp.
	{{toLower .Table.Name}}.CreatedAt, err = ptypes.TimestampProto(createdAt)
	if err != nil {
		return nil, status.Error(codes.Unknown, "createdAt field has invalid format-> "+err.Error())
	}
	{{toLower .Table.Name}}.UpdatedAt, err = ptypes.TimestampProto(updatedAt)
	if err != nil {
		return nil, status.Error(codes.Unknown, "updatedAt field has invalid format-> "+err.Error())
	}

	if rows.Next() {
		return nil, status.Error(codes.Unknown, fmt.Sprintf("found multiple {{.Table.Name}} rows with ID='%s'",
			req.ID))
	}

	return &v1.Get{{.Table.Name}}Response{
		Api:  apiVersion,
		Item: &{{toLower .Table.Name}},
	}, nil

}

// Read all {{.Table.Name}}
func (s *shrikeServiceServer) List{{.Table.Name}}(ctx context.Context, req *v1.List{{.Table.Name}}Request) (*v1.List{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// get {{.Table.Name}} list
	rows, err := c.QueryContext(ctx, "SELECT {{range $index, $value := .Table.Columns}}{{if $index}}, {{end}}{{.DBName}}{{end}} FROM {{snake .Table.Name}}")
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to select from {{.Table.Name}}-> "+err.Error())
	}
	defer rows.Close()

    // Variables to store results returned by database.
	list := []*v1.{{.Table.Name}}{}
	var createdAt time.Time
	var updatedAt time.Time

	for rows.Next() {
		{{toLower .Table.Name}} := new(v1.{{.Table.Name}})
		if err := rows.Scan({{range .Table.Columns}}{{if eq .Type "google.protobuf.Timestamp"}}&{{camel .Name}}{{end}}{{if ne .Type "google.protobuf.Timestamp"}}&{{toLower .Table.Name}}.{{.Name}}{{end}}, {{end}}); err != nil {
			return nil, status.Error(codes.Unknown, "failed to retrieve field values from {{.Table.Name}} row-> "+err.Error())
		}
	// Convert time.Time from database into proto timestamp.
	{{toLower .Table.Name}}.CreatedAt, err = ptypes.TimestampProto(createdAt)
	if err != nil {
		return nil, status.Error(codes.Unknown, "createdAt field has invalid format-> "+err.Error())
	}
	{{toLower .Table.Name}}.UpdatedAt, err = ptypes.TimestampProto(updatedAt)
	if err != nil {
		return nil, status.Error(codes.Unknown, "updatedAt field has invalid format-> "+err.Error())
	}

		list = append(list, {{toLower .Table.Name}})
	}

	if err := rows.Err(); err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve data from {{.Table.Name}}-> "+err.Error())
	}

	return &v1.List{{.Table.Name}}Response{
		Api:   apiVersion,
		Items: list,
	}, nil
}

// Update {{.Table.Name}}
func (s *shrikeServiceServer) Update{{.Table.Name}}(ctx context.Context, req *v1.Update{{.Table.Name}}Request) (*v1.Update{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// update {{snake .Table.Name}}
	res, err := c.ExecContext(ctx, "UPDATE {{snake .Table.Name}} SET {{range $index, $value := .Table.Columns}}{{if gt $index 2}}{{if gt $index 3}}, {{end}}{{.DBName}}=${{dec $index}}{{end}}{{end}} WHERE id=$1",
		{{range $index, $value := .Table.Columns}}{{if ne $index 1}}{{if ne $index 2}}req.Item.{{.Name}},{{end}}{{end}}{{end}} )
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to update {{.Table.Name}}-> "+err.Error())
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve rows affected value-> "+err.Error())
	}

	if rows == 0 {
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%s' is not found",
			req.Item.ID))
	}

	return &v1.Update{{.Table.Name}}Response{
		Api:     apiVersion,
		Updated: rows,
	}, nil
}

// Delete {{snake .Table.Name}}
func (s *shrikeServiceServer) Delete{{.Table.Name}}(ctx context.Context, req *v1.Delete{{.Table.Name}}Request) (*v1.Delete{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// delete {{snake .Table.Name}}
	res, err := c.ExecContext(ctx, "DELETE FROM {{snake .Table.Name}} WHERE id=$1", req.ID)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to delete {{.Table.Name}}-> "+err.Error())
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve rows affected value-> "+err.Error())
	}

	if rows == 0 {
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%s' is not found",
			req.ID))
	}

	return &v1.Delete{{.Table.Name}}Response{
		Api:     apiVersion,
		Deleted: rows,
	}, nil
}
