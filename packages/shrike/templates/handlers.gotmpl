package v1

import (
	"context"
	"database/sql"
	"fmt"

	v1 "github.com/SteveCastle/openmob/packages/shrike/src/pkg/api/v1"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

const (
	// apiVersion is version of API is provided by server
	apiVersion = "v1"
)

// shrikeServiceServer is implementation of v1.ShrikeServiceServer proto interface
type shrikeServiceServer struct {
	db *sql.DB
}

// NewShrikeServiceServer creates {{.Table.Name}} service
func NewShrikeServiceServer(db *sql.DB) v1.ShrikeServiceServer {
	return &shrikeServiceServer{db: db}
}

// checkAPI checks if the API version requested by client is supported by server
func (s *shrikeServiceServer) checkAPI(api string) error {
	// API version is "" means use current version of the service
	if len(api) > 0 {
		if apiVersion != api {
			return status.Errorf(codes.Unimplemented,
				"unsupported API version: service implements API version '%s', but asked for '%s'", apiVersion, api)
		}
	}
	return nil
}

// connect returns SQL database connection from the pool
func (s *shrikeServiceServer) connect(ctx context.Context) (*sql.Conn, error) {
	c, err := s.db.Conn(ctx)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to connect to database-> "+err.Error())
	}
	return c, nil
}

// Create new {{.Table.Name}}
func (s *shrikeServiceServer) Create{{.Table.Name}}(ctx context.Context, req *v1.Create{{.Table.Name}}Request) (*v1.Create{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()
	var id int64
	// insert {{.Table.Name}} entity data
	err = c.QueryRowContext(ctx, "INSERT INTO {{snake .Table.Name}} ({{range .Table.Columns}} {{.DBName}} {{end}}) VALUES({{range $index, $value := .Table.Columns}} ${{inc $index}}{{end}})  RETURNING id;",
		{{range .Table.Columns}} req.Item{{.Name}} {{end}}).Scan(&id)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to insert into {{.Table.Name}}-> "+err.Error())
	}

	// get ID of creates {{.Table.Name}}
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve id for created {{.Table.Name}}-> "+err.Error())
	}

	return &v1.Create{{.Table.Name}}Response{
		Api: apiVersion,
		Id:  id,
	}, nil
}

// Get {{snake .Table.Name}} by id.
func (s *shrikeServiceServer) Get{{.Table.Name}}(ctx context.Context, req *v1.Get{{.Table.Name}}Request) (*v1.Get{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// query {{.Table.Name}} by ID
	rows, err := c.QueryContext(ctx, "SELECT id, title FROM {{snake .Table.Name}} WHERE id=$1",
		req.Id)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to select from {{.Table.Name}}-> "+err.Error())
	}
	defer rows.Close()

	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, status.Error(codes.Unknown, "failed to retrieve data from {{.Table.Name}}-> "+err.Error())
		}
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%d' is not found",
			req.Id))
	}

	// get {{.Table.Name}} data
	var {{toLower .Table.Name}} v1.{{.Table.Name}}
	if err := rows.Scan(&{{toLower .Table.Name}}.Id, &{{toLower .Table.Name}}.Title); err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve field values from {{.Table.Name}} row-> "+err.Error())
	}

	if rows.Next() {
		return nil, status.Error(codes.Unknown, fmt.Sprintf("found multiple {{.Table.Name}} rows with ID='%d'",
			req.Id))
	}

	return &v1.Get{{.Table.Name}}Response{
		Api:  apiVersion,
		Item: &{{toLower .Table.Name}},
	}, nil

}

// Read all {{.Table.Name}}
func (s *shrikeServiceServer) List{{.Table.Name}}(ctx context.Context, req *v1.List{{.Table.Name}}Request) (*v1.List{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// get {{.Table.Name}} list
	rows, err := c.QueryContext(ctx, "SELECT id,title FROM {{snake .Table.Name}}")
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to select from {{.Table.Name}}-> "+err.Error())
	}
	defer rows.Close()

	list := []*v1.{{.Table.Name}}{}
	for rows.Next() {
		{{toLower .Table.Name}} := new(v1.{{.Table.Name}})
		if err := rows.Scan(&{{toLower .Table.Name}}.Id, &{{toLower .Table.Name}}.Title); err != nil {
			return nil, status.Error(codes.Unknown, "failed to retrieve field values from {{.Table.Name}} row-> "+err.Error())
		}
		list = append(list, {{toLower .Table.Name}})
	}

	if err := rows.Err(); err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve data from {{.Table.Name}}-> "+err.Error())
	}

	return &v1.List{{.Table.Name}}Response{
		Api:   apiVersion,
		Items: list,
	}, nil
}

// Update {{.Table.Name}}
func (s *shrikeServiceServer) Update{{.Table.Name}}(ctx context.Context, req *v1.Update{{.Table.Name}}Request) (*v1.Update{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// update {{snake .Table.Name}}
	res, err := c.ExecContext(ctx, "UPDATE {{snake .Table.Name}} SET title=$1 WHERE id=$2",
		req.Item.Title, req.Item.Id)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to update {{.Table.Name}}-> "+err.Error())
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve rows affected value-> "+err.Error())
	}

	if rows == 0 {
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%d' is not found",
			req.Item.Id))
	}

	return &v1.Update{{.Table.Name}}Response{
		Api:     apiVersion,
		Updated: rows,
	}, nil
}

// Delete {{snake .Table.Name}}
func (s *shrikeServiceServer) Delete{{.Table.Name}}(ctx context.Context, req *v1.Delete{{.Table.Name}}Request) (*v1.Delete{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// get SQL connection from pool
	c, err := s.connect(ctx)
	if err != nil {
		return nil, err
	}
	defer c.Close()

	// delete {{snake .Table.Name}}
	res, err := c.ExecContext(ctx, "DELETE FROM {{snake .Table.Name}} WHERE id=$1", req.Id)
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to delete {{.Table.Name}}-> "+err.Error())
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return nil, status.Error(codes.Unknown, "failed to retrieve rows affected value-> "+err.Error())
	}

	if rows == 0 {
		return nil, status.Error(codes.NotFound, fmt.Sprintf("{{.Table.Name}} with ID='%d' is not found",
			req.Id))
	}

	return &v1.Delete{{.Table.Name}}Response{
		Api:     apiVersion,
		Deleted: rows,
	}, nil
}
