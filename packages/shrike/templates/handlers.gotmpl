package v1

import (
	"context"

	v1 "github.com/SteveCastle/openmob/packages/shrike/src/pkg/api/v1"
	"github.com/SteveCastle/openmob/packages/shrike/src/pkg/models"
)

// Create new {{.Table.Name}}
func (s *shrikeServiceServer) Create{{.Table.Name}}(ctx context.Context, req *v1.Create{{.Table.Name}}Request) (*v1.Create{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// Create a {{.Table.Name}} Manager
	m := models.New{{.Table.Name}}Manager(s.db)

	// Get a list of {{camel .Table.Name}}s given filters, ordering, and limit rules.
	id, err := m.Create(ctx, req.Item)
	if err != nil {
		return nil, err
	}
	return &v1.Create{{.Table.Name}}Response{
		Api: apiVersion,
		ID:  *id,
	}, nil
}

// Get {{camel .Table.Name}} by id.
func (s *shrikeServiceServer) Get{{.Table.Name}}(ctx context.Context, req *v1.Get{{.Table.Name}}Request) (*v1.Get{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// Create a {{.Table.Name}} Manager
	m := models.New{{.Table.Name}}Manager(s.db)

	// Get a list of {{camel .Table.Name}}s given filters, ordering, and limit rules.
	{{camel .Table.Name}}, err := m.Get(ctx, req.ID)
	if err != nil {
		return nil, err
	}

	return &v1.Get{{.Table.Name}}Response{
		Api:  apiVersion,
		Item: m.GetProto({{camel .Table.Name}}),
	}, nil

}

// Read all {{.Table.Name}}
func (s *shrikeServiceServer) List{{.Table.Name}}(ctx context.Context, req *v1.List{{.Table.Name}}Request) (*v1.List{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}

	// Create a {{.Table.Name}} Manager
	m := models.New{{.Table.Name}}Manager(s.db)

	// Get a list of {{camel .Table.Name}}s given filters, ordering, and limit rules.
	list, err := m.List(ctx, req.Filters, req.Ordering, req.Limit)
	if err != nil {
		return nil, err
	}

	return &v1.List{{.Table.Name}}Response{
		Api:   apiVersion,
		Items: m.GetProtoList(list),
	}, nil
}

// Update {{.Table.Name}}
func (s *shrikeServiceServer) Update{{.Table.Name}}(ctx context.Context, req *v1.Update{{.Table.Name}}Request) (*v1.Update{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// Create a {{.Table.Name}} Manager
	m := models.New{{.Table.Name}}Manager(s.db)

	// Get a list of {{camel .Table.Name}}s given filters, ordering, and limit rules.
	rows, err := m.Update(ctx, req.Item)
	if err != nil {
		return nil, err
	}

	return &v1.Update{{.Table.Name}}Response{
		Api:     apiVersion,
		Updated: *rows,
	}, nil
}

// Delete {{camel .Table.Name}}
func (s *shrikeServiceServer) Delete{{.Table.Name}}(ctx context.Context, req *v1.Delete{{.Table.Name}}Request) (*v1.Delete{{.Table.Name}}Response, error) {
	// check if the API version requested by client is supported by server
	if err := s.checkAPI(req.Api); err != nil {
		return nil, err
	}
	// Create a {{.Table.Name}} Manager
	m := models.New{{.Table.Name}}Manager(s.db)

	// Get a list of {{camel .Table.Name}}s given filters, ordering, and limit rules.
	rows, err := m.Delete(ctx, req.ID)
	if err != nil {
		return nil, err
	}

	return &v1.Delete{{.Table.Name}}Response{
		Api:     apiVersion,
		Deleted: *rows,
	}, nil
}
