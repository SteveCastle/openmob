type Campaign {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
}

input CampaignInput {
  title: String!
}

type Cause {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
}

input CauseInput {
  title: String!
  slug: String!
}

"""Company content type."""
type Company {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  slug: String!
}

input CompanyInput {
  title: String
  slug: String!
}

input createCampaignInput {
  data: CampaignInput
}

type createCampaignPayload {
  campaign: Campaign
}

input createCauseInput {
  data: CauseInput
}

type createCausePayload {
  cause: Cause
}

input createCompanyInput {
  data: CompanyInput
}

type createCompanyPayload {
  company: Company
}

input createEventInput {
  data: EventInput
}

type createEventPayload {
  event: Event
}

input createImageInput {
  data: ImageInput
}

type createImagePayload {
  image: Image
}

input createPoliticianInput {
  data: PoliticianInput
}

type createPoliticianPayload {
  politician: Politician
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createPromotionInput {
  data: PromotionInput
}

type createPromotionPayload {
  promotion: Promotion
}

input createRaceInput {
  data: RaceInput
}

type createRacePayload {
  race: Race
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCampaignInput {
  where: InputID
}

type deleteCampaignPayload {
  campaign: Campaign
}

input deleteCauseInput {
  where: InputID
}

type deleteCausePayload {
  cause: Cause
}

input deleteCompanyInput {
  where: InputID
}

type deleteCompanyPayload {
  company: Company
}

input deleteEventInput {
  where: InputID
}

type deleteEventPayload {
  event: Event
}

input deleteImageInput {
  where: InputID
}

type deleteImagePayload {
  image: Image
}

input deletePoliticianInput {
  where: InputID
}

type deletePoliticianPayload {
  politician: Politician
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deletePromotionInput {
  where: InputID
}

type deletePromotionPayload {
  promotion: Promotion
}

input deleteRaceInput {
  where: InputID
}

type deleteRacePayload {
  race: Race
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_PRODUCT_TYPE {
  physical
  digital
  donation
  subscription
}

enum ENUM_PROMOTION_TYPE {
  percentage
  fixed
}

"""Event content type."""
type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
  startTime: DateTime
  endTime: DateTime
}

input EventInput {
  title: String!
  slug: String!
  startTime: DateTime
  endTime: DateTime
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

"""Image content type."""
type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  image: UploadFile
}

input ImageInput {
  title: String
  image: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Campaign | createCampaignPayload | updateCampaignPayload | deleteCampaignPayload | Cause | createCausePayload | updateCausePayload | deleteCausePayload | Company | createCompanyPayload | updateCompanyPayload | deleteCompanyPayload | Event | createEventPayload | updateEventPayload | deleteEventPayload | Image | createImagePayload | updateImagePayload | deleteImagePayload | Politician | createPoliticianPayload | updatePoliticianPayload | deletePoliticianPayload | Product | createProductPayload | updateProductPayload | deleteProductPayload | Promotion | createPromotionPayload | updatePromotionPayload | deletePromotionPayload | Race | createRacePayload | updateRacePayload | deleteRacePayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCampaign(input: createCampaignInput): createCampaignPayload
  updateCampaign(input: updateCampaignInput): updateCampaignPayload
  deleteCampaign(input: deleteCampaignInput): deleteCampaignPayload
  createCause(input: createCauseInput): createCausePayload
  updateCause(input: updateCauseInput): updateCausePayload
  deleteCause(input: deleteCauseInput): deleteCausePayload
  createCompany(input: createCompanyInput): createCompanyPayload
  updateCompany(input: updateCompanyInput): updateCompanyPayload
  deleteCompany(input: deleteCompanyInput): deleteCompanyPayload
  createEvent(input: createEventInput): createEventPayload
  updateEvent(input: updateEventInput): updateEventPayload
  deleteEvent(input: deleteEventInput): deleteEventPayload
  createImage(input: createImageInput): createImagePayload
  updateImage(input: updateImageInput): updateImagePayload
  deleteImage(input: deleteImageInput): deleteImagePayload
  createPolitician(input: createPoliticianInput): createPoliticianPayload
  updatePolitician(input: updatePoliticianInput): updatePoliticianPayload
  deletePolitician(input: deletePoliticianInput): deletePoliticianPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createPromotion(input: createPromotionInput): createPromotionPayload
  updatePromotion(input: updatePromotionInput): updatePromotionPayload
  deletePromotion(input: deletePromotionInput): deletePromotionPayload
  createRace(input: createRaceInput): createRacePayload
  updateRace(input: updateRaceInput): updateRacePayload
  deleteRace(input: deleteRaceInput): deleteRacePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Politician {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  slug: String!
}

input PoliticianInput {
  name: String
  slug: String!
}

"""A product item."""
type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  primaryImage: Image
  promotion: Promotion
  price: Float!
  type: ENUM_PRODUCT_TYPE!
  slug: String!
  fullDescription: String
  shortDescription: String
}

input ProductInput {
  title: String!
  primaryImage: ID
  promotion: ID
  price: Float!
  type: ENUM_PRODUCT_TYPE!
  slug: String!
  fullDescription: String
  shortDescription: String
}

"""A promotion on a product or collection of products."""
type Promotion {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Product
  title: String
  type: ENUM_PROMOTION_TYPE
  enabled: Boolean
}

input PromotionInput {
  product: ID
  title: String
  type: ENUM_PROMOTION_TYPE
  enabled: Boolean
}

type Query {
  campaign(id: ID!): Campaign
  campaigns(sort: String, limit: Int, start: Int, where: JSON): [Campaign]
  cause(id: ID!): Cause
  causes(sort: String, limit: Int, start: Int, where: JSON): [Cause]
  company(id: ID!): Company
  companies(sort: String, limit: Int, start: Int, where: JSON): [Company]
  event(id: ID!): Event
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
  image(id: ID!): Image
  images(sort: String, limit: Int, start: Int, where: JSON): [Image]
  politician(id: ID!): Politician
  politicians(sort: String, limit: Int, start: Int, where: JSON): [Politician]
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  promotion(id: ID!): Promotion
  promotions(sort: String, limit: Int, start: Int, where: JSON): [Promotion]
  race(id: ID!): Race
  races(sort: String, limit: Int, start: Int, where: JSON): [Race]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Race {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Title: String!
}

input RaceInput {
  Title: String!
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCampaignInput {
  where: InputID
  data: CampaignInput
}

type updateCampaignPayload {
  campaign: Campaign
}

input updateCauseInput {
  where: InputID
  data: CauseInput
}

type updateCausePayload {
  cause: Cause
}

input updateCompanyInput {
  where: InputID
  data: CompanyInput
}

type updateCompanyPayload {
  company: Company
}

input updateEventInput {
  where: InputID
  data: EventInput
}

type updateEventPayload {
  event: Event
}

input updateImageInput {
  where: InputID
  data: ImageInput
}

type updateImagePayload {
  image: Image
}

input updatePoliticianInput {
  where: InputID
  data: PoliticianInput
}

type updatePoliticianPayload {
  politician: Politician
}

input updateProductInput {
  where: InputID
  data: ProductInput
}

type updateProductPayload {
  product: Product
}

input updatePromotionInput {
  where: InputID
  data: PromotionInput
}

type updatePromotionPayload {
  promotion: Promotion
}

input updateRaceInput {
  where: InputID
  data: RaceInput
}

type updateRacePayload {
  race: Race
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
